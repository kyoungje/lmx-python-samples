# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.2.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _WMX3ApiPython
else:
    import _WMX3ApiPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import weakref

class intArray(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, nelements):
        _WMX3ApiPython.intArray_swiginit(self, _WMX3ApiPython.new_intArray(nelements))
    __swig_destroy__ = _WMX3ApiPython.delete_intArray

    def __getitem__(self, index):
        return _WMX3ApiPython.intArray___getitem__(self, index)

    def __setitem__(self, index, value):
        return _WMX3ApiPython.intArray___setitem__(self, index, value)

    def cast(self):
        return _WMX3ApiPython.intArray_cast(self)

    @staticmethod
    def frompointer(t):
        return _WMX3ApiPython.intArray_frompointer(t)

# Register intArray in _WMX3ApiPython:
_WMX3ApiPython.intArray_swigregister(intArray)
class doubleArray(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, nelements):
        _WMX3ApiPython.doubleArray_swiginit(self, _WMX3ApiPython.new_doubleArray(nelements))
    __swig_destroy__ = _WMX3ApiPython.delete_doubleArray

    def __getitem__(self, index):
        return _WMX3ApiPython.doubleArray___getitem__(self, index)

    def __setitem__(self, index, value):
        return _WMX3ApiPython.doubleArray___setitem__(self, index, value)

    def cast(self):
        return _WMX3ApiPython.doubleArray_cast(self)

    @staticmethod
    def frompointer(t):
        return _WMX3ApiPython.doubleArray_frompointer(t)

# Register doubleArray in _WMX3ApiPython:
_WMX3ApiPython.doubleArray_swigregister(doubleArray)
class uintArray(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, nelements):
        _WMX3ApiPython.uintArray_swiginit(self, _WMX3ApiPython.new_uintArray(nelements))
    __swig_destroy__ = _WMX3ApiPython.delete_uintArray

    def __getitem__(self, index):
        return _WMX3ApiPython.uintArray___getitem__(self, index)

    def __setitem__(self, index, value):
        return _WMX3ApiPython.uintArray___setitem__(self, index, value)

    def cast(self):
        return _WMX3ApiPython.uintArray_cast(self)

    @staticmethod
    def frompointer(t):
        return _WMX3ApiPython.uintArray_frompointer(t)

# Register uintArray in _WMX3ApiPython:
_WMX3ApiPython.uintArray_swigregister(uintArray)
class intp(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _WMX3ApiPython.intp_swiginit(self, _WMX3ApiPython.new_intp())
    __swig_destroy__ = _WMX3ApiPython.delete_intp

    def assign(self, value):
        return _WMX3ApiPython.intp_assign(self, value)

    def value(self):
        return _WMX3ApiPython.intp_value(self)

    def cast(self):
        return _WMX3ApiPython.intp_cast(self)

    @staticmethod
    def frompointer(t):
        return _WMX3ApiPython.intp_frompointer(t)

# Register intp in _WMX3ApiPython:
_WMX3ApiPython.intp_swigregister(intp)
class uintp(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _WMX3ApiPython.uintp_swiginit(self, _WMX3ApiPython.new_uintp())
    __swig_destroy__ = _WMX3ApiPython.delete_uintp

    def assign(self, value):
        return _WMX3ApiPython.uintp_assign(self, value)

    def value(self):
        return _WMX3ApiPython.uintp_value(self)

    def cast(self):
        return _WMX3ApiPython.uintp_cast(self)

    @staticmethod
    def frompointer(t):
        return _WMX3ApiPython.uintp_frompointer(t)

# Register uintp in _WMX3ApiPython:
_WMX3ApiPython.uintp_swigregister(uintp)
class ushortp(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _WMX3ApiPython.ushortp_swiginit(self, _WMX3ApiPython.new_ushortp())
    __swig_destroy__ = _WMX3ApiPython.delete_ushortp

    def assign(self, value):
        return _WMX3ApiPython.ushortp_assign(self, value)

    def value(self):
        return _WMX3ApiPython.ushortp_value(self)

    def cast(self):
        return _WMX3ApiPython.ushortp_cast(self)

    @staticmethod
    def frompointer(t):
        return _WMX3ApiPython.ushortp_frompointer(t)

# Register ushortp in _WMX3ApiPython:
_WMX3ApiPython.ushortp_swigregister(ushortp)
class doublep(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _WMX3ApiPython.doublep_swiginit(self, _WMX3ApiPython.new_doublep())
    __swig_destroy__ = _WMX3ApiPython.delete_doublep

    def assign(self, value):
        return _WMX3ApiPython.doublep_assign(self, value)

    def value(self):
        return _WMX3ApiPython.doublep_value(self)

    def cast(self):
        return _WMX3ApiPython.doublep_cast(self)

    @staticmethod
    def frompointer(t):
        return _WMX3ApiPython.doublep_frompointer(t)

# Register doublep in _WMX3ApiPython:
_WMX3ApiPython.doublep_swigregister(doublep)
class boolp(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _WMX3ApiPython.boolp_swiginit(self, _WMX3ApiPython.new_boolp())
    __swig_destroy__ = _WMX3ApiPython.delete_boolp

    def assign(self, value):
        return _WMX3ApiPython.boolp_assign(self, value)

    def value(self):
        return _WMX3ApiPython.boolp_value(self)

    def cast(self):
        return _WMX3ApiPython.boolp_cast(self)

    @staticmethod
    def frompointer(t):
        return _WMX3ApiPython.boolp_frompointer(t)

# Register boolp in _WMX3ApiPython:
_WMX3ApiPython.boolp_swigregister(boolp)

def IsErrorIndex(index, maxIndexValue):
    return _WMX3ApiPython.IsErrorIndex(index, maxIndexValue)
class FormatTypeArray(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, nelements):
        _WMX3ApiPython.FormatTypeArray_swiginit(self, _WMX3ApiPython.new_FormatTypeArray(nelements))
    __swig_destroy__ = _WMX3ApiPython.delete_FormatTypeArray

    def __getitem__(self, index):
        return _WMX3ApiPython.FormatTypeArray___getitem__(self, index)

    def __setitem__(self, index, value):
        return _WMX3ApiPython.FormatTypeArray___setitem__(self, index, value)

    def cast(self):
        return _WMX3ApiPython.FormatTypeArray_cast(self)

    @staticmethod
    def frompointer(t):
        return _WMX3ApiPython.FormatTypeArray_frompointer(t)

# Register FormatTypeArray in _WMX3ApiPython:
_WMX3ApiPython.FormatTypeArray_swigregister(FormatTypeArray)
class constants(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    maxAxes = _WMX3ApiPython.constants_maxAxes
    maxIoInSize = _WMX3ApiPython.constants_maxIoInSize
    maxIoOutSize = _WMX3ApiPython.constants_maxIoOutSize
    moduleFileNameLen = _WMX3ApiPython.constants_moduleFileNameLen
    moduleNameLen = _WMX3ApiPython.constants_moduleNameLen
    moduleDescLen = _WMX3ApiPython.constants_moduleDescLen
    moduleLen = _WMX3ApiPython.constants_moduleLen
    maxDeviceName = _WMX3ApiPython.constants_maxDeviceName
    maxDevices = _WMX3ApiPython.constants_maxDevices
    maxInterrupts = _WMX3ApiPython.constants_maxInterrupts
    maxEventInterpolationAxes = _WMX3ApiPython.constants_maxEventInterpolationAxes
    maxLogOutputDataSize = _WMX3ApiPython.constants_maxLogOutputDataSize
    maxFlightRecorderBufferSize = _WMX3ApiPython.constants_maxFlightRecorderBufferSize
    maxInPosChannel = _WMX3ApiPython.constants_maxInPosChannel
    maxSyncGroup = _WMX3ApiPython.constants_maxSyncGroup
    maxTriggerEvents = _WMX3ApiPython.constants_maxTriggerEvents
    maxProfileUnsignedInput = _WMX3ApiPython.constants_maxProfileUnsignedInput
    maxIoLogAddressSize = _WMX3ApiPython.constants_maxIoLogAddressSize
    maxIoLogFormatSize = _WMX3ApiPython.constants_maxIoLogFormatSize
    maxLogOutputIoInputByteSize = _WMX3ApiPython.constants_maxLogOutputIoInputByteSize
    maxLogOutputIoOutputByteSize = _WMX3ApiPython.constants_maxLogOutputIoOutputByteSize
    maxLogBufferSize = _WMX3ApiPython.constants_maxLogBufferSize
    maxLogBufferSampleSize = _WMX3ApiPython.constants_maxLogBufferSampleSize
    maxLogChannel = _WMX3ApiPython.constants_maxLogChannel
    maxLogHeaderBytes = _WMX3ApiPython.constants_maxLogHeaderBytes
    maxLogHeaderLines = _WMX3ApiPython.constants_maxLogHeaderLines
    maxLogDirSize = _WMX3ApiPython.constants_maxLogDirSize
    maxLogFileNameSize = _WMX3ApiPython.constants_maxLogFileNameSize
    maxLogDataSize = _WMX3ApiPython.constants_maxLogDataSize
    maxLogDelimiterSize = _WMX3ApiPython.constants_maxLogDelimiterSize
    maxLogPrecision = _WMX3ApiPython.constants_maxLogPrecision
    maxMemLogBufferSize = _WMX3ApiPython.constants_maxMemLogBufferSize
    maxMemLogChannel = _WMX3ApiPython.constants_maxMemLogChannel
    maxMemLogAxesSize = _WMX3ApiPython.constants_maxMemLogAxesSize
    maxMemLogDataSize = _WMX3ApiPython.constants_maxMemLogDataSize
    maxMemLogIoInputByteSize = _WMX3ApiPython.constants_maxMemLogIoInputByteSize
    maxMemLogIoOutputByteSize = _WMX3ApiPython.constants_maxMemLogIoOutputByteSize
    maxMemLogMDataByteSize = _WMX3ApiPython.constants_maxMemLogMDataByteSize
    maxMemLogTriggerEventSize = _WMX3ApiPython.constants_maxMemLogTriggerEventSize
    maxApiBufferChannel = _WMX3ApiPython.constants_maxApiBufferChannel
    maxApiBufferErrorLog = _WMX3ApiPython.constants_maxApiBufferErrorLog
    maxDefaultApiBufferSize = _WMX3ApiPython.constants_maxDefaultApiBufferSize
    maxPitchErrorCompPoints = _WMX3ApiPython.constants_maxPitchErrorCompPoints
    max2dPitchErrorCompPoints = _WMX3ApiPython.constants_max2dPitchErrorCompPoints
    max2dPitchErrorCompChannel = _WMX3ApiPython.constants_max2dPitchErrorCompChannel
    maxSizeSet2dPitchErrorCompValue = _WMX3ApiPython.constants_maxSizeSet2dPitchErrorCompValue
    maxEvents = _WMX3ApiPython.constants_maxEvents
    maxBitArray = _WMX3ApiPython.constants_maxBitArray
    maxHardwareTouchProbeLatchedValues = _WMX3ApiPython.constants_maxHardwareTouchProbeLatchedValues
    maxTouchprobeChannel = _WMX3ApiPython.constants_maxTouchprobeChannel
    maxPsoChannel = _WMX3ApiPython.constants_maxPsoChannel
    maxPsoData = _WMX3ApiPython.constants_maxPsoData
    maxPsoIoEncSize = _WMX3ApiPython.constants_maxPsoIoEncSize
    maxPveloChannel = _WMX3ApiPython.constants_maxPveloChannel
    maxPveloData = _WMX3ApiPython.constants_maxPveloData
    maxPveloIoEncSize = _WMX3ApiPython.constants_maxPveloIoEncSize
    maxEventInputDataSize = _WMX3ApiPython.constants_maxEventInputDataSize
    maxEventOutputDataSize = _WMX3ApiPython.constants_maxEventOutputDataSize
    maxEventConfigureOfModuleDataSize = _WMX3ApiPython.constants_maxEventConfigureOfModuleDataSize
    maxSplineDimensions = _WMX3ApiPython.constants_maxSplineDimensions
    maxSplineChannel = _WMX3ApiPython.constants_maxSplineChannel
    maxPvtAppendPoints = _WMX3ApiPython.constants_maxPvtAppendPoints
    maxPvtInterpolateAppendPoints = _WMX3ApiPython.constants_maxPvtInterpolateAppendPoints
    maxPvtInterpolateAxes = _WMX3ApiPython.constants_maxPvtInterpolateAxes
    maxPathInterpolateAppendPoints = _WMX3ApiPython.constants_maxPathInterpolateAppendPoints
    maxPathInterpolateOutputs = _WMX3ApiPython.constants_maxPathInterpolateOutputs
    maxPathInterpolateDimensions = _WMX3ApiPython.constants_maxPathInterpolateDimensions
    max3DPathInterpolateDimensions = _WMX3ApiPython.constants_max3DPathInterpolateDimensions
    maxPathIntplWithRotationAppendPoints = _WMX3ApiPython.constants_maxPathIntplWithRotationAppendPoints
    maxPathIntplWithRotationChannel = _WMX3ApiPython.constants_maxPathIntplWithRotationChannel
    maxPathIntplLookaheadDimensions = _WMX3ApiPython.constants_maxPathIntplLookaheadDimensions
    maxPathIntplLookaheadAppendPoints = _WMX3ApiPython.constants_maxPathIntplLookaheadAppendPoints
    maxPathIntplLookaheadChannel = _WMX3ApiPython.constants_maxPathIntplLookaheadChannel
    maxPathIntplLookaheadOutputPerSegment = _WMX3ApiPython.constants_maxPathIntplLookaheadOutputPerSegment
    maxPathIntplLookaheadSmoothingCycles = _WMX3ApiPython.constants_maxPathIntplLookaheadSmoothingCycles
    maxPathIntplLookaheadAuxiliaryAxes = _WMX3ApiPython.constants_maxPathIntplLookaheadAuxiliaryAxes
    maxEcamPoints = _WMX3ApiPython.constants_maxEcamPoints
    maxEcamChannel = _WMX3ApiPython.constants_maxEcamChannel
    maxUserMemoryBytes = _WMX3ApiPython.constants_maxUserMemoryBytes
    maxUserMemoryReadWriteBytes = _WMX3ApiPython.constants_maxUserMemoryReadWriteBytes
    maxUserMemoryLogAddressSize = _WMX3ApiPython.constants_maxUserMemoryLogAddressSize
    maxUserMemoryLogFormatSize = _WMX3ApiPython.constants_maxUserMemoryLogFormatSize
    maxLogOutputMDataByteSize = _WMX3ApiPython.constants_maxLogOutputMDataByteSize
    maxMasters = _WMX3ApiPython.constants_maxMasters
    maxSlaves = _WMX3ApiPython.constants_maxSlaves
    maxSlaveAxes = _WMX3ApiPython.constants_maxSlaveAxes
    maxEniFilePathLen = _WMX3ApiPython.constants_maxEniFilePathLen
    maxFoEFilePathLen = _WMX3ApiPython.constants_maxFoEFilePathLen
    maxFoEFileNameLen = _WMX3ApiPython.constants_maxFoEFileNameLen
    maxSdoInfoNameLen = _WMX3ApiPython.constants_maxSdoInfoNameLen
    maxSdoInfoODListSize = _WMX3ApiPython.constants_maxSdoInfoODListSize
    maxSdoInfoEDListSize = _WMX3ApiPython.constants_maxSdoInfoEDListSize
    maxLogPdoSize = _WMX3ApiPython.constants_maxLogPdoSize
    maxLogPdoDataSize = _WMX3ApiPython.constants_maxLogPdoDataSize
    maxMappedRxPdo = _WMX3ApiPython.constants_maxMappedRxPdo
    maxMappedTxPdo = _WMX3ApiPython.constants_maxMappedTxPdo

    def __init__(self):
        _WMX3ApiPython.constants_swiginit(self, _WMX3ApiPython.new_constants())
    __swig_destroy__ = _WMX3ApiPython.delete_constants

# Register constants in _WMX3ApiPython:
_WMX3ApiPython.constants_swigregister(constants)
class ErrorCode(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    PyNone = _WMX3ApiPython.ErrorCode_PyNone
    StartProcessFailed = _WMX3ApiPython.ErrorCode_StartProcessFailed
    StartProcessNull = _WMX3ApiPython.ErrorCode_StartProcessNull
    StartProcessMaxInstance = _WMX3ApiPython.ErrorCode_StartProcessMaxInstance
    StartProcessLockError = _WMX3ApiPython.ErrorCode_StartProcessLockError
    StartProcessWaitEventFailed = _WMX3ApiPython.ErrorCode_StartProcessWaitEventFailed
    StartProcessWaitTimeout = _WMX3ApiPython.ErrorCode_StartProcessWaitTimeout
    MemoryAllocFailed = _WMX3ApiPython.ErrorCode_MemoryAllocFailed
    IMLibIsNotRunning = _WMX3ApiPython.ErrorCode_IMLibIsNotRunning
    ControlChannelLockFailed = _WMX3ApiPython.ErrorCode_ControlChannelLockFailed
    ControlChannelEventFailed = _WMX3ApiPython.ErrorCode_ControlChannelEventFailed
    ControlChannelWaitEventFailed = _WMX3ApiPython.ErrorCode_ControlChannelWaitEventFailed
    ControlChannelSharedMemoryFailed = _WMX3ApiPython.ErrorCode_ControlChannelSharedMemoryFailed
    ControlChannelLockWaitTimeOut = _WMX3ApiPython.ErrorCode_ControlChannelLockWaitTimeOut
    APIChannelError = _WMX3ApiPython.ErrorCode_APIChannelError
    APIChannelTimeOut = _WMX3ApiPython.ErrorCode_APIChannelTimeOut
    StatusChannelError = _WMX3ApiPython.ErrorCode_StatusChannelError
    RtssFileNotFoundError = _WMX3ApiPython.ErrorCode_RtssFileNotFoundError
    RtssStartError = _WMX3ApiPython.ErrorCode_RtssStartError
    RequestChannelTimeOut = _WMX3ApiPython.ErrorCode_RequestChannelTimeOut
    FreeChannelTimeOut = _WMX3ApiPython.ErrorCode_FreeChannelTimeOut
    CloseDeviceTimeOut = _WMX3ApiPython.ErrorCode_CloseDeviceTimeOut
    RequestChannelFailed = _WMX3ApiPython.ErrorCode_RequestChannelFailed
    ReachMaxChannelNumber = _WMX3ApiPython.ErrorCode_ReachMaxChannelNumber
    FreeChannelFailed = _WMX3ApiPython.ErrorCode_FreeChannelFailed
    InvalidChannelId = _WMX3ApiPython.ErrorCode_InvalidChannelId
    CloseDeviceFailed = _WMX3ApiPython.ErrorCode_CloseDeviceFailed
    StatusChannelNull = _WMX3ApiPython.ErrorCode_StatusChannelNull
    StatusChannelIdError = _WMX3ApiPython.ErrorCode_StatusChannelIdError
    StatusSharedMemoryChannelIndexError = _WMX3ApiPython.ErrorCode_StatusSharedMemoryChannelIndexError
    StatusChannelGettingInitialData = _WMX3ApiPython.ErrorCode_StatusChannelGettingInitialData
    RequestQueueFailed = _WMX3ApiPython.ErrorCode_RequestQueueFailed
    InvalidQueueId = _WMX3ApiPython.ErrorCode_InvalidQueueId
    InvalidQueueSize = _WMX3ApiPython.ErrorCode_InvalidQueueSize
    RequestQueueTimeout = _WMX3ApiPython.ErrorCode_RequestQueueTimeout
    InvalidQueue = _WMX3ApiPython.ErrorCode_InvalidQueue
    FreeQueueTimeout = _WMX3ApiPython.ErrorCode_FreeQueueTimeout
    InvalidQueueControlCommand = _WMX3ApiPython.ErrorCode_InvalidQueueControlCommand
    ControlQueueTimeout = _WMX3ApiPython.ErrorCode_ControlQueueTimeout
    SetQueueOptionsTimeout = _WMX3ApiPython.ErrorCode_SetQueueOptionsTimeout
    FreeQueueFailed = _WMX3ApiPython.ErrorCode_FreeQueueFailed
    RequestQueueIDAlreadyUsed = _WMX3ApiPython.ErrorCode_RequestQueueIDAlreadyUsed
    CreateDeviceLockError = _WMX3ApiPython.ErrorCode_CreateDeviceLockError
    CloseDeviceLockError = _WMX3ApiPython.ErrorCode_CloseDeviceLockError
    SetDeviceNameTimeout = _WMX3ApiPython.ErrorCode_SetDeviceNameTimeout
    GetActiveDeviceTimeout = _WMX3ApiPython.ErrorCode_GetActiveDeviceTimeout
    DeviceIsNull = _WMX3ApiPython.ErrorCode_DeviceIsNull
    InvalidModuleId = _WMX3ApiPython.ErrorCode_InvalidModuleId
    InvalidDeterMode = _WMX3ApiPython.ErrorCode_InvalidDeterMode
    NoSupportedFunction = _WMX3ApiPython.ErrorCode_NoSupportedFunction
    CommandInvalidQueueId = _WMX3ApiPython.ErrorCode_CommandInvalidQueueId
    CommandQueueAddFailed = _WMX3ApiPython.ErrorCode_CommandQueueAddFailed
    CommandQueueIsFull = _WMX3ApiPython.ErrorCode_CommandQueueIsFull
    CommandQueueAddTimeOut = _WMX3ApiPython.ErrorCode_CommandQueueAddTimeOut
    IMVersionMismatch = _WMX3ApiPython.ErrorCode_IMVersionMismatch
    ModuleVersionMismatch = _WMX3ApiPython.ErrorCode_ModuleVersionMismatch
    CommandIdLockError = _WMX3ApiPython.ErrorCode_CommandIdLockError
    CommandIdGetError = _WMX3ApiPython.ErrorCode_CommandIdGetError
    CallbackMallocFailed = _WMX3ApiPython.ErrorCode_CallbackMallocFailed
    CallbackThreadNull = _WMX3ApiPython.ErrorCode_CallbackThreadNull
    CallbackThreadError = _WMX3ApiPython.ErrorCode_CallbackThreadError
    CallbackThreadTimeOut = _WMX3ApiPython.ErrorCode_CallbackThreadTimeOut
    IMLibNullParam = _WMX3ApiPython.ErrorCode_IMLibNullParam
    IMLibInvalidParam = _WMX3ApiPython.ErrorCode_IMLibInvalidParam
    ConflictingErrorCode = _WMX3ApiPython.ErrorCode_ConflictingErrorCode
    UtilDataChnlSizeTooSmall = _WMX3ApiPython.ErrorCode_UtilDataChnlSizeTooSmall
    UtilBuffAndDataSizeDiff = _WMX3ApiPython.ErrorCode_UtilBuffAndDataSizeDiff
    UtilNoEnoughDataChnlSize = _WMX3ApiPython.ErrorCode_UtilNoEnoughDataChnlSize
    UtilReachMaxDataChnlSize = _WMX3ApiPython.ErrorCode_UtilReachMaxDataChnlSize
    UtilIndexOutOfRange = _WMX3ApiPython.ErrorCode_UtilIndexOutOfRange
    UtilInitFailed = _WMX3ApiPython.ErrorCode_UtilInitFailed
    UtilLockFailed = _WMX3ApiPython.ErrorCode_UtilLockFailed
    UtilQueueFull = _WMX3ApiPython.ErrorCode_UtilQueueFull
    UtilQueueEmpty = _WMX3ApiPython.ErrorCode_UtilQueueEmpty
    UtilBufferSizeNotEnough = _WMX3ApiPython.ErrorCode_UtilBufferSizeNotEnough
    WaitForDeviceEventTimeOut = _WMX3ApiPython.ErrorCode_WaitForDeviceEventTimeOut
    DeviceEventProcessFailed = _WMX3ApiPython.ErrorCode_DeviceEventProcessFailed
    ImCommandNotMatched = _WMX3ApiPython.ErrorCode_ImCommandNotMatched
    ApiLogCreateQueueFailed = _WMX3ApiPython.ErrorCode_ApiLogCreateQueueFailed
    ApiLogIsNotSet = _WMX3ApiPython.ErrorCode_ApiLogIsNotSet
    ApiLogIsRunning = _WMX3ApiPython.ErrorCode_ApiLogIsRunning
    ApiLogIsNotRunning = _WMX3ApiPython.ErrorCode_ApiLogIsNotRunning
    ApiLogQueueError = _WMX3ApiPython.ErrorCode_ApiLogQueueError
    ApiLogOpenFileFailed = _WMX3ApiPython.ErrorCode_ApiLogOpenFileFailed
    ApiLogWriteFileFailed = _WMX3ApiPython.ErrorCode_ApiLogWriteFileFailed
    ApiLogReadFileFailed = _WMX3ApiPython.ErrorCode_ApiLogReadFileFailed
    ApiLogFolderNotExist = _WMX3ApiPython.ErrorCode_ApiLogFolderNotExist
    ApiLogGetStatusError = _WMX3ApiPython.ErrorCode_ApiLogGetStatusError
    SystemError = _WMX3ApiPython.ErrorCode_SystemError
    SystemIsNoRunning = _WMX3ApiPython.ErrorCode_SystemIsNoRunning
    SystemInitializationNotDone = _WMX3ApiPython.ErrorCode_SystemInitializationNotDone
    EngineNotStartedInSpecifiedTime = _WMX3ApiPython.ErrorCode_EngineNotStartedInSpecifiedTime
    EngineNotStoppedInSpecifiedTime = _WMX3ApiPython.ErrorCode_EngineNotStoppedInSpecifiedTime
    CommNotStartedInSpecifiedTime = _WMX3ApiPython.ErrorCode_CommNotStartedInSpecifiedTime
    CommNotStoppedInSpecifiedTime = _WMX3ApiPython.ErrorCode_CommNotStoppedInSpecifiedTime
    ModuleIsNotLoaded = _WMX3ApiPython.ErrorCode_ModuleIsNotLoaded
    StartCommunicationError = _WMX3ApiPython.ErrorCode_StartCommunicationError
    DeviceIsNotInUse = _WMX3ApiPython.ErrorCode_DeviceIsNotInUse
    SetDeviceEventFailed = _WMX3ApiPython.ErrorCode_SetDeviceEventFailed
    ResetDeviceEventFailed = _WMX3ApiPython.ErrorCode_ResetDeviceEventFailed
    WaitForDeviceEventFailed = _WMX3ApiPython.ErrorCode_WaitForDeviceEventFailed
    Reserved = _WMX3ApiPython.ErrorCode_Reserved
    CommNotStarted = _WMX3ApiPython.ErrorCode_CommNotStarted
    CommNotStopped = _WMX3ApiPython.ErrorCode_CommNotStopped
    VersionCheckError = _WMX3ApiPython.ErrorCode_VersionCheckError
    CallbackFuncError = _WMX3ApiPython.ErrorCode_CallbackFuncError
    CallbackFuncTimeOut = _WMX3ApiPython.ErrorCode_CallbackFuncTimeOut
    CallbackFuncInvalidState = _WMX3ApiPython.ErrorCode_CallbackFuncInvalidState
    CallbackFuncInvalidMode = _WMX3ApiPython.ErrorCode_CallbackFuncInvalidMode
    MissingRequiredRtdll = _WMX3ApiPython.ErrorCode_MissingRequiredRtdll
    BusyReceivingAnotherAPICommand = _WMX3ApiPython.ErrorCode_BusyReceivingAnotherAPICommand
    NotIdleState = _WMX3ApiPython.ErrorCode_NotIdleState
    AxisOutOfRange = _WMX3ApiPython.ErrorCode_AxisOutOfRange
    AxisCountOutOfRange = _WMX3ApiPython.ErrorCode_AxisCountOutOfRange
    DuplicateAxis = _WMX3ApiPython.ErrorCode_DuplicateAxis
    IOAddressOutOfRange = _WMX3ApiPython.ErrorCode_IOAddressOutOfRange
    IOSizeOutOfRange = _WMX3ApiPython.ErrorCode_IOSizeOutOfRange
    ChannelOutOfRange = _WMX3ApiPython.ErrorCode_ChannelOutOfRange
    ChannelUninitialized = _WMX3ApiPython.ErrorCode_ChannelUninitialized
    ChannelInUse = _WMX3ApiPython.ErrorCode_ChannelInUse
    ArgumentOutOfRange = _WMX3ApiPython.ErrorCode_ArgumentOutOfRange
    ArgumentIsNull = _WMX3ApiPython.ErrorCode_ArgumentIsNull
    PrevSettingsBeingApplied = _WMX3ApiPython.ErrorCode_PrevSettingsBeingApplied
    ParamOutOfRange = _WMX3ApiPython.ErrorCode_ParamOutOfRange
    IDOutOfRange = _WMX3ApiPython.ErrorCode_IDOutOfRange
    IDNotDefined = _WMX3ApiPython.ErrorCode_IDNotDefined
    ResourceInUse = _WMX3ApiPython.ErrorCode_ResourceInUse
    FileOperationFailed = _WMX3ApiPython.ErrorCode_FileOperationFailed
    StartingPreviousCommand = _WMX3ApiPython.ErrorCode_StartingPreviousCommand
    StringConversionError = _WMX3ApiPython.ErrorCode_StringConversionError
    NoMotion = _WMX3ApiPython.ErrorCode_NoMotion
    ServoOffline = _WMX3ApiPython.ErrorCode_ServoOffline
    ServoOff = _WMX3ApiPython.ErrorCode_ServoOff
    AxisAmpAlarm = _WMX3ApiPython.ErrorCode_AxisAmpAlarm
    AxisSoftLimit = _WMX3ApiPython.ErrorCode_AxisSoftLimit
    AxisNearLimit = _WMX3ApiPython.ErrorCode_AxisNearLimit
    AxisExternalLimit = _WMX3ApiPython.ErrorCode_AxisExternalLimit
    AxisHardLimit = _WMX3ApiPython.ErrorCode_AxisHardLimit
    UserMemoryAddressOutOfRange = _WMX3ApiPython.ErrorCode_UserMemoryAddressOutOfRange
    UserMemorySizeOutOfRange = _WMX3ApiPython.ErrorCode_UserMemorySizeOutOfRange
    InvalidCommandProcessingMode = _WMX3ApiPython.ErrorCode_InvalidCommandProcessingMode
    InterruptMismatch = _WMX3ApiPython.ErrorCode_InterruptMismatch
    ErrorCodeNotDefined = _WMX3ApiPython.ErrorCode_ErrorCodeNotDefined
    BufferTooSmall = _WMX3ApiPython.ErrorCode_BufferTooSmall
    RequestedBufferTooLarge = _WMX3ApiPython.ErrorCode_RequestedBufferTooLarge
    RequestedBufferTooSmall = _WMX3ApiPython.ErrorCode_RequestedBufferTooSmall
    ModuleIDOutOfRange = _WMX3ApiPython.ErrorCode_ModuleIDOutOfRange
    UpdatesListUninitialized = _WMX3ApiPython.ErrorCode_UpdatesListUninitialized
    UpdatesListDoesNotMatchInstalledUpdates = _WMX3ApiPython.ErrorCode_UpdatesListDoesNotMatchInstalledUpdates
    UpdatesListTimeout = _WMX3ApiPython.ErrorCode_UpdatesListTimeout
    UnknownError = _WMX3ApiPython.ErrorCode_UnknownError

    def __init__(self):
        _WMX3ApiPython.ErrorCode_swiginit(self, _WMX3ApiPython.new_ErrorCode())
    __swig_destroy__ = _WMX3ApiPython.delete_ErrorCode

# Register ErrorCode in _WMX3ApiPython:
_WMX3ApiPython.ErrorCode_swigregister(ErrorCode)
class DeviceType(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    DeviceTypeNormal = _WMX3ApiPython.DeviceType_DeviceTypeNormal
    DeviceTypeLowPriority = _WMX3ApiPython.DeviceType_DeviceTypeLowPriority
    DeviceTypeExitWOCnt = _WMX3ApiPython.DeviceType_DeviceTypeExitWOCnt
    DeviceTypeLowpriorityExitWOCnt = _WMX3ApiPython.DeviceType_DeviceTypeLowpriorityExitWOCnt

    def __init__(self):
        _WMX3ApiPython.DeviceType_swiginit(self, _WMX3ApiPython.new_DeviceType())
    __swig_destroy__ = _WMX3ApiPython.delete_DeviceType

# Register DeviceType in _WMX3ApiPython:
_WMX3ApiPython.DeviceType_swigregister(DeviceType)
class EngineState(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Idle = _WMX3ApiPython.EngineState_Idle
    Running = _WMX3ApiPython.EngineState_Running
    Communicating = _WMX3ApiPython.EngineState_Communicating
    Shutdown = _WMX3ApiPython.EngineState_Shutdown
    Unknown = _WMX3ApiPython.EngineState_Unknown

    def __init__(self):
        _WMX3ApiPython.EngineState_swiginit(self, _WMX3ApiPython.new_EngineState())
    __swig_destroy__ = _WMX3ApiPython.delete_EngineState

# Register EngineState in _WMX3ApiPython:
_WMX3ApiPython.EngineState_swigregister(EngineState)
class ModuleType(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Motion = _WMX3ApiPython.ModuleType_Motion
    Platform = _WMX3ApiPython.ModuleType_Platform
    Unknown = _WMX3ApiPython.ModuleType_Unknown

    def __init__(self):
        _WMX3ApiPython.ModuleType_swiginit(self, _WMX3ApiPython.new_ModuleType())
    __swig_destroy__ = _WMX3ApiPython.delete_ModuleType

# Register ModuleType in _WMX3ApiPython:
_WMX3ApiPython.ModuleType_swigregister(ModuleType)
class ModuleId(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    WMX3Engine = _WMX3ApiPython.ModuleId_WMX3Engine
    SimuPlatform = _WMX3ApiPython.ModuleId_SimuPlatform
    EcPlatform = _WMX3ApiPython.ModuleId_EcPlatform
    RtexPlatform = _WMX3ApiPython.ModuleId_RtexPlatform
    MIIIPlatform = _WMX3ApiPython.ModuleId_MIIIPlatform
    CCLinkPlatform = _WMX3ApiPython.ModuleId_CCLinkPlatform
    M4Platform = _WMX3ApiPython.ModuleId_M4Platform
    CoreMotion = _WMX3ApiPython.ModuleId_CoreMotion
    Log = _WMX3ApiPython.ModuleId_Log
    APIBuffer = _WMX3ApiPython.ModuleId_APIBuffer
    CyclicBuffer = _WMX3ApiPython.ModuleId_CyclicBuffer
    IO = _WMX3ApiPython.ModuleId_IO
    Compensation = _WMX3ApiPython.ModuleId_Compensation
    Event = _WMX3ApiPython.ModuleId_Event
    AdvancedMotion = _WMX3ApiPython.ModuleId_AdvancedMotion
    UserMemory = _WMX3ApiPython.ModuleId_UserMemory
    PMMotion = _WMX3ApiPython.ModuleId_PMMotion
    Coordinate = _WMX3ApiPython.ModuleId_Coordinate
    CNC = _WMX3ApiPython.ModuleId_CNC
    Kinematics = _WMX3ApiPython.ModuleId_Kinematics
    PLC = _WMX3ApiPython.ModuleId_PLC
    UserRtdll0 = _WMX3ApiPython.ModuleId_UserRtdll0
    UserRtdll1 = _WMX3ApiPython.ModuleId_UserRtdll1
    UserRtdll2 = _WMX3ApiPython.ModuleId_UserRtdll2
    ModuleSize = _WMX3ApiPython.ModuleId_ModuleSize

    def __init__(self):
        _WMX3ApiPython.ModuleId_swiginit(self, _WMX3ApiPython.new_ModuleId())
    __swig_destroy__ = _WMX3ApiPython.delete_ModuleId

# Register ModuleId in _WMX3ApiPython:
_WMX3ApiPython.ModuleId_swigregister(ModuleId)
class OperationState(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Idle = _WMX3ApiPython.OperationState_Idle
    Pos = _WMX3ApiPython.OperationState_Pos
    Jog = _WMX3ApiPython.OperationState_Jog
    Home = _WMX3ApiPython.OperationState_Home
    Sync = _WMX3ApiPython.OperationState_Sync
    GantryHome = _WMX3ApiPython.OperationState_GantryHome
    Stop = _WMX3ApiPython.OperationState_Stop
    Intpl = _WMX3ApiPython.OperationState_Intpl
    Velocity = _WMX3ApiPython.OperationState_Velocity
    ConstLinearVelocity = _WMX3ApiPython.OperationState_ConstLinearVelocity
    Trq = _WMX3ApiPython.OperationState_Trq
    DirectControl = _WMX3ApiPython.OperationState_DirectControl
    PVT = _WMX3ApiPython.OperationState_PVT
    ECAM = _WMX3ApiPython.OperationState_ECAM
    SyncCatchUp = _WMX3ApiPython.OperationState_SyncCatchUp
    DancerControl = _WMX3ApiPython.OperationState_DancerControl

    def __init__(self):
        _WMX3ApiPython.OperationState_swiginit(self, _WMX3ApiPython.new_OperationState())
    __swig_destroy__ = _WMX3ApiPython.delete_OperationState

# Register OperationState in _WMX3ApiPython:
_WMX3ApiPython.OperationState_swigregister(OperationState)
class DetailOperationState(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Idle = _WMX3ApiPython.DetailOperationState_Idle
    Pos = _WMX3ApiPython.DetailOperationState_Pos
    Pos_OverrideSetup = _WMX3ApiPython.DetailOperationState_Pos_OverrideSetup
    Pos_WaitingForTrigger = _WMX3ApiPython.DetailOperationState_Pos_WaitingForTrigger
    Jog = _WMX3ApiPython.DetailOperationState_Jog
    Jog_OverrideSetup = _WMX3ApiPython.DetailOperationState_Jog_OverrideSetup
    Home = _WMX3ApiPython.DetailOperationState_Home
    Sync = _WMX3ApiPython.DetailOperationState_Sync
    Sync_PhaseShift = _WMX3ApiPython.DetailOperationState_Sync_PhaseShift
    Sync_GearShift = _WMX3ApiPython.DetailOperationState_Sync_GearShift
    GantryHome = _WMX3ApiPython.DetailOperationState_GantryHome
    Stop = _WMX3ApiPython.DetailOperationState_Stop
    Stop_QStop = _WMX3ApiPython.DetailOperationState_Stop_QStop
    Stop_EStop = _WMX3ApiPython.DetailOperationState_Stop_EStop
    Intpl = _WMX3ApiPython.DetailOperationState_Intpl
    Intpl_Linear = _WMX3ApiPython.DetailOperationState_Intpl_Linear
    Intpl_Circular = _WMX3ApiPython.DetailOperationState_Intpl_Circular
    Intpl_Helical = _WMX3ApiPython.DetailOperationState_Intpl_Helical
    Intpl_Spline = _WMX3ApiPython.DetailOperationState_Intpl_Spline
    Intpl_Path = _WMX3ApiPython.DetailOperationState_Intpl_Path
    Intpl_PathWithRotation = _WMX3ApiPython.DetailOperationState_Intpl_PathWithRotation
    Intpl_PathLookahead = _WMX3ApiPython.DetailOperationState_Intpl_PathLookahead
    Intpl_OverrideSetup = _WMX3ApiPython.DetailOperationState_Intpl_OverrideSetup
    Intpl_OverrideSmoothing = _WMX3ApiPython.DetailOperationState_Intpl_OverrideSmoothing
    Velocity = _WMX3ApiPython.DetailOperationState_Velocity
    Velocity_OverrideSetup = _WMX3ApiPython.DetailOperationState_Velocity_OverrideSetup
    ConstLinearVelocity = _WMX3ApiPython.DetailOperationState_ConstLinearVelocity
    Trq = _WMX3ApiPython.DetailOperationState_Trq
    Trq_OverrideSetup = _WMX3ApiPython.DetailOperationState_Trq_OverrideSetup
    DirectControl = _WMX3ApiPython.DetailOperationState_DirectControl
    PVT = _WMX3ApiPython.DetailOperationState_PVT
    ECAM = _WMX3ApiPython.DetailOperationState_ECAM
    SyncCatchUp = _WMX3ApiPython.DetailOperationState_SyncCatchUp
    DancerControl = _WMX3ApiPython.DetailOperationState_DancerControl

    def __init__(self):
        _WMX3ApiPython.DetailOperationState_swiginit(self, _WMX3ApiPython.new_DetailOperationState())
    __swig_destroy__ = _WMX3ApiPython.delete_DetailOperationState

# Register DetailOperationState in _WMX3ApiPython:
_WMX3ApiPython.DetailOperationState_swigregister(DetailOperationState)
class AxisCommandMode(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Position = _WMX3ApiPython.AxisCommandMode_Position
    Velocity = _WMX3ApiPython.AxisCommandMode_Velocity
    Torque = _WMX3ApiPython.AxisCommandMode_Torque

    def __init__(self):
        _WMX3ApiPython.AxisCommandMode_swiginit(self, _WMX3ApiPython.new_AxisCommandMode())
    __swig_destroy__ = _WMX3ApiPython.delete_AxisCommandMode

# Register AxisCommandMode in _WMX3ApiPython:
_WMX3ApiPython.AxisCommandMode_swigregister(AxisCommandMode)
class AxisSelection(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def GetAxis(self, index):
        return _WMX3ApiPython.AxisSelection_GetAxis(self, index)

    def SetAxis(self, index, value):
        return _WMX3ApiPython.AxisSelection_SetAxis(self, index, value)

    def GetData(self, axisSelection):
        return _WMX3ApiPython.AxisSelection_GetData(self, axisSelection)

    def SetData(self, axisSelection):
        return _WMX3ApiPython.AxisSelection_SetData(self, axisSelection)
    axisCount = property(_WMX3ApiPython.AxisSelection_axisCount_get, _WMX3ApiPython.AxisSelection_axisCount_set)
    axis = property(_WMX3ApiPython.AxisSelection_axis_get, _WMX3ApiPython.AxisSelection_axis_set)

    def __init__(self):
        _WMX3ApiPython.AxisSelection_swiginit(self, _WMX3ApiPython.new_AxisSelection())
    __swig_destroy__ = _WMX3ApiPython.delete_AxisSelection

# Register AxisSelection in _WMX3ApiPython:
_WMX3ApiPython.AxisSelection_swigregister(AxisSelection)
class ProfileType(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Trapezoidal = _WMX3ApiPython.ProfileType_Trapezoidal
    SCurve = _WMX3ApiPython.ProfileType_SCurve
    JerkRatio = _WMX3ApiPython.ProfileType_JerkRatio
    Parabolic = _WMX3ApiPython.ProfileType_Parabolic
    Sin = _WMX3ApiPython.ProfileType_Sin
    AdvancedS = _WMX3ApiPython.ProfileType_AdvancedS
    TrapezoidalMAT = _WMX3ApiPython.ProfileType_TrapezoidalMAT
    JerkLimited = _WMX3ApiPython.ProfileType_JerkLimited
    JerkLimitedSCurve = _WMX3ApiPython.ProfileType_JerkLimitedSCurve
    JerkLimitedAdvancedS = _WMX3ApiPython.ProfileType_JerkLimitedAdvancedS
    TwoVelocityTrapezoidal = _WMX3ApiPython.ProfileType_TwoVelocityTrapezoidal
    TwoVelocitySCurve = _WMX3ApiPython.ProfileType_TwoVelocitySCurve
    TwoVelocityJerkRatio = _WMX3ApiPython.ProfileType_TwoVelocityJerkRatio
    TimeAccTrapezoidal = _WMX3ApiPython.ProfileType_TimeAccTrapezoidal
    TimeAccSCurve = _WMX3ApiPython.ProfileType_TimeAccSCurve
    TimeAccJerkRatio = _WMX3ApiPython.ProfileType_TimeAccJerkRatio
    TimeAccParabolic = _WMX3ApiPython.ProfileType_TimeAccParabolic
    TimeAccSin = _WMX3ApiPython.ProfileType_TimeAccSin
    TimeAccAdvancedS = _WMX3ApiPython.ProfileType_TimeAccAdvancedS
    ConstantDec = _WMX3ApiPython.ProfileType_ConstantDec
    JerkRatioFixedVelocityT = _WMX3ApiPython.ProfileType_JerkRatioFixedVelocityT
    JerkRatioFixedVelocityS = _WMX3ApiPython.ProfileType_JerkRatioFixedVelocityS
    JerkLimitedFixedVelocityT = _WMX3ApiPython.ProfileType_JerkLimitedFixedVelocityT
    JerkLimitedFixedVelocityS = _WMX3ApiPython.ProfileType_JerkLimitedFixedVelocityS
    ParabolicVelocity = _WMX3ApiPython.ProfileType_ParabolicVelocity

    def __init__(self):
        _WMX3ApiPython.ProfileType_swiginit(self, _WMX3ApiPython.new_ProfileType())
    __swig_destroy__ = _WMX3ApiPython.delete_ProfileType

# Register ProfileType in _WMX3ApiPython:
_WMX3ApiPython.ProfileType_swigregister(ProfileType)
class Profile(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def GetData(self, profile):
        return _WMX3ApiPython.Profile_GetData(self, profile)

    def SetData(self, profile):
        return _WMX3ApiPython.Profile_SetData(self, profile)
    type = property(_WMX3ApiPython.Profile_type_get, _WMX3ApiPython.Profile_type_set)
    velocity = property(_WMX3ApiPython.Profile_velocity_get, _WMX3ApiPython.Profile_velocity_set)
    acc = property(_WMX3ApiPython.Profile_acc_get, _WMX3ApiPython.Profile_acc_set)
    dec = property(_WMX3ApiPython.Profile_dec_get, _WMX3ApiPython.Profile_dec_set)
    jerkAcc = property(_WMX3ApiPython.Profile_jerkAcc_get, _WMX3ApiPython.Profile_jerkAcc_set)
    jerkDec = property(_WMX3ApiPython.Profile_jerkDec_get, _WMX3ApiPython.Profile_jerkDec_set)
    jerkAccRatio = property(_WMX3ApiPython.Profile_jerkAccRatio_get, _WMX3ApiPython.Profile_jerkAccRatio_set)
    jerkDecRatio = property(_WMX3ApiPython.Profile_jerkDecRatio_get, _WMX3ApiPython.Profile_jerkDecRatio_set)
    accTimeMilliseconds = property(_WMX3ApiPython.Profile_accTimeMilliseconds_get, _WMX3ApiPython.Profile_accTimeMilliseconds_set)
    decTimeMilliseconds = property(_WMX3ApiPython.Profile_decTimeMilliseconds_get, _WMX3ApiPython.Profile_decTimeMilliseconds_set)
    startingVelocity = property(_WMX3ApiPython.Profile_startingVelocity_get, _WMX3ApiPython.Profile_startingVelocity_set)
    endVelocity = property(_WMX3ApiPython.Profile_endVelocity_get, _WMX3ApiPython.Profile_endVelocity_set)
    secondVelocity = property(_WMX3ApiPython.Profile_secondVelocity_get, _WMX3ApiPython.Profile_secondVelocity_set)
    movingAverageTimeMilliseconds = property(_WMX3ApiPython.Profile_movingAverageTimeMilliseconds_get, _WMX3ApiPython.Profile_movingAverageTimeMilliseconds_set)

    @staticmethod
    def SetupTrapezoidal(*args):
        return _WMX3ApiPython.Profile_SetupTrapezoidal(*args)

    @staticmethod
    def SetupSCurve(*args):
        return _WMX3ApiPython.Profile_SetupSCurve(*args)

    @staticmethod
    def SetupJerkRatio(*args):
        return _WMX3ApiPython.Profile_SetupJerkRatio(*args)

    @staticmethod
    def SetupParabolic(*args):
        return _WMX3ApiPython.Profile_SetupParabolic(*args)

    @staticmethod
    def SetupSin(*args):
        return _WMX3ApiPython.Profile_SetupSin(*args)

    @staticmethod
    def SetupAdvancedS(*args):
        return _WMX3ApiPython.Profile_SetupAdvancedS(*args)

    @staticmethod
    def SetupTrapezoidalMAT(*args):
        return _WMX3ApiPython.Profile_SetupTrapezoidalMAT(*args)

    @staticmethod
    def SetupJerkLimited(*args):
        return _WMX3ApiPython.Profile_SetupJerkLimited(*args)

    @staticmethod
    def SetupJerkLimitedSCurve(*args):
        return _WMX3ApiPython.Profile_SetupJerkLimitedSCurve(*args)

    @staticmethod
    def SetupJerkLimitedAdvancedS(*args):
        return _WMX3ApiPython.Profile_SetupJerkLimitedAdvancedS(*args)

    @staticmethod
    def SetupTwoVelocityTrapezoidal(*args):
        return _WMX3ApiPython.Profile_SetupTwoVelocityTrapezoidal(*args)

    @staticmethod
    def SetupTwoVelocitySCurve(*args):
        return _WMX3ApiPython.Profile_SetupTwoVelocitySCurve(*args)

    @staticmethod
    def SetupTwoVelocityJerkRatio(*args):
        return _WMX3ApiPython.Profile_SetupTwoVelocityJerkRatio(*args)

    @staticmethod
    def SetupTimeAccTrapezoidal(*args):
        return _WMX3ApiPython.Profile_SetupTimeAccTrapezoidal(*args)

    @staticmethod
    def SetupTimeAccSCurve(*args):
        return _WMX3ApiPython.Profile_SetupTimeAccSCurve(*args)

    @staticmethod
    def SetupTimeAccJerkRatio(*args):
        return _WMX3ApiPython.Profile_SetupTimeAccJerkRatio(*args)

    @staticmethod
    def SetupTimeAccParabolic(*args):
        return _WMX3ApiPython.Profile_SetupTimeAccParabolic(*args)

    @staticmethod
    def SetupTimeAccSin(*args):
        return _WMX3ApiPython.Profile_SetupTimeAccSin(*args)

    @staticmethod
    def SetupTimeAccAdvancedS(*args):
        return _WMX3ApiPython.Profile_SetupTimeAccAdvancedS(*args)

    @staticmethod
    def SetupConstantDec(startingVelocity, endVelocity):
        return _WMX3ApiPython.Profile_SetupConstantDec(startingVelocity, endVelocity)

    @staticmethod
    def SetupJerkRatioFixedVelocityT(*args):
        return _WMX3ApiPython.Profile_SetupJerkRatioFixedVelocityT(*args)

    @staticmethod
    def SetupJerkRatioFixedVelocityS(*args):
        return _WMX3ApiPython.Profile_SetupJerkRatioFixedVelocityS(*args)

    @staticmethod
    def SetupJerkLimitedFixedVelocityT(*args):
        return _WMX3ApiPython.Profile_SetupJerkLimitedFixedVelocityT(*args)

    @staticmethod
    def SetupJerkLimitedFixedVelocityS(*args):
        return _WMX3ApiPython.Profile_SetupJerkLimitedFixedVelocityS(*args)

    @staticmethod
    def SetupParabolicVelocity(*args):
        return _WMX3ApiPython.Profile_SetupParabolicVelocity(*args)

    def __init__(self):
        _WMX3ApiPython.Profile_swiginit(self, _WMX3ApiPython.new_Profile())
    __swig_destroy__ = _WMX3ApiPython.delete_Profile

# Register Profile in _WMX3ApiPython:
_WMX3ApiPython.Profile_swigregister(Profile)
class EStopLevel(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Final = _WMX3ApiPython.EStopLevel_Final
    Level1 = _WMX3ApiPython.EStopLevel_Level1

    def __init__(self):
        _WMX3ApiPython.EStopLevel_swiginit(self, _WMX3ApiPython.new_EStopLevel())
    __swig_destroy__ = _WMX3ApiPython.delete_EStopLevel

# Register EStopLevel in _WMX3ApiPython:
_WMX3ApiPython.EStopLevel_swigregister(EStopLevel)
class FormatType(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Char = _WMX3ApiPython.FormatType_Char
    Uchar = _WMX3ApiPython.FormatType_Uchar
    Short = _WMX3ApiPython.FormatType_Short
    Ushort = _WMX3ApiPython.FormatType_Ushort
    Int = _WMX3ApiPython.FormatType_Int
    Uint = _WMX3ApiPython.FormatType_Uint
    Long = _WMX3ApiPython.FormatType_Long
    Ulong = _WMX3ApiPython.FormatType_Ulong
    Float = _WMX3ApiPython.FormatType_Float
    Double = _WMX3ApiPython.FormatType_Double

    def __init__(self):
        _WMX3ApiPython.FormatType_swiginit(self, _WMX3ApiPython.new_FormatType())
    __swig_destroy__ = _WMX3ApiPython.delete_FormatType

# Register FormatType in _WMX3ApiPython:
_WMX3ApiPython.FormatType_swigregister(FormatType)
class AIOFormat(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def SetData(self, aioFormat):
        return _WMX3ApiPython.AIOFormat_SetData(self, aioFormat)

    def GetData(self, aioFormat):
        return _WMX3ApiPython.AIOFormat_GetData(self, aioFormat)
    byte = property(_WMX3ApiPython.AIOFormat_byte_get, _WMX3ApiPython.AIOFormat_byte_set)
    bit = property(_WMX3ApiPython.AIOFormat_bit_get, _WMX3ApiPython.AIOFormat_bit_set)
    aioFormatType = property(_WMX3ApiPython.AIOFormat_aioFormatType_get, _WMX3ApiPython.AIOFormat_aioFormatType_set)

    def __init__(self):
        _WMX3ApiPython.AIOFormat_swiginit(self, _WMX3ApiPython.new_AIOFormat())
    __swig_destroy__ = _WMX3ApiPython.delete_AIOFormat

# Register AIOFormat in _WMX3ApiPython:
_WMX3ApiPython.AIOFormat_swigregister(AIOFormat)
class IOAddress(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def SetData(self, ioAddress):
        return _WMX3ApiPython.IOAddress_SetData(self, ioAddress)

    def GetData(self, ioAddress):
        return _WMX3ApiPython.IOAddress_GetData(self, ioAddress)
    byte = property(_WMX3ApiPython.IOAddress_byte_get, _WMX3ApiPython.IOAddress_byte_set)
    bit = property(_WMX3ApiPython.IOAddress_bit_get, _WMX3ApiPython.IOAddress_bit_set)
    size = property(_WMX3ApiPython.IOAddress_size_get, _WMX3ApiPython.IOAddress_size_set)

    def __init__(self):
        _WMX3ApiPython.IOAddress_swiginit(self, _WMX3ApiPython.new_IOAddress())
    __swig_destroy__ = _WMX3ApiPython.delete_IOAddress

# Register IOAddress in _WMX3ApiPython:
_WMX3ApiPython.IOAddress_swigregister(IOAddress)
class IOSourceType(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Input = _WMX3ApiPython.IOSourceType_Input
    Output = _WMX3ApiPython.IOSourceType_Output

    def __init__(self):
        _WMX3ApiPython.IOSourceType_swiginit(self, _WMX3ApiPython.new_IOSourceType())
    __swig_destroy__ = _WMX3ApiPython.delete_IOSourceType

# Register IOSourceType in _WMX3ApiPython:
_WMX3ApiPython.IOSourceType_swigregister(IOSourceType)
class MAddress(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def SetData(self, mAddress):
        return _WMX3ApiPython.MAddress_SetData(self, mAddress)

    def GetData(self, mAddress):
        return _WMX3ApiPython.MAddress_GetData(self, mAddress)
    byte = property(_WMX3ApiPython.MAddress_byte_get, _WMX3ApiPython.MAddress_byte_set)
    bit = property(_WMX3ApiPython.MAddress_bit_get, _WMX3ApiPython.MAddress_bit_set)
    size = property(_WMX3ApiPython.MAddress_size_get, _WMX3ApiPython.MAddress_size_set)

    def __init__(self):
        _WMX3ApiPython.MAddress_swiginit(self, _WMX3ApiPython.new_MAddress())
    __swig_destroy__ = _WMX3ApiPython.delete_MAddress

# Register MAddress in _WMX3ApiPython:
_WMX3ApiPython.MAddress_swigregister(MAddress)
class SizeUnit(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Byte = _WMX3ApiPython.SizeUnit_Byte
    Kilobyte = _WMX3ApiPython.SizeUnit_Kilobyte
    Megabyte = _WMX3ApiPython.SizeUnit_Megabyte

    def __init__(self):
        _WMX3ApiPython.SizeUnit_swiginit(self, _WMX3ApiPython.new_SizeUnit())
    __swig_destroy__ = _WMX3ApiPython.delete_SizeUnit

# Register SizeUnit in _WMX3ApiPython:
_WMX3ApiPython.SizeUnit_swigregister(SizeUnit)
class ModuleInfo(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def GetData(self, moduleInfo):
        return _WMX3ApiPython.ModuleInfo_GetData(self, moduleInfo)

    def SetData(self, moduleInfo):
        return _WMX3ApiPython.ModuleInfo_SetData(self, moduleInfo)
    suspend = property(_WMX3ApiPython.ModuleInfo_suspend_get, _WMX3ApiPython.ModuleInfo_suspend_set)
    type = property(_WMX3ApiPython.ModuleInfo_type_get, _WMX3ApiPython.ModuleInfo_type_set)
    id = property(_WMX3ApiPython.ModuleInfo_id_get, _WMX3ApiPython.ModuleInfo_id_set)
    slot = property(_WMX3ApiPython.ModuleInfo_slot_get, _WMX3ApiPython.ModuleInfo_slot_set)
    fileName = property(_WMX3ApiPython.ModuleInfo_fileName_get, _WMX3ApiPython.ModuleInfo_fileName_set)
    moduleName = property(_WMX3ApiPython.ModuleInfo_moduleName_get, _WMX3ApiPython.ModuleInfo_moduleName_set)
    moduleDesc = property(_WMX3ApiPython.ModuleInfo_moduleDesc_get, _WMX3ApiPython.ModuleInfo_moduleDesc_set)
    majorVersion = property(_WMX3ApiPython.ModuleInfo_majorVersion_get, _WMX3ApiPython.ModuleInfo_majorVersion_set)
    minorVersion = property(_WMX3ApiPython.ModuleInfo_minorVersion_get, _WMX3ApiPython.ModuleInfo_minorVersion_set)
    revisionVersion = property(_WMX3ApiPython.ModuleInfo_revisionVersion_get, _WMX3ApiPython.ModuleInfo_revisionVersion_set)
    fixVersion = property(_WMX3ApiPython.ModuleInfo_fixVersion_get, _WMX3ApiPython.ModuleInfo_fixVersion_set)
    memory = property(_WMX3ApiPython.ModuleInfo_memory_get, _WMX3ApiPython.ModuleInfo_memory_set)

    def __init__(self):
        _WMX3ApiPython.ModuleInfo_swiginit(self, _WMX3ApiPython.new_ModuleInfo())
    __swig_destroy__ = _WMX3ApiPython.delete_ModuleInfo

# Register ModuleInfo in _WMX3ApiPython:
_WMX3ApiPython.ModuleInfo_swigregister(ModuleInfo)
class EngineInfo(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def GetData(self, engineInfo):
        return _WMX3ApiPython.EngineInfo_GetData(self, engineInfo)

    def SetData(self, engineInfo):
        return _WMX3ApiPython.EngineInfo_SetData(self, engineInfo)
    majorVersion = property(_WMX3ApiPython.EngineInfo_majorVersion_get, _WMX3ApiPython.EngineInfo_majorVersion_set)
    minorVersion = property(_WMX3ApiPython.EngineInfo_minorVersion_get, _WMX3ApiPython.EngineInfo_minorVersion_set)
    revisionVersion = property(_WMX3ApiPython.EngineInfo_revisionVersion_get, _WMX3ApiPython.EngineInfo_revisionVersion_set)
    fixVersion = property(_WMX3ApiPython.EngineInfo_fixVersion_get, _WMX3ApiPython.EngineInfo_fixVersion_set)
    imlibVersion = property(_WMX3ApiPython.EngineInfo_imlibVersion_get, _WMX3ApiPython.EngineInfo_imlibVersion_set)
    imlibRevision = property(_WMX3ApiPython.EngineInfo_imlibRevision_get, _WMX3ApiPython.EngineInfo_imlibRevision_set)
    numLicensedAxes = property(_WMX3ApiPython.EngineInfo_numLicensedAxes_get, _WMX3ApiPython.EngineInfo_numLicensedAxes_set)
    options = property(_WMX3ApiPython.EngineInfo_options_get, _WMX3ApiPython.EngineInfo_options_set)

    def GetOptions(self, index):
        return _WMX3ApiPython.EngineInfo_GetOptions(self, index)

    def SetOptions(self, index, value):
        return _WMX3ApiPython.EngineInfo_SetOptions(self, index, value)

    def __init__(self):
        _WMX3ApiPython.EngineInfo_swiginit(self, _WMX3ApiPython.new_EngineInfo())
    __swig_destroy__ = _WMX3ApiPython.delete_EngineInfo

# Register EngineInfo in _WMX3ApiPython:
_WMX3ApiPython.EngineInfo_swigregister(EngineInfo)
class ModulesInfo(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def GetData(self, modulesInfo):
        return _WMX3ApiPython.ModulesInfo_GetData(self, modulesInfo)

    def SetData(self, modulesInfo):
        return _WMX3ApiPython.ModulesInfo_SetData(self, modulesInfo)
    engine = property(_WMX3ApiPython.ModulesInfo_engine_get, _WMX3ApiPython.ModulesInfo_engine_set)
    numOfModule = property(_WMX3ApiPython.ModulesInfo_numOfModule_get, _WMX3ApiPython.ModulesInfo_numOfModule_set)
    modules = property(_WMX3ApiPython.ModulesInfo_modules_get, _WMX3ApiPython.ModulesInfo_modules_set)

    def GetModules(self, index):
        return _WMX3ApiPython.ModulesInfo_GetModules(self, index)

    def SetModules(self, index, value):
        return _WMX3ApiPython.ModulesInfo_SetModules(self, index, value)

    def __init__(self):
        _WMX3ApiPython.ModulesInfo_swiginit(self, _WMX3ApiPython.new_ModulesInfo())
    __swig_destroy__ = _WMX3ApiPython.delete_ModulesInfo

# Register ModulesInfo in _WMX3ApiPython:
_WMX3ApiPython.ModulesInfo_swigregister(ModulesInfo)
class DeviceInfo(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def GetData(self, deviceInfo):
        return _WMX3ApiPython.DeviceInfo_GetData(self, deviceInfo)

    def SetData(self, deviceInfo):
        return _WMX3ApiPython.DeviceInfo_SetData(self, deviceInfo)
    id = property(_WMX3ApiPython.DeviceInfo_id_get, _WMX3ApiPython.DeviceInfo_id_set)
    type = property(_WMX3ApiPython.DeviceInfo_type_get, _WMX3ApiPython.DeviceInfo_type_set)
    watchdog = property(_WMX3ApiPython.DeviceInfo_watchdog_get, _WMX3ApiPython.DeviceInfo_watchdog_set)
    watchdogCount = property(_WMX3ApiPython.DeviceInfo_watchdogCount_get, _WMX3ApiPython.DeviceInfo_watchdogCount_set)
    name = property(_WMX3ApiPython.DeviceInfo_name_get, _WMX3ApiPython.DeviceInfo_name_set)

    def __init__(self):
        _WMX3ApiPython.DeviceInfo_swiginit(self, _WMX3ApiPython.new_DeviceInfo())
    __swig_destroy__ = _WMX3ApiPython.delete_DeviceInfo

# Register DeviceInfo in _WMX3ApiPython:
_WMX3ApiPython.DeviceInfo_swigregister(DeviceInfo)
class DevicesInfo(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def GetData(self, devicesInfo):
        return _WMX3ApiPython.DevicesInfo_GetData(self, devicesInfo)

    def SetData(self, devicesInfo):
        return _WMX3ApiPython.DevicesInfo_SetData(self, devicesInfo)
    devices = property(_WMX3ApiPython.DevicesInfo_devices_get, _WMX3ApiPython.DevicesInfo_devices_set)

    def GetDevices(self, index):
        return _WMX3ApiPython.DevicesInfo_GetDevices(self, index)

    def SetDevices(self, index, value):
        return _WMX3ApiPython.DevicesInfo_SetDevices(self, index, value)
    count = property(_WMX3ApiPython.DevicesInfo_count_get, _WMX3ApiPython.DevicesInfo_count_set)

    def __init__(self):
        _WMX3ApiPython.DevicesInfo_swiginit(self, _WMX3ApiPython.new_DevicesInfo())
    __swig_destroy__ = _WMX3ApiPython.delete_DevicesInfo

# Register DevicesInfo in _WMX3ApiPython:
_WMX3ApiPython.DevicesInfo_swigregister(DevicesInfo)
class InterruptData(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    numOfAxes = property(_WMX3ApiPython.InterruptData_numOfAxes_get, _WMX3ApiPython.InterruptData_numOfAxes_set)
    cycleTimeMicroseconds = property(_WMX3ApiPython.InterruptData_cycleTimeMicroseconds_get, _WMX3ApiPython.InterruptData_cycleTimeMicroseconds_set)
    cycleCounter = property(_WMX3ApiPython.InterruptData_cycleCounter_get, _WMX3ApiPython.InterruptData_cycleCounter_set)

    def __init__(self):
        _WMX3ApiPython.InterruptData_swiginit(self, _WMX3ApiPython.new_InterruptData())
    __swig_destroy__ = _WMX3ApiPython.delete_InterruptData

# Register InterruptData in _WMX3ApiPython:
_WMX3ApiPython.InterruptData_swigregister(InterruptData)
class EngineStatus(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def GetData(self, engineStatus):
        return _WMX3ApiPython.EngineStatus_GetData(self, engineStatus)

    def SetData(self, engineStatus):
        return _WMX3ApiPython.EngineStatus_SetData(self, engineStatus)
    state = property(_WMX3ApiPython.EngineStatus_state_get, _WMX3ApiPython.EngineStatus_state_set)
    error = property(_WMX3ApiPython.EngineStatus_error_get, _WMX3ApiPython.EngineStatus_error_set)
    numOfInterrupts = property(_WMX3ApiPython.EngineStatus_numOfInterrupts_get, _WMX3ApiPython.EngineStatus_numOfInterrupts_set)
    interrupts = property(_WMX3ApiPython.EngineStatus_interrupts_get, _WMX3ApiPython.EngineStatus_interrupts_set)

    def __init__(self):
        _WMX3ApiPython.EngineStatus_swiginit(self, _WMX3ApiPython.new_EngineStatus())
    __swig_destroy__ = _WMX3ApiPython.delete_EngineStatus

# Register EngineStatus in _WMX3ApiPython:
_WMX3ApiPython.EngineStatus_swigregister(EngineStatus)
class DeviceStatistics(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def GetData(self, deviceStatistics):
        return _WMX3ApiPython.DeviceStatistics_GetData(self, deviceStatistics)

    def SetData(self, deviceStatistics):
        return _WMX3ApiPython.DeviceStatistics_SetData(self, deviceStatistics)
    sysFailedCount = property(_WMX3ApiPython.DeviceStatistics_sysFailedCount_get, _WMX3ApiPython.DeviceStatistics_sysFailedCount_set)
    apiSuccessCount = property(_WMX3ApiPython.DeviceStatistics_apiSuccessCount_get, _WMX3ApiPython.DeviceStatistics_apiSuccessCount_set)
    apiFailedCount = property(_WMX3ApiPython.DeviceStatistics_apiFailedCount_get, _WMX3ApiPython.DeviceStatistics_apiFailedCount_set)
    curApiTime = property(_WMX3ApiPython.DeviceStatistics_curApiTime_get, _WMX3ApiPython.DeviceStatistics_curApiTime_set)
    avgApiTime = property(_WMX3ApiPython.DeviceStatistics_avgApiTime_get, _WMX3ApiPython.DeviceStatistics_avgApiTime_set)
    minApiTime = property(_WMX3ApiPython.DeviceStatistics_minApiTime_get, _WMX3ApiPython.DeviceStatistics_minApiTime_set)
    maxApiTime = property(_WMX3ApiPython.DeviceStatistics_maxApiTime_get, _WMX3ApiPython.DeviceStatistics_maxApiTime_set)
    sumApiTime = property(_WMX3ApiPython.DeviceStatistics_sumApiTime_get, _WMX3ApiPython.DeviceStatistics_sumApiTime_set)
    rtCount = property(_WMX3ApiPython.DeviceStatistics_rtCount_get, _WMX3ApiPython.DeviceStatistics_rtCount_set)
    curRtTime = property(_WMX3ApiPython.DeviceStatistics_curRtTime_get, _WMX3ApiPython.DeviceStatistics_curRtTime_set)
    avgRtTime = property(_WMX3ApiPython.DeviceStatistics_avgRtTime_get, _WMX3ApiPython.DeviceStatistics_avgRtTime_set)
    minRtTime = property(_WMX3ApiPython.DeviceStatistics_minRtTime_get, _WMX3ApiPython.DeviceStatistics_minRtTime_set)
    maxRtTime = property(_WMX3ApiPython.DeviceStatistics_maxRtTime_get, _WMX3ApiPython.DeviceStatistics_maxRtTime_set)
    sumRtTime = property(_WMX3ApiPython.DeviceStatistics_sumRtTime_get, _WMX3ApiPython.DeviceStatistics_sumRtTime_set)
    curFuncProcTime = property(_WMX3ApiPython.DeviceStatistics_curFuncProcTime_get, _WMX3ApiPython.DeviceStatistics_curFuncProcTime_set)
    avgFuncProcTime = property(_WMX3ApiPython.DeviceStatistics_avgFuncProcTime_get, _WMX3ApiPython.DeviceStatistics_avgFuncProcTime_set)
    minFuncProcTime = property(_WMX3ApiPython.DeviceStatistics_minFuncProcTime_get, _WMX3ApiPython.DeviceStatistics_minFuncProcTime_set)
    maxFuncProcTime = property(_WMX3ApiPython.DeviceStatistics_maxFuncProcTime_get, _WMX3ApiPython.DeviceStatistics_maxFuncProcTime_set)
    sumFuncProcTime = property(_WMX3ApiPython.DeviceStatistics_sumFuncProcTime_get, _WMX3ApiPython.DeviceStatistics_sumFuncProcTime_set)

    def __init__(self):
        _WMX3ApiPython.DeviceStatistics_swiginit(self, _WMX3ApiPython.new_DeviceStatistics())
    __swig_destroy__ = _WMX3ApiPython.delete_DeviceStatistics

# Register DeviceStatistics in _WMX3ApiPython:
_WMX3ApiPython.DeviceStatistics_swigregister(DeviceStatistics)
class ModuleSuspend(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def GetData(self, moduleSuspend):
        return _WMX3ApiPython.ModuleSuspend_GetData(self, moduleSuspend)

    def SetData(self, moduleSuspend):
        return _WMX3ApiPython.ModuleSuspend_SetData(self, moduleSuspend)
    module = property(_WMX3ApiPython.ModuleSuspend_module_get, _WMX3ApiPython.ModuleSuspend_module_set)

    def GetModule(self, index):
        return _WMX3ApiPython.ModuleSuspend_GetModule(self, index)

    def SetModule(self, index, value):
        return _WMX3ApiPython.ModuleSuspend_SetModule(self, index, value)

    def __init__(self):
        _WMX3ApiPython.ModuleSuspend_swiginit(self, _WMX3ApiPython.new_ModuleSuspend())
    __swig_destroy__ = _WMX3ApiPython.delete_ModuleSuspend

# Register ModuleSuspend in _WMX3ApiPython:
_WMX3ApiPython.ModuleSuspend_swigregister(ModuleSuspend)
class EventInput(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def GetInputModuleId(self):
        return _WMX3ApiPython.EventInput_GetInputModuleId(self)

    def GetInputData(self, buff, buffSize, dataSize, initialState):
        return _WMX3ApiPython.EventInput_GetInputData(self, buff, buffSize, dataSize, initialState)

    def SetInputData(self, moduleId, data, dataSize):
        return _WMX3ApiPython.EventInput_SetInputData(self, moduleId, data, dataSize)
    __swig_destroy__ = _WMX3ApiPython.delete_EventInput

# Register EventInput in _WMX3ApiPython:
_WMX3ApiPython.EventInput_swigregister(EventInput)
class EventOutput(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def GetOutputModuleId(self):
        return _WMX3ApiPython.EventOutput_GetOutputModuleId(self)

    def GetOutputData(self, buff, buffSize, dataSize):
        return _WMX3ApiPython.EventOutput_GetOutputData(self, buff, buffSize, dataSize)

    def SetOutputData(self, moduleId, data, dataSize):
        return _WMX3ApiPython.EventOutput_SetOutputData(self, moduleId, data, dataSize)
    __swig_destroy__ = _WMX3ApiPython.delete_EventOutput

# Register EventOutput in _WMX3ApiPython:
_WMX3ApiPython.EventOutput_swigregister(EventOutput)
class LogInput(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def GetModuleId(self):
        return _WMX3ApiPython.LogInput_GetModuleId(self)

    def GetInputData(self, buff, buffSize, dataSize):
        return _WMX3ApiPython.LogInput_GetInputData(self, buff, buffSize, dataSize)

    def SetInputData(self, moduleId, data, dataSize):
        return _WMX3ApiPython.LogInput_SetInputData(self, moduleId, data, dataSize)

    def GetLogInput(self):
        return _WMX3ApiPython.LogInput_GetLogInput(self)
    __swig_destroy__ = _WMX3ApiPython.delete_LogInput

# Register LogInput in _WMX3ApiPython:
_WMX3ApiPython.LogInput_swigregister(LogInput)
class LogOutput(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    count = property(_WMX3ApiPython.LogOutput_count_get, _WMX3ApiPython.LogOutput_count_set)
    overflowFlag = property(_WMX3ApiPython.LogOutput_overflowFlag_get, _WMX3ApiPython.LogOutput_overflowFlag_set)
    cycleCounter = property(_WMX3ApiPython.LogOutput_cycleCounter_get, _WMX3ApiPython.LogOutput_cycleCounter_set)

    def SetCycleCounter(self, index, value):
        return _WMX3ApiPython.LogOutput_SetCycleCounter(self, index, value)

    def GetCycleCounter(self, index):
        return _WMX3ApiPython.LogOutput_GetCycleCounter(self, index)

    def GetModuleId(self):
        return _WMX3ApiPython.LogOutput_GetModuleId(self)

    def GetLogOutput(self):
        return _WMX3ApiPython.LogOutput_GetLogOutput(self)

    def SetLogOutput(self, src):
        return _WMX3ApiPython.LogOutput_SetLogOutput(self, src)
    __swig_destroy__ = _WMX3ApiPython.delete_LogOutput

# Register LogOutput in _WMX3ApiPython:
_WMX3ApiPython.LogOutput_swigregister(LogOutput)
class WMX3Api(object):
    r"""WMX3Engine.rtdll Ver.3.5.0.0 is required to use."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""WMX3Engine.rtdll Ver.3.5.0.0 is required to use."""
        _WMX3ApiPython.WMX3Api_swiginit(self, _WMX3ApiPython.new_WMX3Api())
    __swig_destroy__ = _WMX3ApiPython.delete_WMX3Api

    def GetWMX3ApiHand(self):
        return _WMX3ApiPython.WMX3Api_GetWMX3ApiHand(self)

    @staticmethod
    def ErrorToString(errCode):
        return _WMX3ApiPython.WMX3Api_ErrorToString(errCode)

    @staticmethod
    def ApiLogToString(pLogData, logDataSize):
        return _WMX3ApiPython.WMX3Api_ApiLogToString(pLogData, logDataSize)

    @staticmethod
    def GetLibVersion():
        return _WMX3ApiPython.WMX3Api_GetLibVersion()

    @staticmethod
    def GetIMDllVersion():
        return _WMX3ApiPython.WMX3Api_GetIMDllVersion()

    @staticmethod
    def PrintToFile(*args):
        return _WMX3ApiPython.WMX3Api_PrintToFile(*args)

    @staticmethod
    def PrintToFileIfExist(*args):
        return _WMX3ApiPython.WMX3Api_PrintToFileIfExist(*args)

    @staticmethod
    def GetStdOutStr():
        return _WMX3ApiPython.WMX3Api_GetStdOutStr()

    @staticmethod
    def GetStdOutDataSize():
        return _WMX3ApiPython.WMX3Api_GetStdOutDataSize()

    @staticmethod
    def ClearStdOut():
        return _WMX3ApiPython.WMX3Api_ClearStdOut()

    @staticmethod
    def ReleaseStdOut():
        return _WMX3ApiPython.WMX3Api_ReleaseStdOut()

    def IsDeviceValid(self):
        return _WMX3ApiPython.WMX3Api_IsDeviceValid(self)

    def StartEngine(self, *args):
        return _WMX3ApiPython.WMX3Api_StartEngine(self, *args)

    def RestartEngine(self, *args):
        return _WMX3ApiPython.WMX3Api_RestartEngine(self, *args)

    def StopEngine(self, *args):
        return _WMX3ApiPython.WMX3Api_StopEngine(self, *args)

    def CreateDevice(self, *args):
        return _WMX3ApiPython.WMX3Api_CreateDevice(self, *args)

    def CloseDevice(self):
        return _WMX3ApiPython.WMX3Api_CloseDevice(self)

    def GetDeviceID(self):
        dataPtr = intp()
        ret = _WMX3ApiPython.WMX3Api_GetDeviceID(self, dataPtr)
        if ret == 0:
            return ret, dataPtr.value()
        else:
            return ret, 0



    def AutoQuitWithoutActiveDev(self, quit):
        return _WMX3ApiPython.WMX3Api_AutoQuitWithoutActiveDev(self, quit)

    def SetWatchdog(self, *args):
        return _WMX3ApiPython.WMX3Api_SetWatchdog(self, *args)

    def GetWatchdog(self):
        wdPtr = uintp()
        wdPtrCount = uintp()
        ret = _WMX3ApiPython.WMX3Api_GetWatchdog(self, wdPtr, wdPtrCount)
        if ret == 0:
            return ret, wdPtr.value(), wdPtrCount.value()
        else:
            return ret, 0, 0



    def ResetWatchdogTimer(self):
        return _WMX3ApiPython.WMX3Api_ResetWatchdogTimer(self)

    def SetStatistic(self, enable):
        return _WMX3ApiPython.WMX3Api_SetStatistic(self, enable)

    def GetStatistic(self):
        dataPtr = DeviceStatistics()
        ret = _WMX3ApiPython.WMX3Api_GetStatistic(self, dataPtr)
        return ret, dataPtr



    def SetInterruptId(self, interruptId):
        return _WMX3ApiPython.WMX3Api_SetInterruptId(self, interruptId)

    def GetInterruptId(self):
        interruptPtr = uintp()
        ret = _WMX3ApiPython.WMX3Api_GetInterruptId(self, interruptPtr)
        if ret == 0:
            return ret, interruptPtr.value()
        else:
            return ret, 0



    def StartCommunication(self, *args):
        return _WMX3ApiPython.WMX3Api_StartCommunication(self, *args)

    def StopCommunication(self, *args):
        return _WMX3ApiPython.WMX3Api_StopCommunication(self, *args)

    def GetModulesInfo(self):
        dataPtr = ModulesInfo()
        ret = _WMX3ApiPython.WMX3Api_GetModulesInfo(self, dataPtr)
        return ret, dataPtr



    def GetModuleInfo(self, moduleId):
        dataPtr = ModuleInfo()
        ret = _WMX3ApiPython.WMX3Api_GetModuleInfo(self, moduleId, dataPtr)
        return ret, dataPtr



    def GetEngineStatus(self):
        dataPtr = EngineStatus()
        ret = _WMX3ApiPython.WMX3Api_GetEngineStatus(self, dataPtr)
        return ret, dataPtr



    def GetAllDevices(self):
        dataPtr = DevicesInfo()
        ret = _WMX3ApiPython.WMX3Api_GetAllDevices(self, dataPtr)
        return ret, dataPtr



    def SetDeviceName(self, name):
        return _WMX3ApiPython.WMX3Api_SetDeviceName(self, name)

    def GetDeviceName(self):
        retPtr = intp()
        name = _WMX3ApiPython.WMX3Api_GetDeviceName(self, retPtr)
        return retPtr.value(), name



    def SetDeviceWaitEvent(self, errCode):
        return _WMX3ApiPython.WMX3Api_SetDeviceWaitEvent(self, errCode)

    def ResetDeviceWaitEvent(self):
        return _WMX3ApiPython.WMX3Api_ResetDeviceWaitEvent(self)

    def WaitForDeviceWaitEvent(self, waitTime):
        errCodePtr = intp()
        ret = _WMX3ApiPython.WMX3Api_WaitForDeviceWaitEvent(self, waitTime, errCodePtr)
        return ret, waitTime, errCodePtr



    def SetModuleSuspend(self, suspend):
        return _WMX3ApiPython.WMX3Api_SetModuleSuspend(self, suspend)

    def GetModuleSuspend(self):
        dataPtr = ModuleSuspend()
        ret = _WMX3ApiPython.WMX3Api_GetModuleSuspend(self, dataPtr)
        return ret, dataPtr



    def AbortModuleSuspend(self):
        return _WMX3ApiPython.WMX3Api_AbortModuleSuspend(self)

    def SleepAtEngine(self, microSecond):
        return _WMX3ApiPython.WMX3Api_SleepAtEngine(self, microSecond)

    def PrintToServerConsole(self, format):
        return _WMX3ApiPython.WMX3Api_PrintToServerConsole(self, format)

    def RecordWindowsUpdates(self, *args):
        return _WMX3ApiPython.WMX3Api_RecordWindowsUpdates(self, *args)

    def CompareWindowsUpdates(self, *args):
        return _WMX3ApiPython.WMX3Api_CompareWindowsUpdates(self, *args)

# Register WMX3Api in _WMX3ApiPython:
_WMX3ApiPython.WMX3Api_swigregister(WMX3Api)
class CoreMotionErrorCode(ErrorCode):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    ParameterSettingsInvalid = _WMX3ApiPython.CoreMotionErrorCode_ParameterSettingsInvalid
    ServoOnError = _WMX3ApiPython.CoreMotionErrorCode_ServoOnError
    SyncAxisSingleTurnMismatch = _WMX3ApiPython.CoreMotionErrorCode_SyncAxisSingleTurnMismatch
    PositionNotPassed = _WMX3ApiPython.CoreMotionErrorCode_PositionNotPassed
    NotPausedDuringHoming = _WMX3ApiPython.CoreMotionErrorCode_NotPausedDuringHoming
    OpenWaitEventError = _WMX3ApiPython.CoreMotionErrorCode_OpenWaitEventError
    ParameterFileParseError = _WMX3ApiPython.CoreMotionErrorCode_ParameterFileParseError
    SyncGroupIDOutOfRange = _WMX3ApiPython.CoreMotionErrorCode_SyncGroupIDOutOfRange
    SyncGroupMasterAxisUndefined = _WMX3ApiPython.CoreMotionErrorCode_SyncGroupMasterAxisUndefined
    ReferenceAxisOfActiveCompensation = _WMX3ApiPython.CoreMotionErrorCode_ReferenceAxisOfActiveCompensation
    CurrentEmergencyStopLevelIsHigher = _WMX3ApiPython.CoreMotionErrorCode_CurrentEmergencyStopLevelIsHigher
    AcyclicStatusError = _WMX3ApiPython.CoreMotionErrorCode_AcyclicStatusError
    AxisExecutingPhaseShift = _WMX3ApiPython.CoreMotionErrorCode_AxisExecutingPhaseShift
    AxisSettingSyncGearRatio = _WMX3ApiPython.CoreMotionErrorCode_AxisSettingSyncGearRatio
    NotSynchronizedToSpecifiedMasterAxis = _WMX3ApiPython.CoreMotionErrorCode_NotSynchronizedToSpecifiedMasterAxis
    OpenWaitSharedMemoryError = _WMX3ApiPython.CoreMotionErrorCode_OpenWaitSharedMemoryError
    WaitEngineError = _WMX3ApiPython.CoreMotionErrorCode_WaitEngineError
    IsSyncSlave = _WMX3ApiPython.CoreMotionErrorCode_IsSyncSlave
    IsSyncMaster = _WMX3ApiPython.CoreMotionErrorCode_IsSyncMaster
    IsCombineSyncMaster = _WMX3ApiPython.CoreMotionErrorCode_IsCombineSyncMaster
    NotServoOn = _WMX3ApiPython.CoreMotionErrorCode_NotServoOn
    NotIdleOrPosState = _WMX3ApiPython.CoreMotionErrorCode_NotIdleOrPosState
    NotPosState = _WMX3ApiPython.CoreMotionErrorCode_NotPosState
    NotIdleOrJogState = _WMX3ApiPython.CoreMotionErrorCode_NotIdleOrJogState
    NotIdleOrVelocityState = _WMX3ApiPython.CoreMotionErrorCode_NotIdleOrVelocityState
    NotIdleOrIntplState = _WMX3ApiPython.CoreMotionErrorCode_NotIdleOrIntplState
    NotIdleOrPosOrJogState = _WMX3ApiPython.CoreMotionErrorCode_NotIdleOrPosOrJogState
    NotPosOrJogOrVelocityState = _WMX3ApiPython.CoreMotionErrorCode_NotPosOrJogOrVelocityState
    NotJogState = _WMX3ApiPython.CoreMotionErrorCode_NotJogState
    NotTorqueState = _WMX3ApiPython.CoreMotionErrorCode_NotTorqueState
    NotIdleOrTorqueState = _WMX3ApiPython.CoreMotionErrorCode_NotIdleOrTorqueState
    NotIdleOrSyncState = _WMX3ApiPython.CoreMotionErrorCode_NotIdleOrSyncState
    NotECAMState = _WMX3ApiPython.CoreMotionErrorCode_NotECAMState
    NotDancerControlState = _WMX3ApiPython.CoreMotionErrorCode_NotDancerControlState
    NotIdleOrDancerControlState = _WMX3ApiPython.CoreMotionErrorCode_NotIdleOrDancerControlState
    NotPosMode = _WMX3ApiPython.CoreMotionErrorCode_NotPosMode
    NotVelocityMode = _WMX3ApiPython.CoreMotionErrorCode_NotVelocityMode
    NotTrqMode = _WMX3ApiPython.CoreMotionErrorCode_NotTrqMode
    NotPosOrVelocityMode = _WMX3ApiPython.CoreMotionErrorCode_NotPosOrVelocityMode
    NotSyncSlave = _WMX3ApiPython.CoreMotionErrorCode_NotSyncSlave
    NotHomeState = _WMX3ApiPython.CoreMotionErrorCode_NotHomeState
    AxisNotPaused = _WMX3ApiPython.CoreMotionErrorCode_AxisNotPaused
    AxisArgumentOutOfRange = _WMX3ApiPython.CoreMotionErrorCode_AxisArgumentOutOfRange
    ProfileArgumentOutOfRange = _WMX3ApiPython.CoreMotionErrorCode_ProfileArgumentOutOfRange
    PositionArgumentOutOfRange = _WMX3ApiPython.CoreMotionErrorCode_PositionArgumentOutOfRange
    VelocityArgumentOutOfRange = _WMX3ApiPython.CoreMotionErrorCode_VelocityArgumentOutOfRange
    AccArgumentOutOfRange = _WMX3ApiPython.CoreMotionErrorCode_AccArgumentOutOfRange
    DecArgumentOutOfRange = _WMX3ApiPython.CoreMotionErrorCode_DecArgumentOutOfRange
    JerkAccArgumentOutOfRange = _WMX3ApiPython.CoreMotionErrorCode_JerkAccArgumentOutOfRange
    JerkDecArgumentOutOfRange = _WMX3ApiPython.CoreMotionErrorCode_JerkDecArgumentOutOfRange
    JerkAccRatioArgumentOutOfRange = _WMX3ApiPython.CoreMotionErrorCode_JerkAccRatioArgumentOutOfRange
    JerkDecRatioArgumentOutOfRange = _WMX3ApiPython.CoreMotionErrorCode_JerkDecRatioArgumentOutOfRange
    StartingVelocityArgumentOutOfRange = _WMX3ApiPython.CoreMotionErrorCode_StartingVelocityArgumentOutOfRange
    EndVelocityArgumentOutOfRange = _WMX3ApiPython.CoreMotionErrorCode_EndVelocityArgumentOutOfRange
    SecondVelocityArgumentOutOfRange = _WMX3ApiPython.CoreMotionErrorCode_SecondVelocityArgumentOutOfRange
    RunTimeArgumentOutOfRange = _WMX3ApiPython.CoreMotionErrorCode_RunTimeArgumentOutOfRange
    TimeArgumentOutOfRange = _WMX3ApiPython.CoreMotionErrorCode_TimeArgumentOutOfRange
    TriggerTypeArgumentOutOfRange = _WMX3ApiPython.CoreMotionErrorCode_TriggerTypeArgumentOutOfRange
    TriggerAxisArgumentOutOfRange = _WMX3ApiPython.CoreMotionErrorCode_TriggerAxisArgumentOutOfRange
    TriggerValueArgumentOutOfRange = _WMX3ApiPython.CoreMotionErrorCode_TriggerValueArgumentOutOfRange
    TriggerTypeNotSupported = _WMX3ApiPython.CoreMotionErrorCode_TriggerTypeNotSupported
    AccDecCouldNotBeCalculated = _WMX3ApiPython.CoreMotionErrorCode_AccDecCouldNotBeCalculated
    NoFreeVirtualAxis = _WMX3ApiPython.CoreMotionErrorCode_NoFreeVirtualAxis
    NoFreeVirtualAxisAddlData = _WMX3ApiPython.CoreMotionErrorCode_NoFreeVirtualAxisAddlData
    AxisNotSingleTurn = _WMX3ApiPython.CoreMotionErrorCode_AxisNotSingleTurn
    AxisIsSingleTurn = _WMX3ApiPython.CoreMotionErrorCode_AxisIsSingleTurn
    ProfileErrorOnTargetPos = _WMX3ApiPython.CoreMotionErrorCode_ProfileErrorOnTargetPos
    ProfileUsageError = _WMX3ApiPython.CoreMotionErrorCode_ProfileUsageError
    ProfileAccelerationIsInvalid = _WMX3ApiPython.CoreMotionErrorCode_ProfileAccelerationIsInvalid
    ProfileDecelerationIsInvalid = _WMX3ApiPython.CoreMotionErrorCode_ProfileDecelerationIsInvalid
    ProfileJerkIsInvalid = _WMX3ApiPython.CoreMotionErrorCode_ProfileJerkIsInvalid
    ProfileVelocityIsInvalid = _WMX3ApiPython.CoreMotionErrorCode_ProfileVelocityIsInvalid
    ProfileNullCalculation = _WMX3ApiPython.CoreMotionErrorCode_ProfileNullCalculation
    ProfileNoMotion = _WMX3ApiPython.CoreMotionErrorCode_ProfileNoMotion
    ProfileUserRangeIsInvalid = _WMX3ApiPython.CoreMotionErrorCode_ProfileUserRangeIsInvalid
    OtherProfileError = _WMX3ApiPython.CoreMotionErrorCode_OtherProfileError
    ProfileUnknownError = _WMX3ApiPython.CoreMotionErrorCode_ProfileUnknownError
    ProfileSetupFailed = _WMX3ApiPython.CoreMotionErrorCode_ProfileSetupFailed
    ProfileCancelOvertravel = _WMX3ApiPython.CoreMotionErrorCode_ProfileCancelOvertravel
    PointCountOutOfRange = _WMX3ApiPython.CoreMotionErrorCode_PointCountOutOfRange
    WaitTimeout = _WMX3ApiPython.CoreMotionErrorCode_WaitTimeout
    ProfileTypeNotSupported = _WMX3ApiPython.CoreMotionErrorCode_ProfileTypeNotSupported
    AxisMismatch = _WMX3ApiPython.CoreMotionErrorCode_AxisMismatch
    NoRotationalMotion = _WMX3ApiPython.CoreMotionErrorCode_NoRotationalMotion
    DeviceIDError = _WMX3ApiPython.CoreMotionErrorCode_DeviceIDError
    InvalidAxis = _WMX3ApiPython.CoreMotionErrorCode_InvalidAxis
    ChannelExecutingCommands = _WMX3ApiPython.CoreMotionErrorCode_ChannelExecutingCommands
    ChannelIsNotExecutingCommands = _WMX3ApiPython.CoreMotionErrorCode_ChannelIsNotExecutingCommands
    ChannelNotEnoughSpace = _WMX3ApiPython.CoreMotionErrorCode_ChannelNotEnoughSpace
    ChannelIsStopping = _WMX3ApiPython.CoreMotionErrorCode_ChannelIsStopping
    ChannelIsNotStopped = _WMX3ApiPython.CoreMotionErrorCode_ChannelIsNotStopped
    ChannelBufferMemoryNotAllocated = _WMX3ApiPython.CoreMotionErrorCode_ChannelBufferMemoryNotAllocated
    ChannelBufferMemoryAlreadyAllocated = _WMX3ApiPython.CoreMotionErrorCode_ChannelBufferMemoryAlreadyAllocated
    ChannelBufferMemoryFailedToAllocate = _WMX3ApiPython.CoreMotionErrorCode_ChannelBufferMemoryFailedToAllocate
    ProcessingOverride = _WMX3ApiPython.CoreMotionErrorCode_ProcessingOverride
    CircularInterpolationArgumentOutOfRange = _WMX3ApiPython.CoreMotionErrorCode_CircularInterpolationArgumentOutOfRange
    EmergencyStopSignalOn = _WMX3ApiPython.CoreMotionErrorCode_EmergencyStopSignalOn
    SyncGroupDoesNotContainAxis = _WMX3ApiPython.CoreMotionErrorCode_SyncGroupDoesNotContainAxis
    SyncGroupParameterOutOfRange = _WMX3ApiPython.CoreMotionErrorCode_SyncGroupParameterOutOfRange
    CurrentAxisCommandModeNotSupported = _WMX3ApiPython.CoreMotionErrorCode_CurrentAxisCommandModeNotSupported
    MasterAxisOutOfRange = _WMX3ApiPython.CoreMotionErrorCode_MasterAxisOutOfRange
    SlaveAxisOutOfRange = _WMX3ApiPython.CoreMotionErrorCode_SlaveAxisOutOfRange
    SlaveAxisCountOutOfRange = _WMX3ApiPython.CoreMotionErrorCode_SlaveAxisCountOutOfRange
    EnabledArgumentOutOfRange = _WMX3ApiPython.CoreMotionErrorCode_EnabledArgumentOutOfRange
    MovingAverageTimeArgumentOutOfRange = _WMX3ApiPython.CoreMotionErrorCode_MovingAverageTimeArgumentOutOfRange
    NumEventsOutOfRange = _WMX3ApiPython.CoreMotionErrorCode_NumEventsOutOfRange
    RegisterNumberOutOfRange = _WMX3ApiPython.CoreMotionErrorCode_RegisterNumberOutOfRange
    SyncGearRatioOutOfRange = _WMX3ApiPython.CoreMotionErrorCode_SyncGearRatioOutOfRange
    PosChangePerCycleOutOfRange = _WMX3ApiPython.CoreMotionErrorCode_PosChangePerCycleOutOfRange
    MaxTorqueLimitOutOfRange = _WMX3ApiPython.CoreMotionErrorCode_MaxTorqueLimitOutOfRange
    TorqueArgumentOutOfRange = _WMX3ApiPython.CoreMotionErrorCode_TorqueArgumentOutOfRange
    MaxMotorSpeedOutOfRange = _WMX3ApiPython.CoreMotionErrorCode_MaxMotorSpeedOutOfRange
    RampCycleTimeOutOfRange = _WMX3ApiPython.CoreMotionErrorCode_RampCycleTimeOutOfRange
    RampRateOutOfRange = _WMX3ApiPython.CoreMotionErrorCode_RampRateOutOfRange
    CircularInterpolationTypeOutOfRange = _WMX3ApiPython.CoreMotionErrorCode_CircularInterpolationTypeOutOfRange
    CircularInterpolationCenterPosTooCloseToInitialPos = _WMX3ApiPython.CoreMotionErrorCode_CircularInterpolationCenterPosTooCloseToInitialPos
    CircularInterpolationEndPosTooCloseToInitialPos = _WMX3ApiPython.CoreMotionErrorCode_CircularInterpolationEndPosTooCloseToInitialPos
    CircularInterpolationThroughPosTooCloseToInitialPos = _WMX3ApiPython.CoreMotionErrorCode_CircularInterpolationThroughPosTooCloseToInitialPos
    CircularInterpolationThroughPosTooCloseToEndPos = _WMX3ApiPython.CoreMotionErrorCode_CircularInterpolationThroughPosTooCloseToEndPos
    CircularInterpolationPathGenerationError = _WMX3ApiPython.CoreMotionErrorCode_CircularInterpolationPathGenerationError
    HelicalInterpolationTypeOutOfRange = _WMX3ApiPython.CoreMotionErrorCode_HelicalInterpolationTypeOutOfRange
    HelicalInterpolationCenterPosTooCloseToInitialPos = _WMX3ApiPython.CoreMotionErrorCode_HelicalInterpolationCenterPosTooCloseToInitialPos
    HelicalInterpolationPathGenerationError = _WMX3ApiPython.CoreMotionErrorCode_HelicalInterpolationPathGenerationError
    AxisCommandModeOutOfRange = _WMX3ApiPython.CoreMotionErrorCode_AxisCommandModeOutOfRange
    ZPulseDetectionUnsupported = _WMX3ApiPython.CoreMotionErrorCode_ZPulseDetectionUnsupported
    TouchProbeDetectionUnsupported = _WMX3ApiPython.CoreMotionErrorCode_TouchProbeDetectionUnsupported
    HomeSwitchDetectionUnsupported = _WMX3ApiPython.CoreMotionErrorCode_HomeSwitchDetectionUnsupported
    LimitSwitchDetectionUnsupported = _WMX3ApiPython.CoreMotionErrorCode_LimitSwitchDetectionUnsupported

    def __init__(self):
        _WMX3ApiPython.CoreMotionErrorCode_swiginit(self, _WMX3ApiPython.new_CoreMotionErrorCode())
    __swig_destroy__ = _WMX3ApiPython.delete_CoreMotionErrorCode

# Register CoreMotionErrorCode in _WMX3ApiPython:
_WMX3ApiPython.CoreMotionErrorCode_swigregister(CoreMotionErrorCode)
class CoreMotionAxisLogInput(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def SetData(self, pCoreMotionAxisLogInput):
        return _WMX3ApiPython.CoreMotionAxisLogInput_SetData(self, pCoreMotionAxisLogInput)

    def GetData(self, pCoreMotionAxisLogInput):
        return _WMX3ApiPython.CoreMotionAxisLogInput_GetData(self, pCoreMotionAxisLogInput)

    def __init__(self):
        _WMX3ApiPython.CoreMotionAxisLogInput_swiginit(self, _WMX3ApiPython.new_CoreMotionAxisLogInput())
    servoOn = property(_WMX3ApiPython.CoreMotionAxisLogInput_servoOn_get, _WMX3ApiPython.CoreMotionAxisLogInput_servoOn_set)
    servoOffline = property(_WMX3ApiPython.CoreMotionAxisLogInput_servoOffline_get, _WMX3ApiPython.CoreMotionAxisLogInput_servoOffline_set)
    commandPos = property(_WMX3ApiPython.CoreMotionAxisLogInput_commandPos_get, _WMX3ApiPython.CoreMotionAxisLogInput_commandPos_set)
    feedbackPos = property(_WMX3ApiPython.CoreMotionAxisLogInput_feedbackPos_get, _WMX3ApiPython.CoreMotionAxisLogInput_feedbackPos_set)
    compCommandPos = property(_WMX3ApiPython.CoreMotionAxisLogInput_compCommandPos_get, _WMX3ApiPython.CoreMotionAxisLogInput_compCommandPos_set)
    compFeedbackPos = property(_WMX3ApiPython.CoreMotionAxisLogInput_compFeedbackPos_get, _WMX3ApiPython.CoreMotionAxisLogInput_compFeedbackPos_set)
    encoderCommandPos = property(_WMX3ApiPython.CoreMotionAxisLogInput_encoderCommandPos_get, _WMX3ApiPython.CoreMotionAxisLogInput_encoderCommandPos_set)
    encoderFeedbackPos = property(_WMX3ApiPython.CoreMotionAxisLogInput_encoderFeedbackPos_get, _WMX3ApiPython.CoreMotionAxisLogInput_encoderFeedbackPos_set)
    commandVelocity = property(_WMX3ApiPython.CoreMotionAxisLogInput_commandVelocity_get, _WMX3ApiPython.CoreMotionAxisLogInput_commandVelocity_set)
    feedbackVelocity = property(_WMX3ApiPython.CoreMotionAxisLogInput_feedbackVelocity_get, _WMX3ApiPython.CoreMotionAxisLogInput_feedbackVelocity_set)
    encoderCommandVelocity = property(_WMX3ApiPython.CoreMotionAxisLogInput_encoderCommandVelocity_get, _WMX3ApiPython.CoreMotionAxisLogInput_encoderCommandVelocity_set)
    encoderFeedbackVelocity = property(_WMX3ApiPython.CoreMotionAxisLogInput_encoderFeedbackVelocity_get, _WMX3ApiPython.CoreMotionAxisLogInput_encoderFeedbackVelocity_set)
    commandTrq = property(_WMX3ApiPython.CoreMotionAxisLogInput_commandTrq_get, _WMX3ApiPython.CoreMotionAxisLogInput_commandTrq_set)
    feedbackTrq = property(_WMX3ApiPython.CoreMotionAxisLogInput_feedbackTrq_get, _WMX3ApiPython.CoreMotionAxisLogInput_feedbackTrq_set)
    encoderCommandTrq = property(_WMX3ApiPython.CoreMotionAxisLogInput_encoderCommandTrq_get, _WMX3ApiPython.CoreMotionAxisLogInput_encoderCommandTrq_set)
    encoderFeedbackTrq = property(_WMX3ApiPython.CoreMotionAxisLogInput_encoderFeedbackTrq_get, _WMX3ApiPython.CoreMotionAxisLogInput_encoderFeedbackTrq_set)
    followingError = property(_WMX3ApiPython.CoreMotionAxisLogInput_followingError_get, _WMX3ApiPython.CoreMotionAxisLogInput_followingError_set)
    homeOffset = property(_WMX3ApiPython.CoreMotionAxisLogInput_homeOffset_get, _WMX3ApiPython.CoreMotionAxisLogInput_homeOffset_set)
    homeSwitch = property(_WMX3ApiPython.CoreMotionAxisLogInput_homeSwitch_get, _WMX3ApiPython.CoreMotionAxisLogInput_homeSwitch_set)
    homeState = property(_WMX3ApiPython.CoreMotionAxisLogInput_homeState_get, _WMX3ApiPython.CoreMotionAxisLogInput_homeState_set)
    inPosFlag = property(_WMX3ApiPython.CoreMotionAxisLogInput_inPosFlag_get, _WMX3ApiPython.CoreMotionAxisLogInput_inPosFlag_set)
    inPosFlag2 = property(_WMX3ApiPython.CoreMotionAxisLogInput_inPosFlag2_get, _WMX3ApiPython.CoreMotionAxisLogInput_inPosFlag2_set)
    inPosFlag3 = property(_WMX3ApiPython.CoreMotionAxisLogInput_inPosFlag3_get, _WMX3ApiPython.CoreMotionAxisLogInput_inPosFlag3_set)
    inPosFlag4 = property(_WMX3ApiPython.CoreMotionAxisLogInput_inPosFlag4_get, _WMX3ApiPython.CoreMotionAxisLogInput_inPosFlag4_set)
    inPosFlag5 = property(_WMX3ApiPython.CoreMotionAxisLogInput_inPosFlag5_get, _WMX3ApiPython.CoreMotionAxisLogInput_inPosFlag5_set)
    commandDistributionEndFlag = property(_WMX3ApiPython.CoreMotionAxisLogInput_commandDistributionEndFlag_get, _WMX3ApiPython.CoreMotionAxisLogInput_commandDistributionEndFlag_set)
    posSetFlag = property(_WMX3ApiPython.CoreMotionAxisLogInput_posSetFlag_get, _WMX3ApiPython.CoreMotionAxisLogInput_posSetFlag_set)
    delayedPosSetFlag = property(_WMX3ApiPython.CoreMotionAxisLogInput_delayedPosSetFlag_get, _WMX3ApiPython.CoreMotionAxisLogInput_delayedPosSetFlag_set)
    positiveLS = property(_WMX3ApiPython.CoreMotionAxisLogInput_positiveLS_get, _WMX3ApiPython.CoreMotionAxisLogInput_positiveLS_set)
    negativeLS = property(_WMX3ApiPython.CoreMotionAxisLogInput_negativeLS_get, _WMX3ApiPython.CoreMotionAxisLogInput_negativeLS_set)
    opState = property(_WMX3ApiPython.CoreMotionAxisLogInput_opState_get, _WMX3ApiPython.CoreMotionAxisLogInput_opState_set)
    detailOpState = property(_WMX3ApiPython.CoreMotionAxisLogInput_detailOpState_get, _WMX3ApiPython.CoreMotionAxisLogInput_detailOpState_set)
    userOffsetCommandPos = property(_WMX3ApiPython.CoreMotionAxisLogInput_userOffsetCommandPos_get, _WMX3ApiPython.CoreMotionAxisLogInput_userOffsetCommandPos_set)
    userOffsetFeedbackPos = property(_WMX3ApiPython.CoreMotionAxisLogInput_userOffsetFeedbackPos_get, _WMX3ApiPython.CoreMotionAxisLogInput_userOffsetFeedbackPos_set)
    axisCommandMode = property(_WMX3ApiPython.CoreMotionAxisLogInput_axisCommandMode_get, _WMX3ApiPython.CoreMotionAxisLogInput_axisCommandMode_set)
    axisCommandModeFeedback = property(_WMX3ApiPython.CoreMotionAxisLogInput_axisCommandModeFeedback_get, _WMX3ApiPython.CoreMotionAxisLogInput_axisCommandModeFeedback_set)
    __swig_destroy__ = _WMX3ApiPython.delete_CoreMotionAxisLogInput

# Register CoreMotionAxisLogInput in _WMX3ApiPython:
_WMX3ApiPython.CoreMotionAxisLogInput_swigregister(CoreMotionAxisLogInput)
class CoreMotionLogInput(LogInput):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def SetData(self, pCoreMotionLogInput):
        return _WMX3ApiPython.CoreMotionLogInput_SetData(self, pCoreMotionLogInput)

    def GetData(self, pCoreMotionLogInput):
        return _WMX3ApiPython.CoreMotionLogInput_GetData(self, pCoreMotionLogInput)

    def __init__(self):
        _WMX3ApiPython.CoreMotionLogInput_swiginit(self, _WMX3ApiPython.new_CoreMotionLogInput())

    def GetModuleId(self):
        return _WMX3ApiPython.CoreMotionLogInput_GetModuleId(self)

    def GetInputData(self, buff, buffSize, dataSize):
        return _WMX3ApiPython.CoreMotionLogInput_GetInputData(self, buff, buffSize, dataSize)

    def SetInputData(self, moduleId, data, dataSize):
        return _WMX3ApiPython.CoreMotionLogInput_SetInputData(self, moduleId, data, dataSize)

    def GetLogInput(self):
        return _WMX3ApiPython.CoreMotionLogInput_GetLogInput(self)
    axisSelection = property(_WMX3ApiPython.CoreMotionLogInput_axisSelection_get, _WMX3ApiPython.CoreMotionLogInput_axisSelection_set)
    axisOptions = property(_WMX3ApiPython.CoreMotionLogInput_axisOptions_get, _WMX3ApiPython.CoreMotionLogInput_axisOptions_set)
    __swig_destroy__ = _WMX3ApiPython.delete_CoreMotionLogInput

# Register CoreMotionLogInput in _WMX3ApiPython:
_WMX3ApiPython.CoreMotionLogInput_swigregister(CoreMotionLogInput)
class CoreMotionAxisLogOutput(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def SetData(self, pCoreMotionAxisLogOutput):
        return _WMX3ApiPython.CoreMotionAxisLogOutput_SetData(self, pCoreMotionAxisLogOutput)

    def GetData(self, pCoreMotionAxisLogOutput):
        return _WMX3ApiPython.CoreMotionAxisLogOutput_GetData(self, pCoreMotionAxisLogOutput)
    servoOn = property(_WMX3ApiPython.CoreMotionAxisLogOutput_servoOn_get, _WMX3ApiPython.CoreMotionAxisLogOutput_servoOn_set)
    servoOffline = property(_WMX3ApiPython.CoreMotionAxisLogOutput_servoOffline_get, _WMX3ApiPython.CoreMotionAxisLogOutput_servoOffline_set)
    commandPos = property(_WMX3ApiPython.CoreMotionAxisLogOutput_commandPos_get, _WMX3ApiPython.CoreMotionAxisLogOutput_commandPos_set)
    feedbackPos = property(_WMX3ApiPython.CoreMotionAxisLogOutput_feedbackPos_get, _WMX3ApiPython.CoreMotionAxisLogOutput_feedbackPos_set)
    compCommandPos = property(_WMX3ApiPython.CoreMotionAxisLogOutput_compCommandPos_get, _WMX3ApiPython.CoreMotionAxisLogOutput_compCommandPos_set)
    compFeedbackPos = property(_WMX3ApiPython.CoreMotionAxisLogOutput_compFeedbackPos_get, _WMX3ApiPython.CoreMotionAxisLogOutput_compFeedbackPos_set)
    encoderCommandPos = property(_WMX3ApiPython.CoreMotionAxisLogOutput_encoderCommandPos_get, _WMX3ApiPython.CoreMotionAxisLogOutput_encoderCommandPos_set)
    encoderFeedbackPos = property(_WMX3ApiPython.CoreMotionAxisLogOutput_encoderFeedbackPos_get, _WMX3ApiPython.CoreMotionAxisLogOutput_encoderFeedbackPos_set)
    commandVelocity = property(_WMX3ApiPython.CoreMotionAxisLogOutput_commandVelocity_get, _WMX3ApiPython.CoreMotionAxisLogOutput_commandVelocity_set)
    feedbackVelocity = property(_WMX3ApiPython.CoreMotionAxisLogOutput_feedbackVelocity_get, _WMX3ApiPython.CoreMotionAxisLogOutput_feedbackVelocity_set)
    encoderCommandVelocity = property(_WMX3ApiPython.CoreMotionAxisLogOutput_encoderCommandVelocity_get, _WMX3ApiPython.CoreMotionAxisLogOutput_encoderCommandVelocity_set)
    encoderFeedbackVelocity = property(_WMX3ApiPython.CoreMotionAxisLogOutput_encoderFeedbackVelocity_get, _WMX3ApiPython.CoreMotionAxisLogOutput_encoderFeedbackVelocity_set)
    commandTrq = property(_WMX3ApiPython.CoreMotionAxisLogOutput_commandTrq_get, _WMX3ApiPython.CoreMotionAxisLogOutput_commandTrq_set)
    feedbackTrq = property(_WMX3ApiPython.CoreMotionAxisLogOutput_feedbackTrq_get, _WMX3ApiPython.CoreMotionAxisLogOutput_feedbackTrq_set)
    encoderCommandTrq = property(_WMX3ApiPython.CoreMotionAxisLogOutput_encoderCommandTrq_get, _WMX3ApiPython.CoreMotionAxisLogOutput_encoderCommandTrq_set)
    encoderFeedbackTrq = property(_WMX3ApiPython.CoreMotionAxisLogOutput_encoderFeedbackTrq_get, _WMX3ApiPython.CoreMotionAxisLogOutput_encoderFeedbackTrq_set)
    followingError = property(_WMX3ApiPython.CoreMotionAxisLogOutput_followingError_get, _WMX3ApiPython.CoreMotionAxisLogOutput_followingError_set)
    homeOffset = property(_WMX3ApiPython.CoreMotionAxisLogOutput_homeOffset_get, _WMX3ApiPython.CoreMotionAxisLogOutput_homeOffset_set)
    homeSwitch = property(_WMX3ApiPython.CoreMotionAxisLogOutput_homeSwitch_get, _WMX3ApiPython.CoreMotionAxisLogOutput_homeSwitch_set)
    homeState = property(_WMX3ApiPython.CoreMotionAxisLogOutput_homeState_get, _WMX3ApiPython.CoreMotionAxisLogOutput_homeState_set)
    inPosFlag = property(_WMX3ApiPython.CoreMotionAxisLogOutput_inPosFlag_get, _WMX3ApiPython.CoreMotionAxisLogOutput_inPosFlag_set)
    inPosFlag2 = property(_WMX3ApiPython.CoreMotionAxisLogOutput_inPosFlag2_get, _WMX3ApiPython.CoreMotionAxisLogOutput_inPosFlag2_set)
    inPosFlag3 = property(_WMX3ApiPython.CoreMotionAxisLogOutput_inPosFlag3_get, _WMX3ApiPython.CoreMotionAxisLogOutput_inPosFlag3_set)
    inPosFlag4 = property(_WMX3ApiPython.CoreMotionAxisLogOutput_inPosFlag4_get, _WMX3ApiPython.CoreMotionAxisLogOutput_inPosFlag4_set)
    inPosFlag5 = property(_WMX3ApiPython.CoreMotionAxisLogOutput_inPosFlag5_get, _WMX3ApiPython.CoreMotionAxisLogOutput_inPosFlag5_set)
    commandDistributionEndFlag = property(_WMX3ApiPython.CoreMotionAxisLogOutput_commandDistributionEndFlag_get, _WMX3ApiPython.CoreMotionAxisLogOutput_commandDistributionEndFlag_set)
    posSetFlag = property(_WMX3ApiPython.CoreMotionAxisLogOutput_posSetFlag_get, _WMX3ApiPython.CoreMotionAxisLogOutput_posSetFlag_set)
    delayedPosSetFlag = property(_WMX3ApiPython.CoreMotionAxisLogOutput_delayedPosSetFlag_get, _WMX3ApiPython.CoreMotionAxisLogOutput_delayedPosSetFlag_set)
    positiveLS = property(_WMX3ApiPython.CoreMotionAxisLogOutput_positiveLS_get, _WMX3ApiPython.CoreMotionAxisLogOutput_positiveLS_set)
    negativeLS = property(_WMX3ApiPython.CoreMotionAxisLogOutput_negativeLS_get, _WMX3ApiPython.CoreMotionAxisLogOutput_negativeLS_set)
    opState = property(_WMX3ApiPython.CoreMotionAxisLogOutput_opState_get, _WMX3ApiPython.CoreMotionAxisLogOutput_opState_set)
    detailOpState = property(_WMX3ApiPython.CoreMotionAxisLogOutput_detailOpState_get, _WMX3ApiPython.CoreMotionAxisLogOutput_detailOpState_set)
    userOffsetCommandPos = property(_WMX3ApiPython.CoreMotionAxisLogOutput_userOffsetCommandPos_get, _WMX3ApiPython.CoreMotionAxisLogOutput_userOffsetCommandPos_set)
    userOffsetFeedbackPos = property(_WMX3ApiPython.CoreMotionAxisLogOutput_userOffsetFeedbackPos_get, _WMX3ApiPython.CoreMotionAxisLogOutput_userOffsetFeedbackPos_set)
    axisCommandMode = property(_WMX3ApiPython.CoreMotionAxisLogOutput_axisCommandMode_get, _WMX3ApiPython.CoreMotionAxisLogOutput_axisCommandMode_set)
    axisCommandModeFeedback = property(_WMX3ApiPython.CoreMotionAxisLogOutput_axisCommandModeFeedback_get, _WMX3ApiPython.CoreMotionAxisLogOutput_axisCommandModeFeedback_set)

    def __init__(self):
        _WMX3ApiPython.CoreMotionAxisLogOutput_swiginit(self, _WMX3ApiPython.new_CoreMotionAxisLogOutput())
    __swig_destroy__ = _WMX3ApiPython.delete_CoreMotionAxisLogOutput

# Register CoreMotionAxisLogOutput in _WMX3ApiPython:
_WMX3ApiPython.CoreMotionAxisLogOutput_swigregister(CoreMotionAxisLogOutput)
class CoreMotionLogOutput(LogOutput):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _WMX3ApiPython.CoreMotionLogOutput_swiginit(self, _WMX3ApiPython.new_CoreMotionLogOutput())

    def GetModuleId(self):
        return _WMX3ApiPython.CoreMotionLogOutput_GetModuleId(self)

    def GetLogOutput(self):
        return _WMX3ApiPython.CoreMotionLogOutput_GetLogOutput(self)

    def SetLogOutput(self, src):
        return _WMX3ApiPython.CoreMotionLogOutput_SetLogOutput(self, src)
    axisData = property(_WMX3ApiPython.CoreMotionLogOutput_axisData_get, _WMX3ApiPython.CoreMotionLogOutput_axisData_set)

    def SetAxisData(self, index1, index2, value):
        return _WMX3ApiPython.CoreMotionLogOutput_SetAxisData(self, index1, index2, value)

    def GetAxisData(self, index1, index2):
        return _WMX3ApiPython.CoreMotionLogOutput_GetAxisData(self, index1, index2)
    __swig_destroy__ = _WMX3ApiPython.delete_CoreMotionLogOutput

# Register CoreMotionLogOutput in _WMX3ApiPython:
_WMX3ApiPython.CoreMotionLogOutput_swigregister(CoreMotionLogOutput)
class BaseCoreMotionEventInputFunctionArguments_Pos(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    axis = property(_WMX3ApiPython.BaseCoreMotionEventInputFunctionArguments_Pos_axis_get, _WMX3ApiPython.BaseCoreMotionEventInputFunctionArguments_Pos_axis_set)
    pos = property(_WMX3ApiPython.BaseCoreMotionEventInputFunctionArguments_Pos_pos_get, _WMX3ApiPython.BaseCoreMotionEventInputFunctionArguments_Pos_pos_set)
    disablePositiveDirection = property(_WMX3ApiPython.BaseCoreMotionEventInputFunctionArguments_Pos_disablePositiveDirection_get, _WMX3ApiPython.BaseCoreMotionEventInputFunctionArguments_Pos_disablePositiveDirection_set)
    disableNegativeDirection = property(_WMX3ApiPython.BaseCoreMotionEventInputFunctionArguments_Pos_disableNegativeDirection_get, _WMX3ApiPython.BaseCoreMotionEventInputFunctionArguments_Pos_disableNegativeDirection_set)
    useFeedback = property(_WMX3ApiPython.BaseCoreMotionEventInputFunctionArguments_Pos_useFeedback_get, _WMX3ApiPython.BaseCoreMotionEventInputFunctionArguments_Pos_useFeedback_set)
    invert = property(_WMX3ApiPython.BaseCoreMotionEventInputFunctionArguments_Pos_invert_get, _WMX3ApiPython.BaseCoreMotionEventInputFunctionArguments_Pos_invert_set)

    def __init__(self):
        _WMX3ApiPython.BaseCoreMotionEventInputFunctionArguments_Pos_swiginit(self, _WMX3ApiPython.new_BaseCoreMotionEventInputFunctionArguments_Pos())
    __swig_destroy__ = _WMX3ApiPython.delete_BaseCoreMotionEventInputFunctionArguments_Pos

# Register BaseCoreMotionEventInputFunctionArguments_Pos in _WMX3ApiPython:
_WMX3ApiPython.BaseCoreMotionEventInputFunctionArguments_Pos_swigregister(BaseCoreMotionEventInputFunctionArguments_Pos)
class BaseCoreMotionEventInputFunctionArguments_Velocity(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    axis = property(_WMX3ApiPython.BaseCoreMotionEventInputFunctionArguments_Velocity_axis_get, _WMX3ApiPython.BaseCoreMotionEventInputFunctionArguments_Velocity_axis_set)
    velocity = property(_WMX3ApiPython.BaseCoreMotionEventInputFunctionArguments_Velocity_velocity_get, _WMX3ApiPython.BaseCoreMotionEventInputFunctionArguments_Velocity_velocity_set)
    useFeedback = property(_WMX3ApiPython.BaseCoreMotionEventInputFunctionArguments_Velocity_useFeedback_get, _WMX3ApiPython.BaseCoreMotionEventInputFunctionArguments_Velocity_useFeedback_set)
    invert = property(_WMX3ApiPython.BaseCoreMotionEventInputFunctionArguments_Velocity_invert_get, _WMX3ApiPython.BaseCoreMotionEventInputFunctionArguments_Velocity_invert_set)
    enableUnsigned = property(_WMX3ApiPython.BaseCoreMotionEventInputFunctionArguments_Velocity_enableUnsigned_get, _WMX3ApiPython.BaseCoreMotionEventInputFunctionArguments_Velocity_enableUnsigned_set)

    def __init__(self):
        _WMX3ApiPython.BaseCoreMotionEventInputFunctionArguments_Velocity_swiginit(self, _WMX3ApiPython.new_BaseCoreMotionEventInputFunctionArguments_Velocity())
    __swig_destroy__ = _WMX3ApiPython.delete_BaseCoreMotionEventInputFunctionArguments_Velocity

# Register BaseCoreMotionEventInputFunctionArguments_Velocity in _WMX3ApiPython:
_WMX3ApiPython.BaseCoreMotionEventInputFunctionArguments_Velocity_swigregister(BaseCoreMotionEventInputFunctionArguments_Velocity)
class BaseCoreMotionEventInputFunctionArguments_Trq(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    axis = property(_WMX3ApiPython.BaseCoreMotionEventInputFunctionArguments_Trq_axis_get, _WMX3ApiPython.BaseCoreMotionEventInputFunctionArguments_Trq_axis_set)
    trq = property(_WMX3ApiPython.BaseCoreMotionEventInputFunctionArguments_Trq_trq_get, _WMX3ApiPython.BaseCoreMotionEventInputFunctionArguments_Trq_trq_set)
    invert = property(_WMX3ApiPython.BaseCoreMotionEventInputFunctionArguments_Trq_invert_get, _WMX3ApiPython.BaseCoreMotionEventInputFunctionArguments_Trq_invert_set)
    enableUnsigned = property(_WMX3ApiPython.BaseCoreMotionEventInputFunctionArguments_Trq_enableUnsigned_get, _WMX3ApiPython.BaseCoreMotionEventInputFunctionArguments_Trq_enableUnsigned_set)

    def __init__(self):
        _WMX3ApiPython.BaseCoreMotionEventInputFunctionArguments_Trq_swiginit(self, _WMX3ApiPython.new_BaseCoreMotionEventInputFunctionArguments_Trq())
    __swig_destroy__ = _WMX3ApiPython.delete_BaseCoreMotionEventInputFunctionArguments_Trq

# Register BaseCoreMotionEventInputFunctionArguments_Trq in _WMX3ApiPython:
_WMX3ApiPython.BaseCoreMotionEventInputFunctionArguments_Trq_swigregister(BaseCoreMotionEventInputFunctionArguments_Trq)
class CoreMotionEventInputFunctionArguments_EqualPos(BaseCoreMotionEventInputFunctionArguments_Pos):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    enableTolerance = property(_WMX3ApiPython.CoreMotionEventInputFunctionArguments_EqualPos_enableTolerance_get, _WMX3ApiPython.CoreMotionEventInputFunctionArguments_EqualPos_enableTolerance_set)
    tolerance = property(_WMX3ApiPython.CoreMotionEventInputFunctionArguments_EqualPos_tolerance_get, _WMX3ApiPython.CoreMotionEventInputFunctionArguments_EqualPos_tolerance_set)

    def __init__(self):
        _WMX3ApiPython.CoreMotionEventInputFunctionArguments_EqualPos_swiginit(self, _WMX3ApiPython.new_CoreMotionEventInputFunctionArguments_EqualPos())
    __swig_destroy__ = _WMX3ApiPython.delete_CoreMotionEventInputFunctionArguments_EqualPos

# Register CoreMotionEventInputFunctionArguments_EqualPos in _WMX3ApiPython:
_WMX3ApiPython.CoreMotionEventInputFunctionArguments_EqualPos_swigregister(CoreMotionEventInputFunctionArguments_EqualPos)
class CoreMotionEventInputFunctionArguments_GreaterPos(BaseCoreMotionEventInputFunctionArguments_Pos):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _WMX3ApiPython.CoreMotionEventInputFunctionArguments_GreaterPos_swiginit(self, _WMX3ApiPython.new_CoreMotionEventInputFunctionArguments_GreaterPos())
    __swig_destroy__ = _WMX3ApiPython.delete_CoreMotionEventInputFunctionArguments_GreaterPos

# Register CoreMotionEventInputFunctionArguments_GreaterPos in _WMX3ApiPython:
_WMX3ApiPython.CoreMotionEventInputFunctionArguments_GreaterPos_swigregister(CoreMotionEventInputFunctionArguments_GreaterPos)
class CoreMotionEventInputFunctionArguments_LessPos(BaseCoreMotionEventInputFunctionArguments_Pos):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _WMX3ApiPython.CoreMotionEventInputFunctionArguments_LessPos_swiginit(self, _WMX3ApiPython.new_CoreMotionEventInputFunctionArguments_LessPos())
    __swig_destroy__ = _WMX3ApiPython.delete_CoreMotionEventInputFunctionArguments_LessPos

# Register CoreMotionEventInputFunctionArguments_LessPos in _WMX3ApiPython:
_WMX3ApiPython.CoreMotionEventInputFunctionArguments_LessPos_swigregister(CoreMotionEventInputFunctionArguments_LessPos)
class CoreMotionEventInputFunctionArguments_EqualVelocity(BaseCoreMotionEventInputFunctionArguments_Velocity):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    enableTolerance = property(_WMX3ApiPython.CoreMotionEventInputFunctionArguments_EqualVelocity_enableTolerance_get, _WMX3ApiPython.CoreMotionEventInputFunctionArguments_EqualVelocity_enableTolerance_set)
    tolerance = property(_WMX3ApiPython.CoreMotionEventInputFunctionArguments_EqualVelocity_tolerance_get, _WMX3ApiPython.CoreMotionEventInputFunctionArguments_EqualVelocity_tolerance_set)

    def __init__(self):
        _WMX3ApiPython.CoreMotionEventInputFunctionArguments_EqualVelocity_swiginit(self, _WMX3ApiPython.new_CoreMotionEventInputFunctionArguments_EqualVelocity())
    __swig_destroy__ = _WMX3ApiPython.delete_CoreMotionEventInputFunctionArguments_EqualVelocity

# Register CoreMotionEventInputFunctionArguments_EqualVelocity in _WMX3ApiPython:
_WMX3ApiPython.CoreMotionEventInputFunctionArguments_EqualVelocity_swigregister(CoreMotionEventInputFunctionArguments_EqualVelocity)
class CoreMotionEventInputFunctionArguments_GreaterVelocity(BaseCoreMotionEventInputFunctionArguments_Velocity):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _WMX3ApiPython.CoreMotionEventInputFunctionArguments_GreaterVelocity_swiginit(self, _WMX3ApiPython.new_CoreMotionEventInputFunctionArguments_GreaterVelocity())
    __swig_destroy__ = _WMX3ApiPython.delete_CoreMotionEventInputFunctionArguments_GreaterVelocity

# Register CoreMotionEventInputFunctionArguments_GreaterVelocity in _WMX3ApiPython:
_WMX3ApiPython.CoreMotionEventInputFunctionArguments_GreaterVelocity_swigregister(CoreMotionEventInputFunctionArguments_GreaterVelocity)
class CoreMotionEventInputFunctionArguments_LessVelocity(BaseCoreMotionEventInputFunctionArguments_Velocity):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _WMX3ApiPython.CoreMotionEventInputFunctionArguments_LessVelocity_swiginit(self, _WMX3ApiPython.new_CoreMotionEventInputFunctionArguments_LessVelocity())
    __swig_destroy__ = _WMX3ApiPython.delete_CoreMotionEventInputFunctionArguments_LessVelocity

# Register CoreMotionEventInputFunctionArguments_LessVelocity in _WMX3ApiPython:
_WMX3ApiPython.CoreMotionEventInputFunctionArguments_LessVelocity_swigregister(CoreMotionEventInputFunctionArguments_LessVelocity)
class CoreMotionEventInputFunctionArguments_EqualTrq(BaseCoreMotionEventInputFunctionArguments_Trq):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    enableTolerance = property(_WMX3ApiPython.CoreMotionEventInputFunctionArguments_EqualTrq_enableTolerance_get, _WMX3ApiPython.CoreMotionEventInputFunctionArguments_EqualTrq_enableTolerance_set)
    tolerance = property(_WMX3ApiPython.CoreMotionEventInputFunctionArguments_EqualTrq_tolerance_get, _WMX3ApiPython.CoreMotionEventInputFunctionArguments_EqualTrq_tolerance_set)

    def __init__(self):
        _WMX3ApiPython.CoreMotionEventInputFunctionArguments_EqualTrq_swiginit(self, _WMX3ApiPython.new_CoreMotionEventInputFunctionArguments_EqualTrq())
    __swig_destroy__ = _WMX3ApiPython.delete_CoreMotionEventInputFunctionArguments_EqualTrq

# Register CoreMotionEventInputFunctionArguments_EqualTrq in _WMX3ApiPython:
_WMX3ApiPython.CoreMotionEventInputFunctionArguments_EqualTrq_swigregister(CoreMotionEventInputFunctionArguments_EqualTrq)
class CoreMotionEventInputFunctionArguments_GreaterTrq(BaseCoreMotionEventInputFunctionArguments_Trq):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _WMX3ApiPython.CoreMotionEventInputFunctionArguments_GreaterTrq_swiginit(self, _WMX3ApiPython.new_CoreMotionEventInputFunctionArguments_GreaterTrq())
    __swig_destroy__ = _WMX3ApiPython.delete_CoreMotionEventInputFunctionArguments_GreaterTrq

# Register CoreMotionEventInputFunctionArguments_GreaterTrq in _WMX3ApiPython:
_WMX3ApiPython.CoreMotionEventInputFunctionArguments_GreaterTrq_swigregister(CoreMotionEventInputFunctionArguments_GreaterTrq)
class CoreMotionEventInputFunctionArguments_LessTrq(BaseCoreMotionEventInputFunctionArguments_Trq):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _WMX3ApiPython.CoreMotionEventInputFunctionArguments_LessTrq_swiginit(self, _WMX3ApiPython.new_CoreMotionEventInputFunctionArguments_LessTrq())
    __swig_destroy__ = _WMX3ApiPython.delete_CoreMotionEventInputFunctionArguments_LessTrq

# Register CoreMotionEventInputFunctionArguments_LessTrq in _WMX3ApiPython:
_WMX3ApiPython.CoreMotionEventInputFunctionArguments_LessTrq_swigregister(CoreMotionEventInputFunctionArguments_LessTrq)
class CoreMotionEventInputFunctionArguments_OpState(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    axis = property(_WMX3ApiPython.CoreMotionEventInputFunctionArguments_OpState_axis_get, _WMX3ApiPython.CoreMotionEventInputFunctionArguments_OpState_axis_set)
    opState = property(_WMX3ApiPython.CoreMotionEventInputFunctionArguments_OpState_opState_get, _WMX3ApiPython.CoreMotionEventInputFunctionArguments_OpState_opState_set)
    invert = property(_WMX3ApiPython.CoreMotionEventInputFunctionArguments_OpState_invert_get, _WMX3ApiPython.CoreMotionEventInputFunctionArguments_OpState_invert_set)

    def __init__(self):
        _WMX3ApiPython.CoreMotionEventInputFunctionArguments_OpState_swiginit(self, _WMX3ApiPython.new_CoreMotionEventInputFunctionArguments_OpState())
    __swig_destroy__ = _WMX3ApiPython.delete_CoreMotionEventInputFunctionArguments_OpState

# Register CoreMotionEventInputFunctionArguments_OpState in _WMX3ApiPython:
_WMX3ApiPython.CoreMotionEventInputFunctionArguments_OpState_swigregister(CoreMotionEventInputFunctionArguments_OpState)
class CoreMotionEventInputFunctionArguments_AxisCmdMode(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    axis = property(_WMX3ApiPython.CoreMotionEventInputFunctionArguments_AxisCmdMode_axis_get, _WMX3ApiPython.CoreMotionEventInputFunctionArguments_AxisCmdMode_axis_set)
    axisCommandMode = property(_WMX3ApiPython.CoreMotionEventInputFunctionArguments_AxisCmdMode_axisCommandMode_get, _WMX3ApiPython.CoreMotionEventInputFunctionArguments_AxisCmdMode_axisCommandMode_set)
    useFeedback = property(_WMX3ApiPython.CoreMotionEventInputFunctionArguments_AxisCmdMode_useFeedback_get, _WMX3ApiPython.CoreMotionEventInputFunctionArguments_AxisCmdMode_useFeedback_set)
    invert = property(_WMX3ApiPython.CoreMotionEventInputFunctionArguments_AxisCmdMode_invert_get, _WMX3ApiPython.CoreMotionEventInputFunctionArguments_AxisCmdMode_invert_set)

    def __init__(self):
        _WMX3ApiPython.CoreMotionEventInputFunctionArguments_AxisCmdMode_swiginit(self, _WMX3ApiPython.new_CoreMotionEventInputFunctionArguments_AxisCmdMode())
    __swig_destroy__ = _WMX3ApiPython.delete_CoreMotionEventInputFunctionArguments_AxisCmdMode

# Register CoreMotionEventInputFunctionArguments_AxisCmdMode in _WMX3ApiPython:
_WMX3ApiPython.CoreMotionEventInputFunctionArguments_AxisCmdMode_swigregister(CoreMotionEventInputFunctionArguments_AxisCmdMode)
class CoreMotionEventInputFunctionArguments_InPos(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    axis = property(_WMX3ApiPython.CoreMotionEventInputFunctionArguments_InPos_axis_get, _WMX3ApiPython.CoreMotionEventInputFunctionArguments_InPos_axis_set)
    invert = property(_WMX3ApiPython.CoreMotionEventInputFunctionArguments_InPos_invert_get, _WMX3ApiPython.CoreMotionEventInputFunctionArguments_InPos_invert_set)
    channel = property(_WMX3ApiPython.CoreMotionEventInputFunctionArguments_InPos_channel_get, _WMX3ApiPython.CoreMotionEventInputFunctionArguments_InPos_channel_set)

    def __init__(self):
        _WMX3ApiPython.CoreMotionEventInputFunctionArguments_InPos_swiginit(self, _WMX3ApiPython.new_CoreMotionEventInputFunctionArguments_InPos())
    __swig_destroy__ = _WMX3ApiPython.delete_CoreMotionEventInputFunctionArguments_InPos

# Register CoreMotionEventInputFunctionArguments_InPos in _WMX3ApiPython:
_WMX3ApiPython.CoreMotionEventInputFunctionArguments_InPos_swigregister(CoreMotionEventInputFunctionArguments_InPos)
class CoreMotionEventInputFunctionArguments_PosSET(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    axis = property(_WMX3ApiPython.CoreMotionEventInputFunctionArguments_PosSET_axis_get, _WMX3ApiPython.CoreMotionEventInputFunctionArguments_PosSET_axis_set)
    invert = property(_WMX3ApiPython.CoreMotionEventInputFunctionArguments_PosSET_invert_get, _WMX3ApiPython.CoreMotionEventInputFunctionArguments_PosSET_invert_set)

    def __init__(self):
        _WMX3ApiPython.CoreMotionEventInputFunctionArguments_PosSET_swiginit(self, _WMX3ApiPython.new_CoreMotionEventInputFunctionArguments_PosSET())
    __swig_destroy__ = _WMX3ApiPython.delete_CoreMotionEventInputFunctionArguments_PosSET

# Register CoreMotionEventInputFunctionArguments_PosSET in _WMX3ApiPython:
_WMX3ApiPython.CoreMotionEventInputFunctionArguments_PosSET_swigregister(CoreMotionEventInputFunctionArguments_PosSET)
class CoreMotionEventInputFunctionArguments_DelayedPosSET(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    axis = property(_WMX3ApiPython.CoreMotionEventInputFunctionArguments_DelayedPosSET_axis_get, _WMX3ApiPython.CoreMotionEventInputFunctionArguments_DelayedPosSET_axis_set)
    invert = property(_WMX3ApiPython.CoreMotionEventInputFunctionArguments_DelayedPosSET_invert_get, _WMX3ApiPython.CoreMotionEventInputFunctionArguments_DelayedPosSET_invert_set)

    def __init__(self):
        _WMX3ApiPython.CoreMotionEventInputFunctionArguments_DelayedPosSET_swiginit(self, _WMX3ApiPython.new_CoreMotionEventInputFunctionArguments_DelayedPosSET())
    __swig_destroy__ = _WMX3ApiPython.delete_CoreMotionEventInputFunctionArguments_DelayedPosSET

# Register CoreMotionEventInputFunctionArguments_DelayedPosSET in _WMX3ApiPython:
_WMX3ApiPython.CoreMotionEventInputFunctionArguments_DelayedPosSET_swigregister(CoreMotionEventInputFunctionArguments_DelayedPosSET)
class CoreMotionEventInputFunctionArguments_CommandDistributedEnd(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    axis = property(_WMX3ApiPython.CoreMotionEventInputFunctionArguments_CommandDistributedEnd_axis_get, _WMX3ApiPython.CoreMotionEventInputFunctionArguments_CommandDistributedEnd_axis_set)
    invert = property(_WMX3ApiPython.CoreMotionEventInputFunctionArguments_CommandDistributedEnd_invert_get, _WMX3ApiPython.CoreMotionEventInputFunctionArguments_CommandDistributedEnd_invert_set)

    def __init__(self):
        _WMX3ApiPython.CoreMotionEventInputFunctionArguments_CommandDistributedEnd_swiginit(self, _WMX3ApiPython.new_CoreMotionEventInputFunctionArguments_CommandDistributedEnd())
    __swig_destroy__ = _WMX3ApiPython.delete_CoreMotionEventInputFunctionArguments_CommandDistributedEnd

# Register CoreMotionEventInputFunctionArguments_CommandDistributedEnd in _WMX3ApiPython:
_WMX3ApiPython.CoreMotionEventInputFunctionArguments_CommandDistributedEnd_swigregister(CoreMotionEventInputFunctionArguments_CommandDistributedEnd)
class CoreMotionEventInputFunctionArguments_RemainingTime(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    axis = property(_WMX3ApiPython.CoreMotionEventInputFunctionArguments_RemainingTime_axis_get, _WMX3ApiPython.CoreMotionEventInputFunctionArguments_RemainingTime_axis_set)
    invert = property(_WMX3ApiPython.CoreMotionEventInputFunctionArguments_RemainingTime_invert_get, _WMX3ApiPython.CoreMotionEventInputFunctionArguments_RemainingTime_invert_set)
    timeMilliseconds = property(_WMX3ApiPython.CoreMotionEventInputFunctionArguments_RemainingTime_timeMilliseconds_get, _WMX3ApiPython.CoreMotionEventInputFunctionArguments_RemainingTime_timeMilliseconds_set)
    disableIdleAxisTrigger = property(_WMX3ApiPython.CoreMotionEventInputFunctionArguments_RemainingTime_disableIdleAxisTrigger_get, _WMX3ApiPython.CoreMotionEventInputFunctionArguments_RemainingTime_disableIdleAxisTrigger_set)

    def __init__(self):
        _WMX3ApiPython.CoreMotionEventInputFunctionArguments_RemainingTime_swiginit(self, _WMX3ApiPython.new_CoreMotionEventInputFunctionArguments_RemainingTime())
    __swig_destroy__ = _WMX3ApiPython.delete_CoreMotionEventInputFunctionArguments_RemainingTime

# Register CoreMotionEventInputFunctionArguments_RemainingTime in _WMX3ApiPython:
_WMX3ApiPython.CoreMotionEventInputFunctionArguments_RemainingTime_swigregister(CoreMotionEventInputFunctionArguments_RemainingTime)
class CoreMotionEventInputFunctionArguments_RemainingDistance(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    axis = property(_WMX3ApiPython.CoreMotionEventInputFunctionArguments_RemainingDistance_axis_get, _WMX3ApiPython.CoreMotionEventInputFunctionArguments_RemainingDistance_axis_set)
    invert = property(_WMX3ApiPython.CoreMotionEventInputFunctionArguments_RemainingDistance_invert_get, _WMX3ApiPython.CoreMotionEventInputFunctionArguments_RemainingDistance_invert_set)
    distance = property(_WMX3ApiPython.CoreMotionEventInputFunctionArguments_RemainingDistance_distance_get, _WMX3ApiPython.CoreMotionEventInputFunctionArguments_RemainingDistance_distance_set)
    disableIdleAxisTrigger = property(_WMX3ApiPython.CoreMotionEventInputFunctionArguments_RemainingDistance_disableIdleAxisTrigger_get, _WMX3ApiPython.CoreMotionEventInputFunctionArguments_RemainingDistance_disableIdleAxisTrigger_set)

    def __init__(self):
        _WMX3ApiPython.CoreMotionEventInputFunctionArguments_RemainingDistance_swiginit(self, _WMX3ApiPython.new_CoreMotionEventInputFunctionArguments_RemainingDistance())
    __swig_destroy__ = _WMX3ApiPython.delete_CoreMotionEventInputFunctionArguments_RemainingDistance

# Register CoreMotionEventInputFunctionArguments_RemainingDistance in _WMX3ApiPython:
_WMX3ApiPython.CoreMotionEventInputFunctionArguments_RemainingDistance_swigregister(CoreMotionEventInputFunctionArguments_RemainingDistance)
class CoreMotionEventInputFunctionArguments_CompletedTime(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    axis = property(_WMX3ApiPython.CoreMotionEventInputFunctionArguments_CompletedTime_axis_get, _WMX3ApiPython.CoreMotionEventInputFunctionArguments_CompletedTime_axis_set)
    invert = property(_WMX3ApiPython.CoreMotionEventInputFunctionArguments_CompletedTime_invert_get, _WMX3ApiPython.CoreMotionEventInputFunctionArguments_CompletedTime_invert_set)
    timeMilliseconds = property(_WMX3ApiPython.CoreMotionEventInputFunctionArguments_CompletedTime_timeMilliseconds_get, _WMX3ApiPython.CoreMotionEventInputFunctionArguments_CompletedTime_timeMilliseconds_set)
    disableIdleAxisTrigger = property(_WMX3ApiPython.CoreMotionEventInputFunctionArguments_CompletedTime_disableIdleAxisTrigger_get, _WMX3ApiPython.CoreMotionEventInputFunctionArguments_CompletedTime_disableIdleAxisTrigger_set)

    def __init__(self):
        _WMX3ApiPython.CoreMotionEventInputFunctionArguments_CompletedTime_swiginit(self, _WMX3ApiPython.new_CoreMotionEventInputFunctionArguments_CompletedTime())
    __swig_destroy__ = _WMX3ApiPython.delete_CoreMotionEventInputFunctionArguments_CompletedTime

# Register CoreMotionEventInputFunctionArguments_CompletedTime in _WMX3ApiPython:
_WMX3ApiPython.CoreMotionEventInputFunctionArguments_CompletedTime_swigregister(CoreMotionEventInputFunctionArguments_CompletedTime)
class CoreMotionEventInputFunctionArguments_CompletedDistance(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    axis = property(_WMX3ApiPython.CoreMotionEventInputFunctionArguments_CompletedDistance_axis_get, _WMX3ApiPython.CoreMotionEventInputFunctionArguments_CompletedDistance_axis_set)
    invert = property(_WMX3ApiPython.CoreMotionEventInputFunctionArguments_CompletedDistance_invert_get, _WMX3ApiPython.CoreMotionEventInputFunctionArguments_CompletedDistance_invert_set)
    distance = property(_WMX3ApiPython.CoreMotionEventInputFunctionArguments_CompletedDistance_distance_get, _WMX3ApiPython.CoreMotionEventInputFunctionArguments_CompletedDistance_distance_set)
    disableIdleAxisTrigger = property(_WMX3ApiPython.CoreMotionEventInputFunctionArguments_CompletedDistance_disableIdleAxisTrigger_get, _WMX3ApiPython.CoreMotionEventInputFunctionArguments_CompletedDistance_disableIdleAxisTrigger_set)

    def __init__(self):
        _WMX3ApiPython.CoreMotionEventInputFunctionArguments_CompletedDistance_swiginit(self, _WMX3ApiPython.new_CoreMotionEventInputFunctionArguments_CompletedDistance())
    __swig_destroy__ = _WMX3ApiPython.delete_CoreMotionEventInputFunctionArguments_CompletedDistance

# Register CoreMotionEventInputFunctionArguments_CompletedDistance in _WMX3ApiPython:
_WMX3ApiPython.CoreMotionEventInputFunctionArguments_CompletedDistance_swigregister(CoreMotionEventInputFunctionArguments_CompletedDistance)
class CoreMotionEventInputFunctionArguments_DistanceToTarget(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    axis = property(_WMX3ApiPython.CoreMotionEventInputFunctionArguments_DistanceToTarget_axis_get, _WMX3ApiPython.CoreMotionEventInputFunctionArguments_DistanceToTarget_axis_set)
    invert = property(_WMX3ApiPython.CoreMotionEventInputFunctionArguments_DistanceToTarget_invert_get, _WMX3ApiPython.CoreMotionEventInputFunctionArguments_DistanceToTarget_invert_set)
    distance = property(_WMX3ApiPython.CoreMotionEventInputFunctionArguments_DistanceToTarget_distance_get, _WMX3ApiPython.CoreMotionEventInputFunctionArguments_DistanceToTarget_distance_set)
    disableIdleAxisTrigger = property(_WMX3ApiPython.CoreMotionEventInputFunctionArguments_DistanceToTarget_disableIdleAxisTrigger_get, _WMX3ApiPython.CoreMotionEventInputFunctionArguments_DistanceToTarget_disableIdleAxisTrigger_set)

    def __init__(self):
        _WMX3ApiPython.CoreMotionEventInputFunctionArguments_DistanceToTarget_swiginit(self, _WMX3ApiPython.new_CoreMotionEventInputFunctionArguments_DistanceToTarget())
    __swig_destroy__ = _WMX3ApiPython.delete_CoreMotionEventInputFunctionArguments_DistanceToTarget

# Register CoreMotionEventInputFunctionArguments_DistanceToTarget in _WMX3ApiPython:
_WMX3ApiPython.CoreMotionEventInputFunctionArguments_DistanceToTarget_swigregister(CoreMotionEventInputFunctionArguments_DistanceToTarget)
class CoreMotionEventInputType(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    EqualPos = _WMX3ApiPython.CoreMotionEventInputType_EqualPos
    GreaterPos = _WMX3ApiPython.CoreMotionEventInputType_GreaterPos
    LessPos = _WMX3ApiPython.CoreMotionEventInputType_LessPos
    EqualVelocity = _WMX3ApiPython.CoreMotionEventInputType_EqualVelocity
    GreaterVelocity = _WMX3ApiPython.CoreMotionEventInputType_GreaterVelocity
    LessVelocity = _WMX3ApiPython.CoreMotionEventInputType_LessVelocity
    EqualTrq = _WMX3ApiPython.CoreMotionEventInputType_EqualTrq
    GreaterTrq = _WMX3ApiPython.CoreMotionEventInputType_GreaterTrq
    LessTrq = _WMX3ApiPython.CoreMotionEventInputType_LessTrq
    OpState = _WMX3ApiPython.CoreMotionEventInputType_OpState
    AxisCmdMode = _WMX3ApiPython.CoreMotionEventInputType_AxisCmdMode
    InPos = _WMX3ApiPython.CoreMotionEventInputType_InPos
    PosSET = _WMX3ApiPython.CoreMotionEventInputType_PosSET
    DelayedPosSET = _WMX3ApiPython.CoreMotionEventInputType_DelayedPosSET
    CommandDistributedEnd = _WMX3ApiPython.CoreMotionEventInputType_CommandDistributedEnd
    RemainingTime = _WMX3ApiPython.CoreMotionEventInputType_RemainingTime
    RemainingDistance = _WMX3ApiPython.CoreMotionEventInputType_RemainingDistance
    CompletedTime = _WMX3ApiPython.CoreMotionEventInputType_CompletedTime
    CompletedDistance = _WMX3ApiPython.CoreMotionEventInputType_CompletedDistance
    DistanceToTarget = _WMX3ApiPython.CoreMotionEventInputType_DistanceToTarget

    def __init__(self):
        _WMX3ApiPython.CoreMotionEventInputType_swiginit(self, _WMX3ApiPython.new_CoreMotionEventInputType())
    __swig_destroy__ = _WMX3ApiPython.delete_CoreMotionEventInputType

# Register CoreMotionEventInputType in _WMX3ApiPython:
_WMX3ApiPython.CoreMotionEventInputType_swigregister(CoreMotionEventInputType)
class CoreMotionEventInput(EventInput):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _WMX3ApiPython.CoreMotionEventInput_swiginit(self, _WMX3ApiPython.new_CoreMotionEventInput())

    def GetInputModuleId(self):
        return _WMX3ApiPython.CoreMotionEventInput_GetInputModuleId(self)

    def GetInputData(self, buff, buffSize, dataSize, initialState):
        return _WMX3ApiPython.CoreMotionEventInput_GetInputData(self, buff, buffSize, dataSize, initialState)

    def SetInputData(self, moduleId, data, dataSize):
        return _WMX3ApiPython.CoreMotionEventInput_SetInputData(self, moduleId, data, dataSize)
    inputFunction = property(_WMX3ApiPython.CoreMotionEventInput_inputFunction_get, _WMX3ApiPython.CoreMotionEventInput_inputFunction_set)
    equalPos = property(_WMX3ApiPython.CoreMotionEventInput_equalPos_get, _WMX3ApiPython.CoreMotionEventInput_equalPos_set)
    greaterPos = property(_WMX3ApiPython.CoreMotionEventInput_greaterPos_get, _WMX3ApiPython.CoreMotionEventInput_greaterPos_set)
    lessPos = property(_WMX3ApiPython.CoreMotionEventInput_lessPos_get, _WMX3ApiPython.CoreMotionEventInput_lessPos_set)
    equalVelocity = property(_WMX3ApiPython.CoreMotionEventInput_equalVelocity_get, _WMX3ApiPython.CoreMotionEventInput_equalVelocity_set)
    greaterVelocity = property(_WMX3ApiPython.CoreMotionEventInput_greaterVelocity_get, _WMX3ApiPython.CoreMotionEventInput_greaterVelocity_set)
    lessVelocity = property(_WMX3ApiPython.CoreMotionEventInput_lessVelocity_get, _WMX3ApiPython.CoreMotionEventInput_lessVelocity_set)
    equalTrq = property(_WMX3ApiPython.CoreMotionEventInput_equalTrq_get, _WMX3ApiPython.CoreMotionEventInput_equalTrq_set)
    greaterTrq = property(_WMX3ApiPython.CoreMotionEventInput_greaterTrq_get, _WMX3ApiPython.CoreMotionEventInput_greaterTrq_set)
    lessTrq = property(_WMX3ApiPython.CoreMotionEventInput_lessTrq_get, _WMX3ApiPython.CoreMotionEventInput_lessTrq_set)
    opState = property(_WMX3ApiPython.CoreMotionEventInput_opState_get, _WMX3ApiPython.CoreMotionEventInput_opState_set)
    axisCmdMode = property(_WMX3ApiPython.CoreMotionEventInput_axisCmdMode_get, _WMX3ApiPython.CoreMotionEventInput_axisCmdMode_set)
    inPos = property(_WMX3ApiPython.CoreMotionEventInput_inPos_get, _WMX3ApiPython.CoreMotionEventInput_inPos_set)
    posSET = property(_WMX3ApiPython.CoreMotionEventInput_posSET_get, _WMX3ApiPython.CoreMotionEventInput_posSET_set)
    delayedPosSET = property(_WMX3ApiPython.CoreMotionEventInput_delayedPosSET_get, _WMX3ApiPython.CoreMotionEventInput_delayedPosSET_set)
    commandDistributedEnd = property(_WMX3ApiPython.CoreMotionEventInput_commandDistributedEnd_get, _WMX3ApiPython.CoreMotionEventInput_commandDistributedEnd_set)
    remainingTime = property(_WMX3ApiPython.CoreMotionEventInput_remainingTime_get, _WMX3ApiPython.CoreMotionEventInput_remainingTime_set)
    remainingDistance = property(_WMX3ApiPython.CoreMotionEventInput_remainingDistance_get, _WMX3ApiPython.CoreMotionEventInput_remainingDistance_set)
    completedTime = property(_WMX3ApiPython.CoreMotionEventInput_completedTime_get, _WMX3ApiPython.CoreMotionEventInput_completedTime_set)
    completedDistance = property(_WMX3ApiPython.CoreMotionEventInput_completedDistance_get, _WMX3ApiPython.CoreMotionEventInput_completedDistance_set)
    distanceToTarget = property(_WMX3ApiPython.CoreMotionEventInput_distanceToTarget_get, _WMX3ApiPython.CoreMotionEventInput_distanceToTarget_set)
    __swig_destroy__ = _WMX3ApiPython.delete_CoreMotionEventInput

# Register CoreMotionEventInput in _WMX3ApiPython:
_WMX3ApiPython.CoreMotionEventInput_swigregister(CoreMotionEventInput)
class CoreMotionEventOutputFunctionArguments_StopSingleAxis(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    axis = property(_WMX3ApiPython.CoreMotionEventOutputFunctionArguments_StopSingleAxis_axis_get, _WMX3ApiPython.CoreMotionEventOutputFunctionArguments_StopSingleAxis_axis_set)

    def __init__(self):
        _WMX3ApiPython.CoreMotionEventOutputFunctionArguments_StopSingleAxis_swiginit(self, _WMX3ApiPython.new_CoreMotionEventOutputFunctionArguments_StopSingleAxis())
    __swig_destroy__ = _WMX3ApiPython.delete_CoreMotionEventOutputFunctionArguments_StopSingleAxis

# Register CoreMotionEventOutputFunctionArguments_StopSingleAxis in _WMX3ApiPython:
_WMX3ApiPython.CoreMotionEventOutputFunctionArguments_StopSingleAxis_swigregister(CoreMotionEventOutputFunctionArguments_StopSingleAxis)
class BaseCoreMotionEventOutputFunctionArguments_StartSingle(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    axis = property(_WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_StartSingle_axis_get, _WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_StartSingle_axis_set)
    target = property(_WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_StartSingle_target_get, _WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_StartSingle_target_set)
    type = property(_WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_StartSingle_type_get, _WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_StartSingle_type_set)
    velocity = property(_WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_StartSingle_velocity_get, _WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_StartSingle_velocity_set)
    acc = property(_WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_StartSingle_acc_get, _WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_StartSingle_acc_set)
    dec = property(_WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_StartSingle_dec_get, _WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_StartSingle_dec_set)
    jerkAcc = property(_WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_StartSingle_jerkAcc_get, _WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_StartSingle_jerkAcc_set)
    jerkDec = property(_WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_StartSingle_jerkDec_get, _WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_StartSingle_jerkDec_set)
    jerkAccRatio = property(_WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_StartSingle_jerkAccRatio_get, _WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_StartSingle_jerkAccRatio_set)
    jerkDecRatio = property(_WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_StartSingle_jerkDecRatio_get, _WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_StartSingle_jerkDecRatio_set)
    accTime = property(_WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_StartSingle_accTime_get, _WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_StartSingle_accTime_set)
    decTime = property(_WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_StartSingle_decTime_get, _WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_StartSingle_decTime_set)
    startingVelocity = property(_WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_StartSingle_startingVelocity_get, _WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_StartSingle_startingVelocity_set)
    endVelocity = property(_WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_StartSingle_endVelocity_get, _WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_StartSingle_endVelocity_set)
    secondVelocity = property(_WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_StartSingle_secondVelocity_get, _WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_StartSingle_secondVelocity_set)

    def __init__(self):
        _WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_StartSingle_swiginit(self, _WMX3ApiPython.new_BaseCoreMotionEventOutputFunctionArguments_StartSingle())
    __swig_destroy__ = _WMX3ApiPython.delete_BaseCoreMotionEventOutputFunctionArguments_StartSingle

# Register BaseCoreMotionEventOutputFunctionArguments_StartSingle in _WMX3ApiPython:
_WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_StartSingle_swigregister(BaseCoreMotionEventOutputFunctionArguments_StartSingle)
class BaseCoreMotionEventOutputFunctionArguments_StartMultiple(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    axisCount = property(_WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_StartMultiple_axisCount_get, _WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_StartMultiple_axisCount_set)
    axis = property(_WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_StartMultiple_axis_get, _WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_StartMultiple_axis_set)

    def SetAxis(self, index, value):
        return _WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_StartMultiple_SetAxis(self, index, value)

    def GetAxis(self, index):
        return _WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_StartMultiple_GetAxis(self, index)
    target = property(_WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_StartMultiple_target_get, _WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_StartMultiple_target_set)

    def SetTarget(self, index, value):
        return _WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_StartMultiple_SetTarget(self, index, value)

    def GetTarget(self, index):
        return _WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_StartMultiple_GetTarget(self, index)
    type = property(_WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_StartMultiple_type_get, _WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_StartMultiple_type_set)

    def SetType(self, index, value):
        return _WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_StartMultiple_SetType(self, index, value)

    def GetType(self, index):
        return _WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_StartMultiple_GetType(self, index)
    velocity = property(_WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_StartMultiple_velocity_get, _WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_StartMultiple_velocity_set)

    def SetVelocity(self, index, value):
        return _WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_StartMultiple_SetVelocity(self, index, value)

    def GetVelocity(self, index):
        return _WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_StartMultiple_GetVelocity(self, index)
    acc = property(_WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_StartMultiple_acc_get, _WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_StartMultiple_acc_set)

    def SetAcc(self, index, value):
        return _WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_StartMultiple_SetAcc(self, index, value)

    def GetAcc(self, index):
        return _WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_StartMultiple_GetAcc(self, index)
    dec = property(_WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_StartMultiple_dec_get, _WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_StartMultiple_dec_set)

    def SetDec(self, index, value):
        return _WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_StartMultiple_SetDec(self, index, value)

    def GetDec(self, index):
        return _WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_StartMultiple_GetDec(self, index)
    jerkAcc = property(_WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_StartMultiple_jerkAcc_get, _WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_StartMultiple_jerkAcc_set)

    def SetJerkAcc(self, index, value):
        return _WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_StartMultiple_SetJerkAcc(self, index, value)

    def GetJerkAcc(self, index):
        return _WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_StartMultiple_GetJerkAcc(self, index)
    jerkDec = property(_WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_StartMultiple_jerkDec_get, _WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_StartMultiple_jerkDec_set)

    def SetJerkDec(self, index, value):
        return _WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_StartMultiple_SetJerkDec(self, index, value)

    def GetJerkDec(self, index):
        return _WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_StartMultiple_GetJerkDec(self, index)
    jerkAccRatio = property(_WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_StartMultiple_jerkAccRatio_get, _WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_StartMultiple_jerkAccRatio_set)

    def SetJerkAccRatio(self, index, value):
        return _WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_StartMultiple_SetJerkAccRatio(self, index, value)

    def GetJerkAccRatio(self, index):
        return _WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_StartMultiple_GetJerkAccRatio(self, index)
    jerkDecRatio = property(_WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_StartMultiple_jerkDecRatio_get, _WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_StartMultiple_jerkDecRatio_set)

    def SetJerkDecRatio(self, index, value):
        return _WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_StartMultiple_SetJerkDecRatio(self, index, value)

    def GetJerkDecRatio(self, index):
        return _WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_StartMultiple_GetJerkDecRatio(self, index)
    accTime = property(_WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_StartMultiple_accTime_get, _WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_StartMultiple_accTime_set)

    def SetAccTime(self, index, value):
        return _WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_StartMultiple_SetAccTime(self, index, value)

    def GetAccTime(self, index):
        return _WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_StartMultiple_GetAccTime(self, index)
    decTime = property(_WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_StartMultiple_decTime_get, _WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_StartMultiple_decTime_set)

    def SetDecTime(self, index, value):
        return _WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_StartMultiple_SetDecTime(self, index, value)

    def GetDecTime(self, index):
        return _WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_StartMultiple_GetDecTime(self, index)
    startingVelocity = property(_WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_StartMultiple_startingVelocity_get, _WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_StartMultiple_startingVelocity_set)

    def SetStartingVelocity(self, index, value):
        return _WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_StartMultiple_SetStartingVelocity(self, index, value)

    def GetStartingVelocity(self, index):
        return _WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_StartMultiple_GetStartingVelocity(self, index)
    endVelocity = property(_WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_StartMultiple_endVelocity_get, _WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_StartMultiple_endVelocity_set)

    def SetEndVelocity(self, index, value):
        return _WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_StartMultiple_SetEndVelocity(self, index, value)

    def GetEndVelocity(self, index):
        return _WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_StartMultiple_GetEndVelocity(self, index)
    secondVelocity = property(_WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_StartMultiple_secondVelocity_get, _WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_StartMultiple_secondVelocity_set)

    def SetSecondVelocity(self, index, value):
        return _WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_StartMultiple_SetSecondVelocity(self, index, value)

    def GetSecondVelocity(self, index):
        return _WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_StartMultiple_GetSecondVelocity(self, index)

    def __init__(self):
        _WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_StartMultiple_swiginit(self, _WMX3ApiPython.new_BaseCoreMotionEventOutputFunctionArguments_StartMultiple())
    __swig_destroy__ = _WMX3ApiPython.delete_BaseCoreMotionEventOutputFunctionArguments_StartMultiple

# Register BaseCoreMotionEventOutputFunctionArguments_StartMultiple in _WMX3ApiPython:
_WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_StartMultiple_swigregister(BaseCoreMotionEventOutputFunctionArguments_StartMultiple)
class BaseCoreMotionEventOutputFunctionArguments_LinearIntpl(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    axisCount = property(_WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_LinearIntpl_axisCount_get, _WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_LinearIntpl_axisCount_set)
    axis = property(_WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_LinearIntpl_axis_get, _WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_LinearIntpl_axis_set)

    def SetAxis(self, index, value):
        return _WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_LinearIntpl_SetAxis(self, index, value)

    def GetAxis(self, index):
        return _WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_LinearIntpl_GetAxis(self, index)
    target = property(_WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_LinearIntpl_target_get, _WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_LinearIntpl_target_set)

    def SetTarget(self, index, value):
        return _WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_LinearIntpl_SetTarget(self, index, value)

    def GetTarget(self, index):
        return _WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_LinearIntpl_GetTarget(self, index)
    maxVelocity = property(_WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_LinearIntpl_maxVelocity_get, _WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_LinearIntpl_maxVelocity_set)

    def SetMaxVelocity(self, index, value):
        return _WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_LinearIntpl_SetMaxVelocity(self, index, value)

    def GetMaxVelocity(self, index):
        return _WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_LinearIntpl_GetMaxVelocity(self, index)
    maxAcc = property(_WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_LinearIntpl_maxAcc_get, _WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_LinearIntpl_maxAcc_set)

    def SetMaxAcc(self, index, value):
        return _WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_LinearIntpl_SetMaxAcc(self, index, value)

    def GetMaxAcc(self, index):
        return _WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_LinearIntpl_GetMaxAcc(self, index)
    maxDec = property(_WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_LinearIntpl_maxDec_get, _WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_LinearIntpl_maxDec_set)

    def SetMaxDec(self, index, value):
        return _WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_LinearIntpl_SetMaxDec(self, index, value)

    def GetMaxDec(self, index):
        return _WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_LinearIntpl_GetMaxDec(self, index)
    maxJerkAcc = property(_WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_LinearIntpl_maxJerkAcc_get, _WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_LinearIntpl_maxJerkAcc_set)

    def SetMaxJerkAcc(self, index, value):
        return _WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_LinearIntpl_SetMaxJerkAcc(self, index, value)

    def GetMaxJerkAcc(self, index):
        return _WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_LinearIntpl_GetMaxJerkAcc(self, index)
    maxJerkDec = property(_WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_LinearIntpl_maxJerkDec_get, _WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_LinearIntpl_maxJerkDec_set)

    def SetMaxJerkDec(self, index, value):
        return _WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_LinearIntpl_SetMaxJerkDec(self, index, value)

    def GetMaxJerkDec(self, index):
        return _WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_LinearIntpl_GetMaxJerkDec(self, index)
    type = property(_WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_LinearIntpl_type_get, _WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_LinearIntpl_type_set)
    velocity = property(_WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_LinearIntpl_velocity_get, _WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_LinearIntpl_velocity_set)
    acc = property(_WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_LinearIntpl_acc_get, _WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_LinearIntpl_acc_set)
    dec = property(_WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_LinearIntpl_dec_get, _WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_LinearIntpl_dec_set)
    jerkAcc = property(_WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_LinearIntpl_jerkAcc_get, _WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_LinearIntpl_jerkAcc_set)
    jerkDec = property(_WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_LinearIntpl_jerkDec_get, _WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_LinearIntpl_jerkDec_set)
    jerkAccRatio = property(_WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_LinearIntpl_jerkAccRatio_get, _WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_LinearIntpl_jerkAccRatio_set)
    jerkDecRatio = property(_WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_LinearIntpl_jerkDecRatio_get, _WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_LinearIntpl_jerkDecRatio_set)
    accTime = property(_WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_LinearIntpl_accTime_get, _WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_LinearIntpl_accTime_set)
    decTime = property(_WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_LinearIntpl_decTime_get, _WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_LinearIntpl_decTime_set)
    startingVelocity = property(_WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_LinearIntpl_startingVelocity_get, _WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_LinearIntpl_startingVelocity_set)
    endVelocity = property(_WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_LinearIntpl_endVelocity_get, _WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_LinearIntpl_endVelocity_set)
    secondVelocity = property(_WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_LinearIntpl_secondVelocity_get, _WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_LinearIntpl_secondVelocity_set)

    def __init__(self):
        _WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_LinearIntpl_swiginit(self, _WMX3ApiPython.new_BaseCoreMotionEventOutputFunctionArguments_LinearIntpl())
    __swig_destroy__ = _WMX3ApiPython.delete_BaseCoreMotionEventOutputFunctionArguments_LinearIntpl

# Register BaseCoreMotionEventOutputFunctionArguments_LinearIntpl in _WMX3ApiPython:
_WMX3ApiPython.BaseCoreMotionEventOutputFunctionArguments_LinearIntpl_swigregister(BaseCoreMotionEventOutputFunctionArguments_LinearIntpl)
class CoreMotionEventOutputFunctionArguments_StartSinglePos(BaseCoreMotionEventOutputFunctionArguments_StartSingle):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _WMX3ApiPython.CoreMotionEventOutputFunctionArguments_StartSinglePos_swiginit(self, _WMX3ApiPython.new_CoreMotionEventOutputFunctionArguments_StartSinglePos())
    __swig_destroy__ = _WMX3ApiPython.delete_CoreMotionEventOutputFunctionArguments_StartSinglePos

# Register CoreMotionEventOutputFunctionArguments_StartSinglePos in _WMX3ApiPython:
_WMX3ApiPython.CoreMotionEventOutputFunctionArguments_StartSinglePos_swigregister(CoreMotionEventOutputFunctionArguments_StartSinglePos)
class CoreMotionEventOutputFunctionArguments_StartSingleMov(BaseCoreMotionEventOutputFunctionArguments_StartSingle):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _WMX3ApiPython.CoreMotionEventOutputFunctionArguments_StartSingleMov_swiginit(self, _WMX3ApiPython.new_CoreMotionEventOutputFunctionArguments_StartSingleMov())
    __swig_destroy__ = _WMX3ApiPython.delete_CoreMotionEventOutputFunctionArguments_StartSingleMov

# Register CoreMotionEventOutputFunctionArguments_StartSingleMov in _WMX3ApiPython:
_WMX3ApiPython.CoreMotionEventOutputFunctionArguments_StartSingleMov_swigregister(CoreMotionEventOutputFunctionArguments_StartSingleMov)
class CoreMotionEventOutputFunctionArguments_StartMultiplePos(BaseCoreMotionEventOutputFunctionArguments_StartMultiple):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _WMX3ApiPython.CoreMotionEventOutputFunctionArguments_StartMultiplePos_swiginit(self, _WMX3ApiPython.new_CoreMotionEventOutputFunctionArguments_StartMultiplePos())
    __swig_destroy__ = _WMX3ApiPython.delete_CoreMotionEventOutputFunctionArguments_StartMultiplePos

# Register CoreMotionEventOutputFunctionArguments_StartMultiplePos in _WMX3ApiPython:
_WMX3ApiPython.CoreMotionEventOutputFunctionArguments_StartMultiplePos_swigregister(CoreMotionEventOutputFunctionArguments_StartMultiplePos)
class CoreMotionEventOutputFunctionArguments_StartMultipleMov(BaseCoreMotionEventOutputFunctionArguments_StartMultiple):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _WMX3ApiPython.CoreMotionEventOutputFunctionArguments_StartMultipleMov_swiginit(self, _WMX3ApiPython.new_CoreMotionEventOutputFunctionArguments_StartMultipleMov())
    __swig_destroy__ = _WMX3ApiPython.delete_CoreMotionEventOutputFunctionArguments_StartMultipleMov

# Register CoreMotionEventOutputFunctionArguments_StartMultipleMov in _WMX3ApiPython:
_WMX3ApiPython.CoreMotionEventOutputFunctionArguments_StartMultipleMov_swigregister(CoreMotionEventOutputFunctionArguments_StartMultipleMov)
class CoreMotionEventOutputFunctionArguments_LinearIntplPos(BaseCoreMotionEventOutputFunctionArguments_LinearIntpl):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _WMX3ApiPython.CoreMotionEventOutputFunctionArguments_LinearIntplPos_swiginit(self, _WMX3ApiPython.new_CoreMotionEventOutputFunctionArguments_LinearIntplPos())
    __swig_destroy__ = _WMX3ApiPython.delete_CoreMotionEventOutputFunctionArguments_LinearIntplPos

# Register CoreMotionEventOutputFunctionArguments_LinearIntplPos in _WMX3ApiPython:
_WMX3ApiPython.CoreMotionEventOutputFunctionArguments_LinearIntplPos_swigregister(CoreMotionEventOutputFunctionArguments_LinearIntplPos)
class CoreMotionEventOutputFunctionArguments_LinearIntplMov(BaseCoreMotionEventOutputFunctionArguments_LinearIntpl):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _WMX3ApiPython.CoreMotionEventOutputFunctionArguments_LinearIntplMov_swiginit(self, _WMX3ApiPython.new_CoreMotionEventOutputFunctionArguments_LinearIntplMov())
    __swig_destroy__ = _WMX3ApiPython.delete_CoreMotionEventOutputFunctionArguments_LinearIntplMov

# Register CoreMotionEventOutputFunctionArguments_LinearIntplMov in _WMX3ApiPython:
_WMX3ApiPython.CoreMotionEventOutputFunctionArguments_LinearIntplMov_swigregister(CoreMotionEventOutputFunctionArguments_LinearIntplMov)
class CoreMotionEventOutputFunctionArguments_ExecQuickStopSingleAxis(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    axis = property(_WMX3ApiPython.CoreMotionEventOutputFunctionArguments_ExecQuickStopSingleAxis_axis_get, _WMX3ApiPython.CoreMotionEventOutputFunctionArguments_ExecQuickStopSingleAxis_axis_set)

    def __init__(self):
        _WMX3ApiPython.CoreMotionEventOutputFunctionArguments_ExecQuickStopSingleAxis_swiginit(self, _WMX3ApiPython.new_CoreMotionEventOutputFunctionArguments_ExecQuickStopSingleAxis())
    __swig_destroy__ = _WMX3ApiPython.delete_CoreMotionEventOutputFunctionArguments_ExecQuickStopSingleAxis

# Register CoreMotionEventOutputFunctionArguments_ExecQuickStopSingleAxis in _WMX3ApiPython:
_WMX3ApiPython.CoreMotionEventOutputFunctionArguments_ExecQuickStopSingleAxis_swigregister(CoreMotionEventOutputFunctionArguments_ExecQuickStopSingleAxis)
class CoreMotionEventOutputFunctionArguments_OverrideVelSingleAxis(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    axis = property(_WMX3ApiPython.CoreMotionEventOutputFunctionArguments_OverrideVelSingleAxis_axis_get, _WMX3ApiPython.CoreMotionEventOutputFunctionArguments_OverrideVelSingleAxis_axis_set)
    velocity = property(_WMX3ApiPython.CoreMotionEventOutputFunctionArguments_OverrideVelSingleAxis_velocity_get, _WMX3ApiPython.CoreMotionEventOutputFunctionArguments_OverrideVelSingleAxis_velocity_set)

    def __init__(self):
        _WMX3ApiPython.CoreMotionEventOutputFunctionArguments_OverrideVelSingleAxis_swiginit(self, _WMX3ApiPython.new_CoreMotionEventOutputFunctionArguments_OverrideVelSingleAxis())
    __swig_destroy__ = _WMX3ApiPython.delete_CoreMotionEventOutputFunctionArguments_OverrideVelSingleAxis

# Register CoreMotionEventOutputFunctionArguments_OverrideVelSingleAxis in _WMX3ApiPython:
_WMX3ApiPython.CoreMotionEventOutputFunctionArguments_OverrideVelSingleAxis_swigregister(CoreMotionEventOutputFunctionArguments_OverrideVelSingleAxis)
class CoreMotionEventOutputFunctionArguments_ExecEStop(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    eStopLevel = property(_WMX3ApiPython.CoreMotionEventOutputFunctionArguments_ExecEStop_eStopLevel_get, _WMX3ApiPython.CoreMotionEventOutputFunctionArguments_ExecEStop_eStopLevel_set)

    def __init__(self):
        _WMX3ApiPython.CoreMotionEventOutputFunctionArguments_ExecEStop_swiginit(self, _WMX3ApiPython.new_CoreMotionEventOutputFunctionArguments_ExecEStop())
    __swig_destroy__ = _WMX3ApiPython.delete_CoreMotionEventOutputFunctionArguments_ExecEStop

# Register CoreMotionEventOutputFunctionArguments_ExecEStop in _WMX3ApiPython:
_WMX3ApiPython.CoreMotionEventOutputFunctionArguments_ExecEStop_swigregister(CoreMotionEventOutputFunctionArguments_ExecEStop)
class CoreMotionEventOutputFunctionArguments_TriggerFlightRecorder(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    reserved = property(_WMX3ApiPython.CoreMotionEventOutputFunctionArguments_TriggerFlightRecorder_reserved_get, _WMX3ApiPython.CoreMotionEventOutputFunctionArguments_TriggerFlightRecorder_reserved_set)

    def __init__(self):
        _WMX3ApiPython.CoreMotionEventOutputFunctionArguments_TriggerFlightRecorder_swiginit(self, _WMX3ApiPython.new_CoreMotionEventOutputFunctionArguments_TriggerFlightRecorder())
    __swig_destroy__ = _WMX3ApiPython.delete_CoreMotionEventOutputFunctionArguments_TriggerFlightRecorder

# Register CoreMotionEventOutputFunctionArguments_TriggerFlightRecorder in _WMX3ApiPython:
_WMX3ApiPython.CoreMotionEventOutputFunctionArguments_TriggerFlightRecorder_swigregister(CoreMotionEventOutputFunctionArguments_TriggerFlightRecorder)
class CoreMotionEventOutputFunctionArguments_ResetFlightRecorder(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    reserved = property(_WMX3ApiPython.CoreMotionEventOutputFunctionArguments_ResetFlightRecorder_reserved_get, _WMX3ApiPython.CoreMotionEventOutputFunctionArguments_ResetFlightRecorder_reserved_set)

    def __init__(self):
        _WMX3ApiPython.CoreMotionEventOutputFunctionArguments_ResetFlightRecorder_swiginit(self, _WMX3ApiPython.new_CoreMotionEventOutputFunctionArguments_ResetFlightRecorder())
    __swig_destroy__ = _WMX3ApiPython.delete_CoreMotionEventOutputFunctionArguments_ResetFlightRecorder

# Register CoreMotionEventOutputFunctionArguments_ResetFlightRecorder in _WMX3ApiPython:
_WMX3ApiPython.CoreMotionEventOutputFunctionArguments_ResetFlightRecorder_swigregister(CoreMotionEventOutputFunctionArguments_ResetFlightRecorder)
class CoreMotionEventOutputType(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    StopSingleAxis = _WMX3ApiPython.CoreMotionEventOutputType_StopSingleAxis
    StartSinglePos = _WMX3ApiPython.CoreMotionEventOutputType_StartSinglePos
    StartSingleMov = _WMX3ApiPython.CoreMotionEventOutputType_StartSingleMov
    StartMultiplePos = _WMX3ApiPython.CoreMotionEventOutputType_StartMultiplePos
    StartMultipleMov = _WMX3ApiPython.CoreMotionEventOutputType_StartMultipleMov
    LinearIntplPos = _WMX3ApiPython.CoreMotionEventOutputType_LinearIntplPos
    LinearIntplMov = _WMX3ApiPython.CoreMotionEventOutputType_LinearIntplMov
    ExecQuickStopSingleAxis = _WMX3ApiPython.CoreMotionEventOutputType_ExecQuickStopSingleAxis
    OverrideVelSingleAxis = _WMX3ApiPython.CoreMotionEventOutputType_OverrideVelSingleAxis
    ExecEStop = _WMX3ApiPython.CoreMotionEventOutputType_ExecEStop
    TriggerFlightRecorder = _WMX3ApiPython.CoreMotionEventOutputType_TriggerFlightRecorder
    ResetFlightRecorder = _WMX3ApiPython.CoreMotionEventOutputType_ResetFlightRecorder

    def __init__(self):
        _WMX3ApiPython.CoreMotionEventOutputType_swiginit(self, _WMX3ApiPython.new_CoreMotionEventOutputType())
    __swig_destroy__ = _WMX3ApiPython.delete_CoreMotionEventOutputType

# Register CoreMotionEventOutputType in _WMX3ApiPython:
_WMX3ApiPython.CoreMotionEventOutputType_swigregister(CoreMotionEventOutputType)
class CoreMotionEventOutput(EventOutput):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _WMX3ApiPython.CoreMotionEventOutput_swiginit(self, _WMX3ApiPython.new_CoreMotionEventOutput())

    def GetOutputModuleId(self):
        return _WMX3ApiPython.CoreMotionEventOutput_GetOutputModuleId(self)

    def GetOutputData(self, buff, buffSize, dataSize):
        return _WMX3ApiPython.CoreMotionEventOutput_GetOutputData(self, buff, buffSize, dataSize)

    def SetOutputData(self, moduleId, data, dataSize):
        return _WMX3ApiPython.CoreMotionEventOutput_SetOutputData(self, moduleId, data, dataSize)
    type = property(_WMX3ApiPython.CoreMotionEventOutput_type_get, _WMX3ApiPython.CoreMotionEventOutput_type_set)
    stopSingleAxis = property(_WMX3ApiPython.CoreMotionEventOutput_stopSingleAxis_get, _WMX3ApiPython.CoreMotionEventOutput_stopSingleAxis_set)
    startSinglePos = property(_WMX3ApiPython.CoreMotionEventOutput_startSinglePos_get, _WMX3ApiPython.CoreMotionEventOutput_startSinglePos_set)
    startSingleMov = property(_WMX3ApiPython.CoreMotionEventOutput_startSingleMov_get, _WMX3ApiPython.CoreMotionEventOutput_startSingleMov_set)
    startMultiplePos = property(_WMX3ApiPython.CoreMotionEventOutput_startMultiplePos_get, _WMX3ApiPython.CoreMotionEventOutput_startMultiplePos_set)
    startMultipleMov = property(_WMX3ApiPython.CoreMotionEventOutput_startMultipleMov_get, _WMX3ApiPython.CoreMotionEventOutput_startMultipleMov_set)
    linearIntplPos = property(_WMX3ApiPython.CoreMotionEventOutput_linearIntplPos_get, _WMX3ApiPython.CoreMotionEventOutput_linearIntplPos_set)
    linearIntplMov = property(_WMX3ApiPython.CoreMotionEventOutput_linearIntplMov_get, _WMX3ApiPython.CoreMotionEventOutput_linearIntplMov_set)
    execQuickStopSingleAxis = property(_WMX3ApiPython.CoreMotionEventOutput_execQuickStopSingleAxis_get, _WMX3ApiPython.CoreMotionEventOutput_execQuickStopSingleAxis_set)
    overrideVelSingleAxis = property(_WMX3ApiPython.CoreMotionEventOutput_overrideVelSingleAxis_get, _WMX3ApiPython.CoreMotionEventOutput_overrideVelSingleAxis_set)
    execEStop = property(_WMX3ApiPython.CoreMotionEventOutput_execEStop_get, _WMX3ApiPython.CoreMotionEventOutput_execEStop_set)
    triggerFlightRecorder = property(_WMX3ApiPython.CoreMotionEventOutput_triggerFlightRecorder_get, _WMX3ApiPython.CoreMotionEventOutput_triggerFlightRecorder_set)
    resetFlightRecorder = property(_WMX3ApiPython.CoreMotionEventOutput_resetFlightRecorder_get, _WMX3ApiPython.CoreMotionEventOutput_resetFlightRecorder_set)
    __swig_destroy__ = _WMX3ApiPython.delete_CoreMotionEventOutput

# Register CoreMotionEventOutput in _WMX3ApiPython:
_WMX3ApiPython.CoreMotionEventOutput_swigregister(CoreMotionEventOutput)
class HomeState(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Idle = _WMX3ApiPython.HomeState_Idle
    ZPulseSearch = _WMX3ApiPython.HomeState_ZPulseSearch
    ZPulseSearchReverse = _WMX3ApiPython.HomeState_ZPulseSearchReverse
    ZPulseSearchPauseReverse = _WMX3ApiPython.HomeState_ZPulseSearchPauseReverse
    HSSearch = _WMX3ApiPython.HomeState_HSSearch
    HSSearchPause = _WMX3ApiPython.HomeState_HSSearchPause
    HSAndZPulseSearch = _WMX3ApiPython.HomeState_HSAndZPulseSearch
    HSAndZPulseSearchPause = _WMX3ApiPython.HomeState_HSAndZPulseSearchPause
    HSOffSearch = _WMX3ApiPython.HomeState_HSOffSearch
    HSOffSearchPause = _WMX3ApiPython.HomeState_HSOffSearchPause
    HSOffAndZPulseSearch = _WMX3ApiPython.HomeState_HSOffAndZPulseSearch
    HSOffAndZPulseSearchPause = _WMX3ApiPython.HomeState_HSOffAndZPulseSearchPause
    LSSearch = _WMX3ApiPython.HomeState_LSSearch
    LSSearchPause = _WMX3ApiPython.HomeState_LSSearchPause
    HSClearReverse = _WMX3ApiPython.HomeState_HSClearReverse
    HSClearReversePause = _WMX3ApiPython.HomeState_HSClearReversePause
    HSFallingEdgeSearchReverse = _WMX3ApiPython.HomeState_HSFallingEdgeSearchReverse
    HSFallingEdgeSearchReversePause = _WMX3ApiPython.HomeState_HSFallingEdgeSearchReversePause
    LSFallingEdgeSearchReverse = _WMX3ApiPython.HomeState_LSFallingEdgeSearchReverse
    LSFallingEdgeSearchReversePause = _WMX3ApiPython.HomeState_LSFallingEdgeSearchReversePause
    TouchProbeSearch = _WMX3ApiPython.HomeState_TouchProbeSearch
    TouchProbeSearchPause = _WMX3ApiPython.HomeState_TouchProbeSearchPause
    SecondHSSearch = _WMX3ApiPython.HomeState_SecondHSSearch
    SecondHSSearchPause = _WMX3ApiPython.HomeState_SecondHSSearchPause
    SecondTouchProbeSearch = _WMX3ApiPython.HomeState_SecondTouchProbeSearch
    SecondTouchProbeSearchPause = _WMX3ApiPython.HomeState_SecondTouchProbeSearchPause
    MechanicalEndDetection = _WMX3ApiPython.HomeState_MechanicalEndDetection
    HomeShift = _WMX3ApiPython.HomeState_HomeShift
    HomeShiftPause = _WMX3ApiPython.HomeState_HomeShiftPause
    Cancel = _WMX3ApiPython.HomeState_Cancel

    def __init__(self):
        _WMX3ApiPython.HomeState_swiginit(self, _WMX3ApiPython.new_HomeState())
    __swig_destroy__ = _WMX3ApiPython.delete_HomeState

# Register HomeState in _WMX3ApiPython:
_WMX3ApiPython.HomeState_swigregister(HomeState)
class HomeError(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    NoError = _WMX3ApiPython.HomeError_NoError
    LSTriggered = _WMX3ApiPython.HomeError_LSTriggered
    MaxLSRevDistanceTraveled = _WMX3ApiPython.HomeError_MaxLSRevDistanceTraveled
    MaxHSOnAtStartRevDistanceTraveled = _WMX3ApiPython.HomeError_MaxHSOnAtStartRevDistanceTraveled
    ZPulseDistanceCheckError = _WMX3ApiPython.HomeError_ZPulseDistanceCheckError

    def __init__(self):
        _WMX3ApiPython.HomeError_swiginit(self, _WMX3ApiPython.new_HomeError())
    __swig_destroy__ = _WMX3ApiPython.delete_HomeError

# Register HomeError in _WMX3ApiPython:
_WMX3ApiPython.HomeError_swigregister(HomeError)
class AxisSyncMode(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    NoSync = _WMX3ApiPython.AxisSyncMode_NoSync
    NoOffset = _WMX3ApiPython.AxisSyncMode_NoOffset
    VelocityOffset = _WMX3ApiPython.AxisSyncMode_VelocityOffset
    SymmetricVelocityOffset = _WMX3ApiPython.AxisSyncMode_SymmetricVelocityOffset

    def __init__(self):
        _WMX3ApiPython.AxisSyncMode_swiginit(self, _WMX3ApiPython.new_AxisSyncMode())
    __swig_destroy__ = _WMX3ApiPython.delete_AxisSyncMode

# Register AxisSyncMode in _WMX3ApiPython:
_WMX3ApiPython.AxisSyncMode_swigregister(AxisSyncMode)
class AxisCompensation(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def SetData(self, pAxisCompensation):
        return _WMX3ApiPython.AxisCompensation_SetData(self, pAxisCompensation)

    def GetData(self, pAxisCompensation):
        return _WMX3ApiPython.AxisCompensation_GetData(self, pAxisCompensation)
    pitchErrorCompensation = property(_WMX3ApiPython.AxisCompensation_pitchErrorCompensation_get, _WMX3ApiPython.AxisCompensation_pitchErrorCompensation_set)
    pitchErrorCompensation2D = property(_WMX3ApiPython.AxisCompensation_pitchErrorCompensation2D_get, _WMX3ApiPython.AxisCompensation_pitchErrorCompensation2D_set)
    backlashCompensation = property(_WMX3ApiPython.AxisCompensation_backlashCompensation_get, _WMX3ApiPython.AxisCompensation_backlashCompensation_set)
    totalPosCompensation = property(_WMX3ApiPython.AxisCompensation_totalPosCompensation_get, _WMX3ApiPython.AxisCompensation_totalPosCompensation_set)

    def __init__(self):
        _WMX3ApiPython.AxisCompensation_swiginit(self, _WMX3ApiPython.new_AxisCompensation())
    __swig_destroy__ = _WMX3ApiPython.delete_AxisCompensation

# Register AxisCompensation in _WMX3ApiPython:
_WMX3ApiPython.AxisCompensation_swigregister(AxisCompensation)
class AxisSupportedFunction(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def SetData(self, pAxisSupportedFunction):
        return _WMX3ApiPython.AxisSupportedFunction_SetData(self, pAxisSupportedFunction)

    def GetData(self, pAxisSupportedFunction):
        return _WMX3ApiPython.AxisSupportedFunction_GetData(self, pAxisSupportedFunction)
    posFeedbackSupport = property(_WMX3ApiPython.AxisSupportedFunction_posFeedbackSupport_get, _WMX3ApiPython.AxisSupportedFunction_posFeedbackSupport_set)
    posCommandSupport = property(_WMX3ApiPython.AxisSupportedFunction_posCommandSupport_get, _WMX3ApiPython.AxisSupportedFunction_posCommandSupport_set)
    velocityFeedbackSupport = property(_WMX3ApiPython.AxisSupportedFunction_velocityFeedbackSupport_get, _WMX3ApiPython.AxisSupportedFunction_velocityFeedbackSupport_set)
    velocityCommandSupport = property(_WMX3ApiPython.AxisSupportedFunction_velocityCommandSupport_get, _WMX3ApiPython.AxisSupportedFunction_velocityCommandSupport_set)
    velocityOffsetSupport = property(_WMX3ApiPython.AxisSupportedFunction_velocityOffsetSupport_get, _WMX3ApiPython.AxisSupportedFunction_velocityOffsetSupport_set)
    trqFeedbackSupport = property(_WMX3ApiPython.AxisSupportedFunction_trqFeedbackSupport_get, _WMX3ApiPython.AxisSupportedFunction_trqFeedbackSupport_set)
    trqCommandSupport = property(_WMX3ApiPython.AxisSupportedFunction_trqCommandSupport_get, _WMX3ApiPython.AxisSupportedFunction_trqCommandSupport_set)
    maxTrqLimitSupport = property(_WMX3ApiPython.AxisSupportedFunction_maxTrqLimitSupport_get, _WMX3ApiPython.AxisSupportedFunction_maxTrqLimitSupport_set)
    positiveTrqLimitSupport = property(_WMX3ApiPython.AxisSupportedFunction_positiveTrqLimitSupport_get, _WMX3ApiPython.AxisSupportedFunction_positiveTrqLimitSupport_set)
    negativeTrqLimitSupport = property(_WMX3ApiPython.AxisSupportedFunction_negativeTrqLimitSupport_get, _WMX3ApiPython.AxisSupportedFunction_negativeTrqLimitSupport_set)
    maxMotorSpeedSupport = property(_WMX3ApiPython.AxisSupportedFunction_maxMotorSpeedSupport_get, _WMX3ApiPython.AxisSupportedFunction_maxMotorSpeedSupport_set)

    def __init__(self):
        _WMX3ApiPython.AxisSupportedFunction_swiginit(self, _WMX3ApiPython.new_AxisSupportedFunction())
    __swig_destroy__ = _WMX3ApiPython.delete_AxisSupportedFunction

# Register AxisSupportedFunction in _WMX3ApiPython:
_WMX3ApiPython.AxisSupportedFunction_swigregister(AxisSupportedFunction)
class CoreMotionAxisStatus(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def SetData(self, pAxisStatus):
        return _WMX3ApiPython.CoreMotionAxisStatus_SetData(self, pAxisStatus)

    def GetData(self, pAxisStatus):
        return _WMX3ApiPython.CoreMotionAxisStatus_GetData(self, pAxisStatus)
    servoOn = property(_WMX3ApiPython.CoreMotionAxisStatus_servoOn_get, _WMX3ApiPython.CoreMotionAxisStatus_servoOn_set)
    servoOffline = property(_WMX3ApiPython.CoreMotionAxisStatus_servoOffline_get, _WMX3ApiPython.CoreMotionAxisStatus_servoOffline_set)
    ampAlarm = property(_WMX3ApiPython.CoreMotionAxisStatus_ampAlarm_get, _WMX3ApiPython.CoreMotionAxisStatus_ampAlarm_set)
    ampAlarmCode = property(_WMX3ApiPython.CoreMotionAxisStatus_ampAlarmCode_get, _WMX3ApiPython.CoreMotionAxisStatus_ampAlarmCode_set)
    masterAxis = property(_WMX3ApiPython.CoreMotionAxisStatus_masterAxis_get, _WMX3ApiPython.CoreMotionAxisStatus_masterAxis_set)
    secondMasterAxis = property(_WMX3ApiPython.CoreMotionAxisStatus_secondMasterAxis_get, _WMX3ApiPython.CoreMotionAxisStatus_secondMasterAxis_set)
    posCmd = property(_WMX3ApiPython.CoreMotionAxisStatus_posCmd_get, _WMX3ApiPython.CoreMotionAxisStatus_posCmd_set)
    actualPos = property(_WMX3ApiPython.CoreMotionAxisStatus_actualPos_get, _WMX3ApiPython.CoreMotionAxisStatus_actualPos_set)
    compPosCmd = property(_WMX3ApiPython.CoreMotionAxisStatus_compPosCmd_get, _WMX3ApiPython.CoreMotionAxisStatus_compPosCmd_set)
    compActualPos = property(_WMX3ApiPython.CoreMotionAxisStatus_compActualPos_get, _WMX3ApiPython.CoreMotionAxisStatus_compActualPos_set)
    syncPosCmd = property(_WMX3ApiPython.CoreMotionAxisStatus_syncPosCmd_get, _WMX3ApiPython.CoreMotionAxisStatus_syncPosCmd_set)
    syncActualPos = property(_WMX3ApiPython.CoreMotionAxisStatus_syncActualPos_get, _WMX3ApiPython.CoreMotionAxisStatus_syncActualPos_set)
    encoderCommand = property(_WMX3ApiPython.CoreMotionAxisStatus_encoderCommand_get, _WMX3ApiPython.CoreMotionAxisStatus_encoderCommand_set)
    encoderFeedback = property(_WMX3ApiPython.CoreMotionAxisStatus_encoderFeedback_get, _WMX3ApiPython.CoreMotionAxisStatus_encoderFeedback_set)
    accumulatedEncoderFeedback = property(_WMX3ApiPython.CoreMotionAxisStatus_accumulatedEncoderFeedback_get, _WMX3ApiPython.CoreMotionAxisStatus_accumulatedEncoderFeedback_set)
    velocityCmd = property(_WMX3ApiPython.CoreMotionAxisStatus_velocityCmd_get, _WMX3ApiPython.CoreMotionAxisStatus_velocityCmd_set)
    actualVelocity = property(_WMX3ApiPython.CoreMotionAxisStatus_actualVelocity_get, _WMX3ApiPython.CoreMotionAxisStatus_actualVelocity_set)
    velocityLag = property(_WMX3ApiPython.CoreMotionAxisStatus_velocityLag_get, _WMX3ApiPython.CoreMotionAxisStatus_velocityLag_set)
    torqueCmd = property(_WMX3ApiPython.CoreMotionAxisStatus_torqueCmd_get, _WMX3ApiPython.CoreMotionAxisStatus_torqueCmd_set)
    actualTorque = property(_WMX3ApiPython.CoreMotionAxisStatus_actualTorque_get, _WMX3ApiPython.CoreMotionAxisStatus_actualTorque_set)
    actualFollowingError = property(_WMX3ApiPython.CoreMotionAxisStatus_actualFollowingError_get, _WMX3ApiPython.CoreMotionAxisStatus_actualFollowingError_set)
    compensation = property(_WMX3ApiPython.CoreMotionAxisStatus_compensation_get, _WMX3ApiPython.CoreMotionAxisStatus_compensation_set)
    axisSupportedFunction = property(_WMX3ApiPython.CoreMotionAxisStatus_axisSupportedFunction_get, _WMX3ApiPython.CoreMotionAxisStatus_axisSupportedFunction_set)
    opState = property(_WMX3ApiPython.CoreMotionAxisStatus_opState_get, _WMX3ApiPython.CoreMotionAxisStatus_opState_set)
    detailOpState = property(_WMX3ApiPython.CoreMotionAxisStatus_detailOpState_get, _WMX3ApiPython.CoreMotionAxisStatus_detailOpState_set)
    axisCommandMode = property(_WMX3ApiPython.CoreMotionAxisStatus_axisCommandMode_get, _WMX3ApiPython.CoreMotionAxisStatus_axisCommandMode_set)
    axisCommandModeFeedback = property(_WMX3ApiPython.CoreMotionAxisStatus_axisCommandModeFeedback_get, _WMX3ApiPython.CoreMotionAxisStatus_axisCommandModeFeedback_set)
    axisSyncMode = property(_WMX3ApiPython.CoreMotionAxisStatus_axisSyncMode_get, _WMX3ApiPython.CoreMotionAxisStatus_axisSyncMode_set)
    syncOffset = property(_WMX3ApiPython.CoreMotionAxisStatus_syncOffset_get, _WMX3ApiPython.CoreMotionAxisStatus_syncOffset_set)
    syncPhaseOffset = property(_WMX3ApiPython.CoreMotionAxisStatus_syncPhaseOffset_get, _WMX3ApiPython.CoreMotionAxisStatus_syncPhaseOffset_set)
    syncGearRatio = property(_WMX3ApiPython.CoreMotionAxisStatus_syncGearRatio_get, _WMX3ApiPython.CoreMotionAxisStatus_syncGearRatio_set)
    followingErrorAlarm = property(_WMX3ApiPython.CoreMotionAxisStatus_followingErrorAlarm_get, _WMX3ApiPython.CoreMotionAxisStatus_followingErrorAlarm_set)
    commandReady = property(_WMX3ApiPython.CoreMotionAxisStatus_commandReady_get, _WMX3ApiPython.CoreMotionAxisStatus_commandReady_set)
    waitingForTrigger = property(_WMX3ApiPython.CoreMotionAxisStatus_waitingForTrigger_get, _WMX3ApiPython.CoreMotionAxisStatus_waitingForTrigger_set)
    motionPaused = property(_WMX3ApiPython.CoreMotionAxisStatus_motionPaused_get, _WMX3ApiPython.CoreMotionAxisStatus_motionPaused_set)
    motionComplete = property(_WMX3ApiPython.CoreMotionAxisStatus_motionComplete_get, _WMX3ApiPython.CoreMotionAxisStatus_motionComplete_set)
    profileTotalMilliseconds = property(_WMX3ApiPython.CoreMotionAxisStatus_profileTotalMilliseconds_get, _WMX3ApiPython.CoreMotionAxisStatus_profileTotalMilliseconds_set)
    profileAccMilliseconds = property(_WMX3ApiPython.CoreMotionAxisStatus_profileAccMilliseconds_get, _WMX3ApiPython.CoreMotionAxisStatus_profileAccMilliseconds_set)
    profileCruiseMilliseconds = property(_WMX3ApiPython.CoreMotionAxisStatus_profileCruiseMilliseconds_get, _WMX3ApiPython.CoreMotionAxisStatus_profileCruiseMilliseconds_set)
    profileDecMilliseconds = property(_WMX3ApiPython.CoreMotionAxisStatus_profileDecMilliseconds_get, _WMX3ApiPython.CoreMotionAxisStatus_profileDecMilliseconds_set)
    profileRemainingMilliseconds = property(_WMX3ApiPython.CoreMotionAxisStatus_profileRemainingMilliseconds_get, _WMX3ApiPython.CoreMotionAxisStatus_profileRemainingMilliseconds_set)
    profileCompletedMilliseconds = property(_WMX3ApiPython.CoreMotionAxisStatus_profileCompletedMilliseconds_get, _WMX3ApiPython.CoreMotionAxisStatus_profileCompletedMilliseconds_set)
    profileTargetPos = property(_WMX3ApiPython.CoreMotionAxisStatus_profileTargetPos_get, _WMX3ApiPython.CoreMotionAxisStatus_profileTargetPos_set)
    profileTotalDistance = property(_WMX3ApiPython.CoreMotionAxisStatus_profileTotalDistance_get, _WMX3ApiPython.CoreMotionAxisStatus_profileTotalDistance_set)
    profileRemainingDistance = property(_WMX3ApiPython.CoreMotionAxisStatus_profileRemainingDistance_get, _WMX3ApiPython.CoreMotionAxisStatus_profileRemainingDistance_set)
    profileCompletedDistance = property(_WMX3ApiPython.CoreMotionAxisStatus_profileCompletedDistance_get, _WMX3ApiPython.CoreMotionAxisStatus_profileCompletedDistance_set)
    intplVelocity = property(_WMX3ApiPython.CoreMotionAxisStatus_intplVelocity_get, _WMX3ApiPython.CoreMotionAxisStatus_intplVelocity_set)
    intplSegment = property(_WMX3ApiPython.CoreMotionAxisStatus_intplSegment_get, _WMX3ApiPython.CoreMotionAxisStatus_intplSegment_set)
    cmdAcc = property(_WMX3ApiPython.CoreMotionAxisStatus_cmdAcc_get, _WMX3ApiPython.CoreMotionAxisStatus_cmdAcc_set)
    accFlag = property(_WMX3ApiPython.CoreMotionAxisStatus_accFlag_get, _WMX3ApiPython.CoreMotionAxisStatus_accFlag_set)
    decFlag = property(_WMX3ApiPython.CoreMotionAxisStatus_decFlag_get, _WMX3ApiPython.CoreMotionAxisStatus_decFlag_set)
    inPos = property(_WMX3ApiPython.CoreMotionAxisStatus_inPos_get, _WMX3ApiPython.CoreMotionAxisStatus_inPos_set)
    inPos2 = property(_WMX3ApiPython.CoreMotionAxisStatus_inPos2_get, _WMX3ApiPython.CoreMotionAxisStatus_inPos2_set)
    inPos3 = property(_WMX3ApiPython.CoreMotionAxisStatus_inPos3_get, _WMX3ApiPython.CoreMotionAxisStatus_inPos3_set)
    inPos4 = property(_WMX3ApiPython.CoreMotionAxisStatus_inPos4_get, _WMX3ApiPython.CoreMotionAxisStatus_inPos4_set)
    inPos5 = property(_WMX3ApiPython.CoreMotionAxisStatus_inPos5_get, _WMX3ApiPython.CoreMotionAxisStatus_inPos5_set)
    cmdDistributionEnd = property(_WMX3ApiPython.CoreMotionAxisStatus_cmdDistributionEnd_get, _WMX3ApiPython.CoreMotionAxisStatus_cmdDistributionEnd_set)
    posSet = property(_WMX3ApiPython.CoreMotionAxisStatus_posSet_get, _WMX3ApiPython.CoreMotionAxisStatus_posSet_set)
    delayedPosSet = property(_WMX3ApiPython.CoreMotionAxisStatus_delayedPosSet_get, _WMX3ApiPython.CoreMotionAxisStatus_delayedPosSet_set)
    cmdDistributionEndDelayedPosSetDiff = property(_WMX3ApiPython.CoreMotionAxisStatus_cmdDistributionEndDelayedPosSetDiff_get, _WMX3ApiPython.CoreMotionAxisStatus_cmdDistributionEndDelayedPosSetDiff_set)
    positiveLS = property(_WMX3ApiPython.CoreMotionAxisStatus_positiveLS_get, _WMX3ApiPython.CoreMotionAxisStatus_positiveLS_set)
    negativeLS = property(_WMX3ApiPython.CoreMotionAxisStatus_negativeLS_get, _WMX3ApiPython.CoreMotionAxisStatus_negativeLS_set)
    nearPositiveLS = property(_WMX3ApiPython.CoreMotionAxisStatus_nearPositiveLS_get, _WMX3ApiPython.CoreMotionAxisStatus_nearPositiveLS_set)
    nearNegativeLS = property(_WMX3ApiPython.CoreMotionAxisStatus_nearNegativeLS_get, _WMX3ApiPython.CoreMotionAxisStatus_nearNegativeLS_set)
    externalPositiveLS = property(_WMX3ApiPython.CoreMotionAxisStatus_externalPositiveLS_get, _WMX3ApiPython.CoreMotionAxisStatus_externalPositiveLS_set)
    externalNegativeLS = property(_WMX3ApiPython.CoreMotionAxisStatus_externalNegativeLS_get, _WMX3ApiPython.CoreMotionAxisStatus_externalNegativeLS_set)
    positiveSoftLimit = property(_WMX3ApiPython.CoreMotionAxisStatus_positiveSoftLimit_get, _WMX3ApiPython.CoreMotionAxisStatus_positiveSoftLimit_set)
    negativeSoftLimit = property(_WMX3ApiPython.CoreMotionAxisStatus_negativeSoftLimit_get, _WMX3ApiPython.CoreMotionAxisStatus_negativeSoftLimit_set)
    homeState = property(_WMX3ApiPython.CoreMotionAxisStatus_homeState_get, _WMX3ApiPython.CoreMotionAxisStatus_homeState_set)
    homeError = property(_WMX3ApiPython.CoreMotionAxisStatus_homeError_get, _WMX3ApiPython.CoreMotionAxisStatus_homeError_set)
    homeSwitch = property(_WMX3ApiPython.CoreMotionAxisStatus_homeSwitch_get, _WMX3ApiPython.CoreMotionAxisStatus_homeSwitch_set)
    homeDone = property(_WMX3ApiPython.CoreMotionAxisStatus_homeDone_get, _WMX3ApiPython.CoreMotionAxisStatus_homeDone_set)
    homePaused = property(_WMX3ApiPython.CoreMotionAxisStatus_homePaused_get, _WMX3ApiPython.CoreMotionAxisStatus_homePaused_set)
    homeOffset = property(_WMX3ApiPython.CoreMotionAxisStatus_homeOffset_get, _WMX3ApiPython.CoreMotionAxisStatus_homeOffset_set)
    cmdPosToFbPosFlag = property(_WMX3ApiPython.CoreMotionAxisStatus_cmdPosToFbPosFlag_get, _WMX3ApiPython.CoreMotionAxisStatus_cmdPosToFbPosFlag_set)
    execSuperimposedMotion = property(_WMX3ApiPython.CoreMotionAxisStatus_execSuperimposedMotion_get, _WMX3ApiPython.CoreMotionAxisStatus_execSuperimposedMotion_set)
    singleTurnCounter = property(_WMX3ApiPython.CoreMotionAxisStatus_singleTurnCounter_get, _WMX3ApiPython.CoreMotionAxisStatus_singleTurnCounter_set)
    userOffset = property(_WMX3ApiPython.CoreMotionAxisStatus_userOffset_get, _WMX3ApiPython.CoreMotionAxisStatus_userOffset_set)
    userOffsetPosCmd = property(_WMX3ApiPython.CoreMotionAxisStatus_userOffsetPosCmd_get, _WMX3ApiPython.CoreMotionAxisStatus_userOffsetPosCmd_set)
    userOffsetActualPos = property(_WMX3ApiPython.CoreMotionAxisStatus_userOffsetActualPos_get, _WMX3ApiPython.CoreMotionAxisStatus_userOffsetActualPos_set)
    userVelocityOffset = property(_WMX3ApiPython.CoreMotionAxisStatus_userVelocityOffset_get, _WMX3ApiPython.CoreMotionAxisStatus_userVelocityOffset_set)
    userTorqueOffset = property(_WMX3ApiPython.CoreMotionAxisStatus_userTorqueOffset_get, _WMX3ApiPython.CoreMotionAxisStatus_userTorqueOffset_set)
    vibrationPosMin = property(_WMX3ApiPython.CoreMotionAxisStatus_vibrationPosMin_get, _WMX3ApiPython.CoreMotionAxisStatus_vibrationPosMin_set)
    vibrationPosMax = property(_WMX3ApiPython.CoreMotionAxisStatus_vibrationPosMax_get, _WMX3ApiPython.CoreMotionAxisStatus_vibrationPosMax_set)
    vibrationPosAvg = property(_WMX3ApiPython.CoreMotionAxisStatus_vibrationPosAvg_get, _WMX3ApiPython.CoreMotionAxisStatus_vibrationPosAvg_set)
    vibrationVelMin = property(_WMX3ApiPython.CoreMotionAxisStatus_vibrationVelMin_get, _WMX3ApiPython.CoreMotionAxisStatus_vibrationVelMin_set)
    vibrationVelMax = property(_WMX3ApiPython.CoreMotionAxisStatus_vibrationVelMax_get, _WMX3ApiPython.CoreMotionAxisStatus_vibrationVelMax_set)
    vibrationVelAvg = property(_WMX3ApiPython.CoreMotionAxisStatus_vibrationVelAvg_get, _WMX3ApiPython.CoreMotionAxisStatus_vibrationVelAvg_set)
    vibrationTrqMin = property(_WMX3ApiPython.CoreMotionAxisStatus_vibrationTrqMin_get, _WMX3ApiPython.CoreMotionAxisStatus_vibrationTrqMin_set)
    vibrationTrqMax = property(_WMX3ApiPython.CoreMotionAxisStatus_vibrationTrqMax_get, _WMX3ApiPython.CoreMotionAxisStatus_vibrationTrqMax_set)
    vibrationTrqAvg = property(_WMX3ApiPython.CoreMotionAxisStatus_vibrationTrqAvg_get, _WMX3ApiPython.CoreMotionAxisStatus_vibrationTrqAvg_set)

    def __init__(self):
        _WMX3ApiPython.CoreMotionAxisStatus_swiginit(self, _WMX3ApiPython.new_CoreMotionAxisStatus())
    __swig_destroy__ = _WMX3ApiPython.delete_CoreMotionAxisStatus

# Register CoreMotionAxisStatus in _WMX3ApiPython:
_WMX3ApiPython.CoreMotionAxisStatus_swigregister(CoreMotionAxisStatus)
class CoreMotionStatus(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def SetData(self, coreMotionStatus):
        return _WMX3ApiPython.CoreMotionStatus_SetData(self, coreMotionStatus)

    def GetData(self, coreMotionStatus):
        return _WMX3ApiPython.CoreMotionStatus_GetData(self, coreMotionStatus)
    invalidLicenseError = property(_WMX3ApiPython.CoreMotionStatus_invalidLicenseError_get, _WMX3ApiPython.CoreMotionStatus_invalidLicenseError_set)
    engineState = property(_WMX3ApiPython.CoreMotionStatus_engineState_get, _WMX3ApiPython.CoreMotionStatus_engineState_set)
    numOfInterrupts = property(_WMX3ApiPython.CoreMotionStatus_numOfInterrupts_get, _WMX3ApiPython.CoreMotionStatus_numOfInterrupts_set)
    cycleTimeMilliseconds = property(_WMX3ApiPython.CoreMotionStatus_cycleTimeMilliseconds_get, _WMX3ApiPython.CoreMotionStatus_cycleTimeMilliseconds_set)

    def SetCycleTimeMilliseconds(self, index, value):
        return _WMX3ApiPython.CoreMotionStatus_SetCycleTimeMilliseconds(self, index, value)

    def GetCycleTimeMilliseconds(self, index):
        return _WMX3ApiPython.CoreMotionStatus_GetCycleTimeMilliseconds(self, index)
    cycleCounter = property(_WMX3ApiPython.CoreMotionStatus_cycleCounter_get, _WMX3ApiPython.CoreMotionStatus_cycleCounter_set)

    def SetCycleCounter(self, index, value):
        return _WMX3ApiPython.CoreMotionStatus_SetCycleCounter(self, index, value)

    def GetCycleCounter(self, index):
        return _WMX3ApiPython.CoreMotionStatus_GetCycleCounter(self, index)
    emergencyStop = property(_WMX3ApiPython.CoreMotionStatus_emergencyStop_get, _WMX3ApiPython.CoreMotionStatus_emergencyStop_set)
    emergencyStopLevel = property(_WMX3ApiPython.CoreMotionStatus_emergencyStopLevel_get, _WMX3ApiPython.CoreMotionStatus_emergencyStopLevel_set)
    axesStatus = property(_WMX3ApiPython.CoreMotionStatus_axesStatus_get, _WMX3ApiPython.CoreMotionStatus_axesStatus_set)

    def SetAxesStatus(self, index, value):
        return _WMX3ApiPython.CoreMotionStatus_SetAxesStatus(self, index, value)

    def GetAxesStatus(self, index):
        return _WMX3ApiPython.CoreMotionStatus_GetAxesStatus(self, index)

    def __init__(self):
        _WMX3ApiPython.CoreMotionStatus_swiginit(self, _WMX3ApiPython.new_CoreMotionStatus())
    __swig_destroy__ = _WMX3ApiPython.delete_CoreMotionStatus

# Register CoreMotionStatus in _WMX3ApiPython:
_WMX3ApiPython.CoreMotionStatus_swigregister(CoreMotionStatus)
class TriggerType(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    RemainingTime = _WMX3ApiPython.TriggerType_RemainingTime
    RemainingDistance = _WMX3ApiPython.TriggerType_RemainingDistance
    SameTimeCompletion = _WMX3ApiPython.TriggerType_SameTimeCompletion
    CompletedTime = _WMX3ApiPython.TriggerType_CompletedTime
    CompletedDistance = _WMX3ApiPython.TriggerType_CompletedDistance
    StaggeredTimeCompletion = _WMX3ApiPython.TriggerType_StaggeredTimeCompletion
    StaggeredDistanceCompletion = _WMX3ApiPython.TriggerType_StaggeredDistanceCompletion
    DistanceToTarget = _WMX3ApiPython.TriggerType_DistanceToTarget

    def __init__(self):
        _WMX3ApiPython.TriggerType_swiginit(self, _WMX3ApiPython.new_TriggerType())
    __swig_destroy__ = _WMX3ApiPython.delete_TriggerType

# Register TriggerType in _WMX3ApiPython:
_WMX3ApiPython.TriggerType_swigregister(TriggerType)
class TriggerEventInputFunction(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    IOBit = _WMX3ApiPython.TriggerEventInputFunction_IOBit
    NotIOBit = _WMX3ApiPython.TriggerEventInputFunction_NotIOBit
    OrIOBit = _WMX3ApiPython.TriggerEventInputFunction_OrIOBit
    AndIOBit = _WMX3ApiPython.TriggerEventInputFunction_AndIOBit
    XorIOBit = _WMX3ApiPython.TriggerEventInputFunction_XorIOBit
    NandIOBit = _WMX3ApiPython.TriggerEventInputFunction_NandIOBit
    NorIOBit = _WMX3ApiPython.TriggerEventInputFunction_NorIOBit
    XnorIOBit = _WMX3ApiPython.TriggerEventInputFunction_XnorIOBit
    MBit = _WMX3ApiPython.TriggerEventInputFunction_MBit
    NotMBit = _WMX3ApiPython.TriggerEventInputFunction_NotMBit
    OrMBit = _WMX3ApiPython.TriggerEventInputFunction_OrMBit
    AndMBit = _WMX3ApiPython.TriggerEventInputFunction_AndMBit
    XorMBit = _WMX3ApiPython.TriggerEventInputFunction_XorMBit
    NandMBit = _WMX3ApiPython.TriggerEventInputFunction_NandMBit
    NorMBit = _WMX3ApiPython.TriggerEventInputFunction_NorMBit
    XnorMBit = _WMX3ApiPython.TriggerEventInputFunction_XnorMBit
    Reg = _WMX3ApiPython.TriggerEventInputFunction_Reg
    NotReg = _WMX3ApiPython.TriggerEventInputFunction_NotReg
    OrReg = _WMX3ApiPython.TriggerEventInputFunction_OrReg
    AndReg = _WMX3ApiPython.TriggerEventInputFunction_AndReg
    XorReg = _WMX3ApiPython.TriggerEventInputFunction_XorReg
    NandReg = _WMX3ApiPython.TriggerEventInputFunction_NandReg
    NorReg = _WMX3ApiPython.TriggerEventInputFunction_NorReg
    XnorReg = _WMX3ApiPython.TriggerEventInputFunction_XnorReg
    EqualPos = _WMX3ApiPython.TriggerEventInputFunction_EqualPos
    GreaterPos = _WMX3ApiPython.TriggerEventInputFunction_GreaterPos
    LessPos = _WMX3ApiPython.TriggerEventInputFunction_LessPos
    EqualVelocity = _WMX3ApiPython.TriggerEventInputFunction_EqualVelocity
    GreaterVelocity = _WMX3ApiPython.TriggerEventInputFunction_GreaterVelocity
    LessVelocity = _WMX3ApiPython.TriggerEventInputFunction_LessVelocity
    EqualTrq = _WMX3ApiPython.TriggerEventInputFunction_EqualTrq
    GreaterTrq = _WMX3ApiPython.TriggerEventInputFunction_GreaterTrq
    LessTrq = _WMX3ApiPython.TriggerEventInputFunction_LessTrq
    RemainingTime = _WMX3ApiPython.TriggerEventInputFunction_RemainingTime
    RemainingDistance = _WMX3ApiPython.TriggerEventInputFunction_RemainingDistance
    SameTimeCompletion = _WMX3ApiPython.TriggerEventInputFunction_SameTimeCompletion
    CompletedTime = _WMX3ApiPython.TriggerEventInputFunction_CompletedTime
    CompletedDistance = _WMX3ApiPython.TriggerEventInputFunction_CompletedDistance
    StaggeredTimeCompletion = _WMX3ApiPython.TriggerEventInputFunction_StaggeredTimeCompletion
    StaggeredDistanceCompletion = _WMX3ApiPython.TriggerEventInputFunction_StaggeredDistanceCompletion
    DistanceToTarget = _WMX3ApiPython.TriggerEventInputFunction_DistanceToTarget

    def __init__(self):
        _WMX3ApiPython.TriggerEventInputFunction_swiginit(self, _WMX3ApiPython.new_TriggerEventInputFunction())
    __swig_destroy__ = _WMX3ApiPython.delete_TriggerEventInputFunction

# Register TriggerEventInputFunction in _WMX3ApiPython:
_WMX3ApiPython.TriggerEventInputFunction_swigregister(TriggerEventInputFunction)
class TriggerEventOutputFunction(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    TriggerMotion = _WMX3ApiPython.TriggerEventOutputFunction_TriggerMotion
    SetReg = _WMX3ApiPython.TriggerEventOutputFunction_SetReg

    def __init__(self):
        _WMX3ApiPython.TriggerEventOutputFunction_swiginit(self, _WMX3ApiPython.new_TriggerEventOutputFunction())
    __swig_destroy__ = _WMX3ApiPython.delete_TriggerEventOutputFunction

# Register TriggerEventOutputFunction in _WMX3ApiPython:
_WMX3ApiPython.TriggerEventOutputFunction_swigregister(TriggerEventOutputFunction)
class BaseTriggerEventInputFunctionArguments_IOMulti(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    byteAddress = property(_WMX3ApiPython.BaseTriggerEventInputFunctionArguments_IOMulti_byteAddress_get, _WMX3ApiPython.BaseTriggerEventInputFunctionArguments_IOMulti_byteAddress_set)
    bitAddress = property(_WMX3ApiPython.BaseTriggerEventInputFunctionArguments_IOMulti_bitAddress_get, _WMX3ApiPython.BaseTriggerEventInputFunctionArguments_IOMulti_bitAddress_set)
    ioSourceType = property(_WMX3ApiPython.BaseTriggerEventInputFunctionArguments_IOMulti_ioSourceType_get, _WMX3ApiPython.BaseTriggerEventInputFunctionArguments_IOMulti_ioSourceType_set)
    invert = property(_WMX3ApiPython.BaseTriggerEventInputFunctionArguments_IOMulti_invert_get, _WMX3ApiPython.BaseTriggerEventInputFunctionArguments_IOMulti_invert_set)

    def SetBitAddress(self, index, value):
        return _WMX3ApiPython.BaseTriggerEventInputFunctionArguments_IOMulti_SetBitAddress(self, index, value)

    def GetBitAddress(self, index):
        return _WMX3ApiPython.BaseTriggerEventInputFunctionArguments_IOMulti_GetBitAddress(self, index)

    def SetByteAddress(self, index, value):
        return _WMX3ApiPython.BaseTriggerEventInputFunctionArguments_IOMulti_SetByteAddress(self, index, value)

    def GetByteAddress(self, index):
        return _WMX3ApiPython.BaseTriggerEventInputFunctionArguments_IOMulti_GetByteAddress(self, index)

    def SetIOSourceType(self, index, value):
        return _WMX3ApiPython.BaseTriggerEventInputFunctionArguments_IOMulti_SetIOSourceType(self, index, value)

    def GetIOSourceType(self, index):
        return _WMX3ApiPython.BaseTriggerEventInputFunctionArguments_IOMulti_GetIOSourceType(self, index)

    def SetInvert(self, index, value):
        return _WMX3ApiPython.BaseTriggerEventInputFunctionArguments_IOMulti_SetInvert(self, index, value)

    def GetInvert(self, index):
        return _WMX3ApiPython.BaseTriggerEventInputFunctionArguments_IOMulti_GetInvert(self, index)

    def __init__(self):
        _WMX3ApiPython.BaseTriggerEventInputFunctionArguments_IOMulti_swiginit(self, _WMX3ApiPython.new_BaseTriggerEventInputFunctionArguments_IOMulti())
    __swig_destroy__ = _WMX3ApiPython.delete_BaseTriggerEventInputFunctionArguments_IOMulti

# Register BaseTriggerEventInputFunctionArguments_IOMulti in _WMX3ApiPython:
_WMX3ApiPython.BaseTriggerEventInputFunctionArguments_IOMulti_swigregister(BaseTriggerEventInputFunctionArguments_IOMulti)
class BaseTriggerEventInputFunctionArguments_MMulti(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    byteAddress = property(_WMX3ApiPython.BaseTriggerEventInputFunctionArguments_MMulti_byteAddress_get, _WMX3ApiPython.BaseTriggerEventInputFunctionArguments_MMulti_byteAddress_set)
    bitAddress = property(_WMX3ApiPython.BaseTriggerEventInputFunctionArguments_MMulti_bitAddress_get, _WMX3ApiPython.BaseTriggerEventInputFunctionArguments_MMulti_bitAddress_set)
    invert = property(_WMX3ApiPython.BaseTriggerEventInputFunctionArguments_MMulti_invert_get, _WMX3ApiPython.BaseTriggerEventInputFunctionArguments_MMulti_invert_set)

    def SetBitAddress(self, index, value):
        return _WMX3ApiPython.BaseTriggerEventInputFunctionArguments_MMulti_SetBitAddress(self, index, value)

    def GetBitAddress(self, index):
        return _WMX3ApiPython.BaseTriggerEventInputFunctionArguments_MMulti_GetBitAddress(self, index)

    def SetByteAddress(self, index, value):
        return _WMX3ApiPython.BaseTriggerEventInputFunctionArguments_MMulti_SetByteAddress(self, index, value)

    def GetByteAddress(self, index):
        return _WMX3ApiPython.BaseTriggerEventInputFunctionArguments_MMulti_GetByteAddress(self, index)

    def SetInvert(self, index, value):
        return _WMX3ApiPython.BaseTriggerEventInputFunctionArguments_MMulti_SetInvert(self, index, value)

    def GetInvert(self, index):
        return _WMX3ApiPython.BaseTriggerEventInputFunctionArguments_MMulti_GetInvert(self, index)

    def __init__(self):
        _WMX3ApiPython.BaseTriggerEventInputFunctionArguments_MMulti_swiginit(self, _WMX3ApiPython.new_BaseTriggerEventInputFunctionArguments_MMulti())
    __swig_destroy__ = _WMX3ApiPython.delete_BaseTriggerEventInputFunctionArguments_MMulti

# Register BaseTriggerEventInputFunctionArguments_MMulti in _WMX3ApiPython:
_WMX3ApiPython.BaseTriggerEventInputFunctionArguments_MMulti_swigregister(BaseTriggerEventInputFunctionArguments_MMulti)
class BaseTriggerEventInputFunctionArguments_RegMulti(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    regNumber = property(_WMX3ApiPython.BaseTriggerEventInputFunctionArguments_RegMulti_regNumber_get, _WMX3ApiPython.BaseTriggerEventInputFunctionArguments_RegMulti_regNumber_set)
    invert = property(_WMX3ApiPython.BaseTriggerEventInputFunctionArguments_RegMulti_invert_get, _WMX3ApiPython.BaseTriggerEventInputFunctionArguments_RegMulti_invert_set)

    def SetRegNumber(self, index, value):
        return _WMX3ApiPython.BaseTriggerEventInputFunctionArguments_RegMulti_SetRegNumber(self, index, value)

    def GetRegNumber(self, index):
        return _WMX3ApiPython.BaseTriggerEventInputFunctionArguments_RegMulti_GetRegNumber(self, index)

    def SetInvert(self, index, value):
        return _WMX3ApiPython.BaseTriggerEventInputFunctionArguments_RegMulti_SetInvert(self, index, value)

    def GetInvert(self, index):
        return _WMX3ApiPython.BaseTriggerEventInputFunctionArguments_RegMulti_GetInvert(self, index)

    def __init__(self):
        _WMX3ApiPython.BaseTriggerEventInputFunctionArguments_RegMulti_swiginit(self, _WMX3ApiPython.new_BaseTriggerEventInputFunctionArguments_RegMulti())
    __swig_destroy__ = _WMX3ApiPython.delete_BaseTriggerEventInputFunctionArguments_RegMulti

# Register BaseTriggerEventInputFunctionArguments_RegMulti in _WMX3ApiPython:
_WMX3ApiPython.BaseTriggerEventInputFunctionArguments_RegMulti_swigregister(BaseTriggerEventInputFunctionArguments_RegMulti)
class BaseTriggerEventInputFunctionArguments_IOSingle(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    byteAddress = property(_WMX3ApiPython.BaseTriggerEventInputFunctionArguments_IOSingle_byteAddress_get, _WMX3ApiPython.BaseTriggerEventInputFunctionArguments_IOSingle_byteAddress_set)
    bitAddress = property(_WMX3ApiPython.BaseTriggerEventInputFunctionArguments_IOSingle_bitAddress_get, _WMX3ApiPython.BaseTriggerEventInputFunctionArguments_IOSingle_bitAddress_set)
    invert = property(_WMX3ApiPython.BaseTriggerEventInputFunctionArguments_IOSingle_invert_get, _WMX3ApiPython.BaseTriggerEventInputFunctionArguments_IOSingle_invert_set)
    ioSourceType = property(_WMX3ApiPython.BaseTriggerEventInputFunctionArguments_IOSingle_ioSourceType_get, _WMX3ApiPython.BaseTriggerEventInputFunctionArguments_IOSingle_ioSourceType_set)

    def __init__(self):
        _WMX3ApiPython.BaseTriggerEventInputFunctionArguments_IOSingle_swiginit(self, _WMX3ApiPython.new_BaseTriggerEventInputFunctionArguments_IOSingle())
    __swig_destroy__ = _WMX3ApiPython.delete_BaseTriggerEventInputFunctionArguments_IOSingle

# Register BaseTriggerEventInputFunctionArguments_IOSingle in _WMX3ApiPython:
_WMX3ApiPython.BaseTriggerEventInputFunctionArguments_IOSingle_swigregister(BaseTriggerEventInputFunctionArguments_IOSingle)
class BaseTriggerEventInputFunctionArguments_MSingle(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    byteAddress = property(_WMX3ApiPython.BaseTriggerEventInputFunctionArguments_MSingle_byteAddress_get, _WMX3ApiPython.BaseTriggerEventInputFunctionArguments_MSingle_byteAddress_set)
    bitAddress = property(_WMX3ApiPython.BaseTriggerEventInputFunctionArguments_MSingle_bitAddress_get, _WMX3ApiPython.BaseTriggerEventInputFunctionArguments_MSingle_bitAddress_set)
    invert = property(_WMX3ApiPython.BaseTriggerEventInputFunctionArguments_MSingle_invert_get, _WMX3ApiPython.BaseTriggerEventInputFunctionArguments_MSingle_invert_set)

    def __init__(self):
        _WMX3ApiPython.BaseTriggerEventInputFunctionArguments_MSingle_swiginit(self, _WMX3ApiPython.new_BaseTriggerEventInputFunctionArguments_MSingle())
    __swig_destroy__ = _WMX3ApiPython.delete_BaseTriggerEventInputFunctionArguments_MSingle

# Register BaseTriggerEventInputFunctionArguments_MSingle in _WMX3ApiPython:
_WMX3ApiPython.BaseTriggerEventInputFunctionArguments_MSingle_swigregister(BaseTriggerEventInputFunctionArguments_MSingle)
class BaseTriggerEventInputFunctionArguments_RegSingle(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    regNumber = property(_WMX3ApiPython.BaseTriggerEventInputFunctionArguments_RegSingle_regNumber_get, _WMX3ApiPython.BaseTriggerEventInputFunctionArguments_RegSingle_regNumber_set)
    invert = property(_WMX3ApiPython.BaseTriggerEventInputFunctionArguments_RegSingle_invert_get, _WMX3ApiPython.BaseTriggerEventInputFunctionArguments_RegSingle_invert_set)

    def __init__(self):
        _WMX3ApiPython.BaseTriggerEventInputFunctionArguments_RegSingle_swiginit(self, _WMX3ApiPython.new_BaseTriggerEventInputFunctionArguments_RegSingle())
    __swig_destroy__ = _WMX3ApiPython.delete_BaseTriggerEventInputFunctionArguments_RegSingle

# Register BaseTriggerEventInputFunctionArguments_RegSingle in _WMX3ApiPython:
_WMX3ApiPython.BaseTriggerEventInputFunctionArguments_RegSingle_swigregister(BaseTriggerEventInputFunctionArguments_RegSingle)
class BaseTriggerEventInputFunctionArguments_SinglePos(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    axis = property(_WMX3ApiPython.BaseTriggerEventInputFunctionArguments_SinglePos_axis_get, _WMX3ApiPython.BaseTriggerEventInputFunctionArguments_SinglePos_axis_set)
    pos = property(_WMX3ApiPython.BaseTriggerEventInputFunctionArguments_SinglePos_pos_get, _WMX3ApiPython.BaseTriggerEventInputFunctionArguments_SinglePos_pos_set)
    disablePositiveDirection = property(_WMX3ApiPython.BaseTriggerEventInputFunctionArguments_SinglePos_disablePositiveDirection_get, _WMX3ApiPython.BaseTriggerEventInputFunctionArguments_SinglePos_disablePositiveDirection_set)
    disableNegativeDirection = property(_WMX3ApiPython.BaseTriggerEventInputFunctionArguments_SinglePos_disableNegativeDirection_get, _WMX3ApiPython.BaseTriggerEventInputFunctionArguments_SinglePos_disableNegativeDirection_set)
    useFeedback = property(_WMX3ApiPython.BaseTriggerEventInputFunctionArguments_SinglePos_useFeedback_get, _WMX3ApiPython.BaseTriggerEventInputFunctionArguments_SinglePos_useFeedback_set)
    invert = property(_WMX3ApiPython.BaseTriggerEventInputFunctionArguments_SinglePos_invert_get, _WMX3ApiPython.BaseTriggerEventInputFunctionArguments_SinglePos_invert_set)

    def __init__(self):
        _WMX3ApiPython.BaseTriggerEventInputFunctionArguments_SinglePos_swiginit(self, _WMX3ApiPython.new_BaseTriggerEventInputFunctionArguments_SinglePos())
    __swig_destroy__ = _WMX3ApiPython.delete_BaseTriggerEventInputFunctionArguments_SinglePos

# Register BaseTriggerEventInputFunctionArguments_SinglePos in _WMX3ApiPython:
_WMX3ApiPython.BaseTriggerEventInputFunctionArguments_SinglePos_swigregister(BaseTriggerEventInputFunctionArguments_SinglePos)
class BaseTriggerEventInputFunctionArguments_SingleVelocity(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    axis = property(_WMX3ApiPython.BaseTriggerEventInputFunctionArguments_SingleVelocity_axis_get, _WMX3ApiPython.BaseTriggerEventInputFunctionArguments_SingleVelocity_axis_set)
    velocity = property(_WMX3ApiPython.BaseTriggerEventInputFunctionArguments_SingleVelocity_velocity_get, _WMX3ApiPython.BaseTriggerEventInputFunctionArguments_SingleVelocity_velocity_set)
    useFeedback = property(_WMX3ApiPython.BaseTriggerEventInputFunctionArguments_SingleVelocity_useFeedback_get, _WMX3ApiPython.BaseTriggerEventInputFunctionArguments_SingleVelocity_useFeedback_set)
    invert = property(_WMX3ApiPython.BaseTriggerEventInputFunctionArguments_SingleVelocity_invert_get, _WMX3ApiPython.BaseTriggerEventInputFunctionArguments_SingleVelocity_invert_set)
    enableUnsigned = property(_WMX3ApiPython.BaseTriggerEventInputFunctionArguments_SingleVelocity_enableUnsigned_get, _WMX3ApiPython.BaseTriggerEventInputFunctionArguments_SingleVelocity_enableUnsigned_set)

    def __init__(self):
        _WMX3ApiPython.BaseTriggerEventInputFunctionArguments_SingleVelocity_swiginit(self, _WMX3ApiPython.new_BaseTriggerEventInputFunctionArguments_SingleVelocity())
    __swig_destroy__ = _WMX3ApiPython.delete_BaseTriggerEventInputFunctionArguments_SingleVelocity

# Register BaseTriggerEventInputFunctionArguments_SingleVelocity in _WMX3ApiPython:
_WMX3ApiPython.BaseTriggerEventInputFunctionArguments_SingleVelocity_swigregister(BaseTriggerEventInputFunctionArguments_SingleVelocity)
class BaseTriggerEventInputFunctionArguments_SingleTrq(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    axis = property(_WMX3ApiPython.BaseTriggerEventInputFunctionArguments_SingleTrq_axis_get, _WMX3ApiPython.BaseTriggerEventInputFunctionArguments_SingleTrq_axis_set)
    trq = property(_WMX3ApiPython.BaseTriggerEventInputFunctionArguments_SingleTrq_trq_get, _WMX3ApiPython.BaseTriggerEventInputFunctionArguments_SingleTrq_trq_set)
    invert = property(_WMX3ApiPython.BaseTriggerEventInputFunctionArguments_SingleTrq_invert_get, _WMX3ApiPython.BaseTriggerEventInputFunctionArguments_SingleTrq_invert_set)
    enableUnsigned = property(_WMX3ApiPython.BaseTriggerEventInputFunctionArguments_SingleTrq_enableUnsigned_get, _WMX3ApiPython.BaseTriggerEventInputFunctionArguments_SingleTrq_enableUnsigned_set)

    def __init__(self):
        _WMX3ApiPython.BaseTriggerEventInputFunctionArguments_SingleTrq_swiginit(self, _WMX3ApiPython.new_BaseTriggerEventInputFunctionArguments_SingleTrq())
    __swig_destroy__ = _WMX3ApiPython.delete_BaseTriggerEventInputFunctionArguments_SingleTrq

# Register BaseTriggerEventInputFunctionArguments_SingleTrq in _WMX3ApiPython:
_WMX3ApiPython.BaseTriggerEventInputFunctionArguments_SingleTrq_swigregister(BaseTriggerEventInputFunctionArguments_SingleTrq)
class TriggerEventInputFunctionArguments_IOBit(BaseTriggerEventInputFunctionArguments_IOSingle):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _WMX3ApiPython.TriggerEventInputFunctionArguments_IOBit_swiginit(self, _WMX3ApiPython.new_TriggerEventInputFunctionArguments_IOBit())
    __swig_destroy__ = _WMX3ApiPython.delete_TriggerEventInputFunctionArguments_IOBit

# Register TriggerEventInputFunctionArguments_IOBit in _WMX3ApiPython:
_WMX3ApiPython.TriggerEventInputFunctionArguments_IOBit_swigregister(TriggerEventInputFunctionArguments_IOBit)
class TriggerEventInputFunctionArguments_NotIOBit(BaseTriggerEventInputFunctionArguments_IOSingle):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _WMX3ApiPython.TriggerEventInputFunctionArguments_NotIOBit_swiginit(self, _WMX3ApiPython.new_TriggerEventInputFunctionArguments_NotIOBit())
    __swig_destroy__ = _WMX3ApiPython.delete_TriggerEventInputFunctionArguments_NotIOBit

# Register TriggerEventInputFunctionArguments_NotIOBit in _WMX3ApiPython:
_WMX3ApiPython.TriggerEventInputFunctionArguments_NotIOBit_swigregister(TriggerEventInputFunctionArguments_NotIOBit)
class TriggerEventInputFunctionArguments_OrIOBit(BaseTriggerEventInputFunctionArguments_IOMulti):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _WMX3ApiPython.TriggerEventInputFunctionArguments_OrIOBit_swiginit(self, _WMX3ApiPython.new_TriggerEventInputFunctionArguments_OrIOBit())
    __swig_destroy__ = _WMX3ApiPython.delete_TriggerEventInputFunctionArguments_OrIOBit

# Register TriggerEventInputFunctionArguments_OrIOBit in _WMX3ApiPython:
_WMX3ApiPython.TriggerEventInputFunctionArguments_OrIOBit_swigregister(TriggerEventInputFunctionArguments_OrIOBit)
class TriggerEventInputFunctionArguments_AndIOBit(BaseTriggerEventInputFunctionArguments_IOMulti):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _WMX3ApiPython.TriggerEventInputFunctionArguments_AndIOBit_swiginit(self, _WMX3ApiPython.new_TriggerEventInputFunctionArguments_AndIOBit())
    __swig_destroy__ = _WMX3ApiPython.delete_TriggerEventInputFunctionArguments_AndIOBit

# Register TriggerEventInputFunctionArguments_AndIOBit in _WMX3ApiPython:
_WMX3ApiPython.TriggerEventInputFunctionArguments_AndIOBit_swigregister(TriggerEventInputFunctionArguments_AndIOBit)
class TriggerEventInputFunctionArguments_XorIOBit(BaseTriggerEventInputFunctionArguments_IOMulti):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _WMX3ApiPython.TriggerEventInputFunctionArguments_XorIOBit_swiginit(self, _WMX3ApiPython.new_TriggerEventInputFunctionArguments_XorIOBit())
    __swig_destroy__ = _WMX3ApiPython.delete_TriggerEventInputFunctionArguments_XorIOBit

# Register TriggerEventInputFunctionArguments_XorIOBit in _WMX3ApiPython:
_WMX3ApiPython.TriggerEventInputFunctionArguments_XorIOBit_swigregister(TriggerEventInputFunctionArguments_XorIOBit)
class TriggerEventInputFunctionArguments_NandIOBit(BaseTriggerEventInputFunctionArguments_IOMulti):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _WMX3ApiPython.TriggerEventInputFunctionArguments_NandIOBit_swiginit(self, _WMX3ApiPython.new_TriggerEventInputFunctionArguments_NandIOBit())
    __swig_destroy__ = _WMX3ApiPython.delete_TriggerEventInputFunctionArguments_NandIOBit

# Register TriggerEventInputFunctionArguments_NandIOBit in _WMX3ApiPython:
_WMX3ApiPython.TriggerEventInputFunctionArguments_NandIOBit_swigregister(TriggerEventInputFunctionArguments_NandIOBit)
class TriggerEventInputFunctionArguments_NorIOBit(BaseTriggerEventInputFunctionArguments_IOMulti):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _WMX3ApiPython.TriggerEventInputFunctionArguments_NorIOBit_swiginit(self, _WMX3ApiPython.new_TriggerEventInputFunctionArguments_NorIOBit())
    __swig_destroy__ = _WMX3ApiPython.delete_TriggerEventInputFunctionArguments_NorIOBit

# Register TriggerEventInputFunctionArguments_NorIOBit in _WMX3ApiPython:
_WMX3ApiPython.TriggerEventInputFunctionArguments_NorIOBit_swigregister(TriggerEventInputFunctionArguments_NorIOBit)
class TriggerEventInputFunctionArguments_XnorIOBit(BaseTriggerEventInputFunctionArguments_IOMulti):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _WMX3ApiPython.TriggerEventInputFunctionArguments_XnorIOBit_swiginit(self, _WMX3ApiPython.new_TriggerEventInputFunctionArguments_XnorIOBit())
    __swig_destroy__ = _WMX3ApiPython.delete_TriggerEventInputFunctionArguments_XnorIOBit

# Register TriggerEventInputFunctionArguments_XnorIOBit in _WMX3ApiPython:
_WMX3ApiPython.TriggerEventInputFunctionArguments_XnorIOBit_swigregister(TriggerEventInputFunctionArguments_XnorIOBit)
class TriggerEventInputFunctionArguments_MBit(BaseTriggerEventInputFunctionArguments_MSingle):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _WMX3ApiPython.TriggerEventInputFunctionArguments_MBit_swiginit(self, _WMX3ApiPython.new_TriggerEventInputFunctionArguments_MBit())
    __swig_destroy__ = _WMX3ApiPython.delete_TriggerEventInputFunctionArguments_MBit

# Register TriggerEventInputFunctionArguments_MBit in _WMX3ApiPython:
_WMX3ApiPython.TriggerEventInputFunctionArguments_MBit_swigregister(TriggerEventInputFunctionArguments_MBit)
class TriggerEventInputFunctionArguments_NotMBit(BaseTriggerEventInputFunctionArguments_MSingle):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _WMX3ApiPython.TriggerEventInputFunctionArguments_NotMBit_swiginit(self, _WMX3ApiPython.new_TriggerEventInputFunctionArguments_NotMBit())
    __swig_destroy__ = _WMX3ApiPython.delete_TriggerEventInputFunctionArguments_NotMBit

# Register TriggerEventInputFunctionArguments_NotMBit in _WMX3ApiPython:
_WMX3ApiPython.TriggerEventInputFunctionArguments_NotMBit_swigregister(TriggerEventInputFunctionArguments_NotMBit)
class TriggerEventInputFunctionArguments_OrMBit(BaseTriggerEventInputFunctionArguments_MMulti):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _WMX3ApiPython.TriggerEventInputFunctionArguments_OrMBit_swiginit(self, _WMX3ApiPython.new_TriggerEventInputFunctionArguments_OrMBit())
    __swig_destroy__ = _WMX3ApiPython.delete_TriggerEventInputFunctionArguments_OrMBit

# Register TriggerEventInputFunctionArguments_OrMBit in _WMX3ApiPython:
_WMX3ApiPython.TriggerEventInputFunctionArguments_OrMBit_swigregister(TriggerEventInputFunctionArguments_OrMBit)
class TriggerEventInputFunctionArguments_AndMBit(BaseTriggerEventInputFunctionArguments_MMulti):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _WMX3ApiPython.TriggerEventInputFunctionArguments_AndMBit_swiginit(self, _WMX3ApiPython.new_TriggerEventInputFunctionArguments_AndMBit())
    __swig_destroy__ = _WMX3ApiPython.delete_TriggerEventInputFunctionArguments_AndMBit

# Register TriggerEventInputFunctionArguments_AndMBit in _WMX3ApiPython:
_WMX3ApiPython.TriggerEventInputFunctionArguments_AndMBit_swigregister(TriggerEventInputFunctionArguments_AndMBit)
class TriggerEventInputFunctionArguments_XorMBit(BaseTriggerEventInputFunctionArguments_MMulti):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _WMX3ApiPython.TriggerEventInputFunctionArguments_XorMBit_swiginit(self, _WMX3ApiPython.new_TriggerEventInputFunctionArguments_XorMBit())
    __swig_destroy__ = _WMX3ApiPython.delete_TriggerEventInputFunctionArguments_XorMBit

# Register TriggerEventInputFunctionArguments_XorMBit in _WMX3ApiPython:
_WMX3ApiPython.TriggerEventInputFunctionArguments_XorMBit_swigregister(TriggerEventInputFunctionArguments_XorMBit)
class TriggerEventInputFunctionArguments_NandMBit(BaseTriggerEventInputFunctionArguments_MMulti):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _WMX3ApiPython.TriggerEventInputFunctionArguments_NandMBit_swiginit(self, _WMX3ApiPython.new_TriggerEventInputFunctionArguments_NandMBit())
    __swig_destroy__ = _WMX3ApiPython.delete_TriggerEventInputFunctionArguments_NandMBit

# Register TriggerEventInputFunctionArguments_NandMBit in _WMX3ApiPython:
_WMX3ApiPython.TriggerEventInputFunctionArguments_NandMBit_swigregister(TriggerEventInputFunctionArguments_NandMBit)
class TriggerEventInputFunctionArguments_NorMBit(BaseTriggerEventInputFunctionArguments_MMulti):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _WMX3ApiPython.TriggerEventInputFunctionArguments_NorMBit_swiginit(self, _WMX3ApiPython.new_TriggerEventInputFunctionArguments_NorMBit())
    __swig_destroy__ = _WMX3ApiPython.delete_TriggerEventInputFunctionArguments_NorMBit

# Register TriggerEventInputFunctionArguments_NorMBit in _WMX3ApiPython:
_WMX3ApiPython.TriggerEventInputFunctionArguments_NorMBit_swigregister(TriggerEventInputFunctionArguments_NorMBit)
class TriggerEventInputFunctionArguments_XnorMBit(BaseTriggerEventInputFunctionArguments_MMulti):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _WMX3ApiPython.TriggerEventInputFunctionArguments_XnorMBit_swiginit(self, _WMX3ApiPython.new_TriggerEventInputFunctionArguments_XnorMBit())
    __swig_destroy__ = _WMX3ApiPython.delete_TriggerEventInputFunctionArguments_XnorMBit

# Register TriggerEventInputFunctionArguments_XnorMBit in _WMX3ApiPython:
_WMX3ApiPython.TriggerEventInputFunctionArguments_XnorMBit_swigregister(TriggerEventInputFunctionArguments_XnorMBit)
class TriggerEventInputFunctionArguments_Reg(BaseTriggerEventInputFunctionArguments_RegSingle):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _WMX3ApiPython.TriggerEventInputFunctionArguments_Reg_swiginit(self, _WMX3ApiPython.new_TriggerEventInputFunctionArguments_Reg())
    __swig_destroy__ = _WMX3ApiPython.delete_TriggerEventInputFunctionArguments_Reg

# Register TriggerEventInputFunctionArguments_Reg in _WMX3ApiPython:
_WMX3ApiPython.TriggerEventInputFunctionArguments_Reg_swigregister(TriggerEventInputFunctionArguments_Reg)
class TriggerEventInputFunctionArguments_NotReg(BaseTriggerEventInputFunctionArguments_RegSingle):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _WMX3ApiPython.TriggerEventInputFunctionArguments_NotReg_swiginit(self, _WMX3ApiPython.new_TriggerEventInputFunctionArguments_NotReg())
    __swig_destroy__ = _WMX3ApiPython.delete_TriggerEventInputFunctionArguments_NotReg

# Register TriggerEventInputFunctionArguments_NotReg in _WMX3ApiPython:
_WMX3ApiPython.TriggerEventInputFunctionArguments_NotReg_swigregister(TriggerEventInputFunctionArguments_NotReg)
class TriggerEventInputFunctionArguments_OrReg(BaseTriggerEventInputFunctionArguments_RegMulti):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _WMX3ApiPython.TriggerEventInputFunctionArguments_OrReg_swiginit(self, _WMX3ApiPython.new_TriggerEventInputFunctionArguments_OrReg())
    __swig_destroy__ = _WMX3ApiPython.delete_TriggerEventInputFunctionArguments_OrReg

# Register TriggerEventInputFunctionArguments_OrReg in _WMX3ApiPython:
_WMX3ApiPython.TriggerEventInputFunctionArguments_OrReg_swigregister(TriggerEventInputFunctionArguments_OrReg)
class TriggerEventInputFunctionArguments_AndReg(BaseTriggerEventInputFunctionArguments_RegMulti):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _WMX3ApiPython.TriggerEventInputFunctionArguments_AndReg_swiginit(self, _WMX3ApiPython.new_TriggerEventInputFunctionArguments_AndReg())
    __swig_destroy__ = _WMX3ApiPython.delete_TriggerEventInputFunctionArguments_AndReg

# Register TriggerEventInputFunctionArguments_AndReg in _WMX3ApiPython:
_WMX3ApiPython.TriggerEventInputFunctionArguments_AndReg_swigregister(TriggerEventInputFunctionArguments_AndReg)
class TriggerEventInputFunctionArguments_XorReg(BaseTriggerEventInputFunctionArguments_RegMulti):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _WMX3ApiPython.TriggerEventInputFunctionArguments_XorReg_swiginit(self, _WMX3ApiPython.new_TriggerEventInputFunctionArguments_XorReg())
    __swig_destroy__ = _WMX3ApiPython.delete_TriggerEventInputFunctionArguments_XorReg

# Register TriggerEventInputFunctionArguments_XorReg in _WMX3ApiPython:
_WMX3ApiPython.TriggerEventInputFunctionArguments_XorReg_swigregister(TriggerEventInputFunctionArguments_XorReg)
class TriggerEventInputFunctionArguments_NandReg(BaseTriggerEventInputFunctionArguments_RegMulti):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _WMX3ApiPython.TriggerEventInputFunctionArguments_NandReg_swiginit(self, _WMX3ApiPython.new_TriggerEventInputFunctionArguments_NandReg())
    __swig_destroy__ = _WMX3ApiPython.delete_TriggerEventInputFunctionArguments_NandReg

# Register TriggerEventInputFunctionArguments_NandReg in _WMX3ApiPython:
_WMX3ApiPython.TriggerEventInputFunctionArguments_NandReg_swigregister(TriggerEventInputFunctionArguments_NandReg)
class TriggerEventInputFunctionArguments_NorReg(BaseTriggerEventInputFunctionArguments_RegMulti):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _WMX3ApiPython.TriggerEventInputFunctionArguments_NorReg_swiginit(self, _WMX3ApiPython.new_TriggerEventInputFunctionArguments_NorReg())
    __swig_destroy__ = _WMX3ApiPython.delete_TriggerEventInputFunctionArguments_NorReg

# Register TriggerEventInputFunctionArguments_NorReg in _WMX3ApiPython:
_WMX3ApiPython.TriggerEventInputFunctionArguments_NorReg_swigregister(TriggerEventInputFunctionArguments_NorReg)
class TriggerEventInputFunctionArguments_XnorReg(BaseTriggerEventInputFunctionArguments_RegMulti):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _WMX3ApiPython.TriggerEventInputFunctionArguments_XnorReg_swiginit(self, _WMX3ApiPython.new_TriggerEventInputFunctionArguments_XnorReg())
    __swig_destroy__ = _WMX3ApiPython.delete_TriggerEventInputFunctionArguments_XnorReg

# Register TriggerEventInputFunctionArguments_XnorReg in _WMX3ApiPython:
_WMX3ApiPython.TriggerEventInputFunctionArguments_XnorReg_swigregister(TriggerEventInputFunctionArguments_XnorReg)
class TriggerEventInputFunctionArguments_EqualPos(BaseTriggerEventInputFunctionArguments_SinglePos):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    enableTolerance = property(_WMX3ApiPython.TriggerEventInputFunctionArguments_EqualPos_enableTolerance_get, _WMX3ApiPython.TriggerEventInputFunctionArguments_EqualPos_enableTolerance_set)
    tolerance = property(_WMX3ApiPython.TriggerEventInputFunctionArguments_EqualPos_tolerance_get, _WMX3ApiPython.TriggerEventInputFunctionArguments_EqualPos_tolerance_set)

    def __init__(self):
        _WMX3ApiPython.TriggerEventInputFunctionArguments_EqualPos_swiginit(self, _WMX3ApiPython.new_TriggerEventInputFunctionArguments_EqualPos())
    __swig_destroy__ = _WMX3ApiPython.delete_TriggerEventInputFunctionArguments_EqualPos

# Register TriggerEventInputFunctionArguments_EqualPos in _WMX3ApiPython:
_WMX3ApiPython.TriggerEventInputFunctionArguments_EqualPos_swigregister(TriggerEventInputFunctionArguments_EqualPos)
class TriggerEventInputFunctionArguments_GreaterPos(BaseTriggerEventInputFunctionArguments_SinglePos):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _WMX3ApiPython.TriggerEventInputFunctionArguments_GreaterPos_swiginit(self, _WMX3ApiPython.new_TriggerEventInputFunctionArguments_GreaterPos())
    __swig_destroy__ = _WMX3ApiPython.delete_TriggerEventInputFunctionArguments_GreaterPos

# Register TriggerEventInputFunctionArguments_GreaterPos in _WMX3ApiPython:
_WMX3ApiPython.TriggerEventInputFunctionArguments_GreaterPos_swigregister(TriggerEventInputFunctionArguments_GreaterPos)
class TriggerEventInputFunctionArguments_LessPos(BaseTriggerEventInputFunctionArguments_SinglePos):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _WMX3ApiPython.TriggerEventInputFunctionArguments_LessPos_swiginit(self, _WMX3ApiPython.new_TriggerEventInputFunctionArguments_LessPos())
    __swig_destroy__ = _WMX3ApiPython.delete_TriggerEventInputFunctionArguments_LessPos

# Register TriggerEventInputFunctionArguments_LessPos in _WMX3ApiPython:
_WMX3ApiPython.TriggerEventInputFunctionArguments_LessPos_swigregister(TriggerEventInputFunctionArguments_LessPos)
class TriggerEventInputFunctionArguments_EqualVelocity(BaseTriggerEventInputFunctionArguments_SingleVelocity):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    enableTolerance = property(_WMX3ApiPython.TriggerEventInputFunctionArguments_EqualVelocity_enableTolerance_get, _WMX3ApiPython.TriggerEventInputFunctionArguments_EqualVelocity_enableTolerance_set)
    tolerance = property(_WMX3ApiPython.TriggerEventInputFunctionArguments_EqualVelocity_tolerance_get, _WMX3ApiPython.TriggerEventInputFunctionArguments_EqualVelocity_tolerance_set)

    def __init__(self):
        _WMX3ApiPython.TriggerEventInputFunctionArguments_EqualVelocity_swiginit(self, _WMX3ApiPython.new_TriggerEventInputFunctionArguments_EqualVelocity())
    __swig_destroy__ = _WMX3ApiPython.delete_TriggerEventInputFunctionArguments_EqualVelocity

# Register TriggerEventInputFunctionArguments_EqualVelocity in _WMX3ApiPython:
_WMX3ApiPython.TriggerEventInputFunctionArguments_EqualVelocity_swigregister(TriggerEventInputFunctionArguments_EqualVelocity)
class TriggerEventInputFunctionArguments_GreaterVelocity(BaseTriggerEventInputFunctionArguments_SingleVelocity):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _WMX3ApiPython.TriggerEventInputFunctionArguments_GreaterVelocity_swiginit(self, _WMX3ApiPython.new_TriggerEventInputFunctionArguments_GreaterVelocity())
    __swig_destroy__ = _WMX3ApiPython.delete_TriggerEventInputFunctionArguments_GreaterVelocity

# Register TriggerEventInputFunctionArguments_GreaterVelocity in _WMX3ApiPython:
_WMX3ApiPython.TriggerEventInputFunctionArguments_GreaterVelocity_swigregister(TriggerEventInputFunctionArguments_GreaterVelocity)
class TriggerEventInputFunctionArguments_LessVelocity(BaseTriggerEventInputFunctionArguments_SingleVelocity):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _WMX3ApiPython.TriggerEventInputFunctionArguments_LessVelocity_swiginit(self, _WMX3ApiPython.new_TriggerEventInputFunctionArguments_LessVelocity())
    __swig_destroy__ = _WMX3ApiPython.delete_TriggerEventInputFunctionArguments_LessVelocity

# Register TriggerEventInputFunctionArguments_LessVelocity in _WMX3ApiPython:
_WMX3ApiPython.TriggerEventInputFunctionArguments_LessVelocity_swigregister(TriggerEventInputFunctionArguments_LessVelocity)
class TriggerEventInputFunctionArguments_EqualTrq(BaseTriggerEventInputFunctionArguments_SingleTrq):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    enableTolerance = property(_WMX3ApiPython.TriggerEventInputFunctionArguments_EqualTrq_enableTolerance_get, _WMX3ApiPython.TriggerEventInputFunctionArguments_EqualTrq_enableTolerance_set)
    tolerance = property(_WMX3ApiPython.TriggerEventInputFunctionArguments_EqualTrq_tolerance_get, _WMX3ApiPython.TriggerEventInputFunctionArguments_EqualTrq_tolerance_set)

    def __init__(self):
        _WMX3ApiPython.TriggerEventInputFunctionArguments_EqualTrq_swiginit(self, _WMX3ApiPython.new_TriggerEventInputFunctionArguments_EqualTrq())
    __swig_destroy__ = _WMX3ApiPython.delete_TriggerEventInputFunctionArguments_EqualTrq

# Register TriggerEventInputFunctionArguments_EqualTrq in _WMX3ApiPython:
_WMX3ApiPython.TriggerEventInputFunctionArguments_EqualTrq_swigregister(TriggerEventInputFunctionArguments_EqualTrq)
class TriggerEventInputFunctionArguments_GreaterTrq(BaseTriggerEventInputFunctionArguments_SingleTrq):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _WMX3ApiPython.TriggerEventInputFunctionArguments_GreaterTrq_swiginit(self, _WMX3ApiPython.new_TriggerEventInputFunctionArguments_GreaterTrq())
    __swig_destroy__ = _WMX3ApiPython.delete_TriggerEventInputFunctionArguments_GreaterTrq

# Register TriggerEventInputFunctionArguments_GreaterTrq in _WMX3ApiPython:
_WMX3ApiPython.TriggerEventInputFunctionArguments_GreaterTrq_swigregister(TriggerEventInputFunctionArguments_GreaterTrq)
class TriggerEventInputFunctionArguments_LessTrq(BaseTriggerEventInputFunctionArguments_SingleTrq):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _WMX3ApiPython.TriggerEventInputFunctionArguments_LessTrq_swiginit(self, _WMX3ApiPython.new_TriggerEventInputFunctionArguments_LessTrq())
    __swig_destroy__ = _WMX3ApiPython.delete_TriggerEventInputFunctionArguments_LessTrq

# Register TriggerEventInputFunctionArguments_LessTrq in _WMX3ApiPython:
_WMX3ApiPython.TriggerEventInputFunctionArguments_LessTrq_swigregister(TriggerEventInputFunctionArguments_LessTrq)
class TriggerEventInputFunctionArguments_RemainingTime(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    axis = property(_WMX3ApiPython.TriggerEventInputFunctionArguments_RemainingTime_axis_get, _WMX3ApiPython.TriggerEventInputFunctionArguments_RemainingTime_axis_set)
    timeMilliseconds = property(_WMX3ApiPython.TriggerEventInputFunctionArguments_RemainingTime_timeMilliseconds_get, _WMX3ApiPython.TriggerEventInputFunctionArguments_RemainingTime_timeMilliseconds_set)
    invert = property(_WMX3ApiPython.TriggerEventInputFunctionArguments_RemainingTime_invert_get, _WMX3ApiPython.TriggerEventInputFunctionArguments_RemainingTime_invert_set)

    def __init__(self):
        _WMX3ApiPython.TriggerEventInputFunctionArguments_RemainingTime_swiginit(self, _WMX3ApiPython.new_TriggerEventInputFunctionArguments_RemainingTime())
    __swig_destroy__ = _WMX3ApiPython.delete_TriggerEventInputFunctionArguments_RemainingTime

# Register TriggerEventInputFunctionArguments_RemainingTime in _WMX3ApiPython:
_WMX3ApiPython.TriggerEventInputFunctionArguments_RemainingTime_swigregister(TriggerEventInputFunctionArguments_RemainingTime)
class TriggerEventInputFunctionArguments_RemainingDistance(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    axis = property(_WMX3ApiPython.TriggerEventInputFunctionArguments_RemainingDistance_axis_get, _WMX3ApiPython.TriggerEventInputFunctionArguments_RemainingDistance_axis_set)
    distance = property(_WMX3ApiPython.TriggerEventInputFunctionArguments_RemainingDistance_distance_get, _WMX3ApiPython.TriggerEventInputFunctionArguments_RemainingDistance_distance_set)
    invert = property(_WMX3ApiPython.TriggerEventInputFunctionArguments_RemainingDistance_invert_get, _WMX3ApiPython.TriggerEventInputFunctionArguments_RemainingDistance_invert_set)

    def __init__(self):
        _WMX3ApiPython.TriggerEventInputFunctionArguments_RemainingDistance_swiginit(self, _WMX3ApiPython.new_TriggerEventInputFunctionArguments_RemainingDistance())
    __swig_destroy__ = _WMX3ApiPython.delete_TriggerEventInputFunctionArguments_RemainingDistance

# Register TriggerEventInputFunctionArguments_RemainingDistance in _WMX3ApiPython:
_WMX3ApiPython.TriggerEventInputFunctionArguments_RemainingDistance_swigregister(TriggerEventInputFunctionArguments_RemainingDistance)
class TriggerEventInputFunctionArguments_SameTimeCompletion(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    axis = property(_WMX3ApiPython.TriggerEventInputFunctionArguments_SameTimeCompletion_axis_get, _WMX3ApiPython.TriggerEventInputFunctionArguments_SameTimeCompletion_axis_set)

    def __init__(self):
        _WMX3ApiPython.TriggerEventInputFunctionArguments_SameTimeCompletion_swiginit(self, _WMX3ApiPython.new_TriggerEventInputFunctionArguments_SameTimeCompletion())
    __swig_destroy__ = _WMX3ApiPython.delete_TriggerEventInputFunctionArguments_SameTimeCompletion

# Register TriggerEventInputFunctionArguments_SameTimeCompletion in _WMX3ApiPython:
_WMX3ApiPython.TriggerEventInputFunctionArguments_SameTimeCompletion_swigregister(TriggerEventInputFunctionArguments_SameTimeCompletion)
class TriggerEventInputFunctionArguments_CompletedTime(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    axis = property(_WMX3ApiPython.TriggerEventInputFunctionArguments_CompletedTime_axis_get, _WMX3ApiPython.TriggerEventInputFunctionArguments_CompletedTime_axis_set)
    invert = property(_WMX3ApiPython.TriggerEventInputFunctionArguments_CompletedTime_invert_get, _WMX3ApiPython.TriggerEventInputFunctionArguments_CompletedTime_invert_set)
    timeMilliSeconds = property(_WMX3ApiPython.TriggerEventInputFunctionArguments_CompletedTime_timeMilliSeconds_get, _WMX3ApiPython.TriggerEventInputFunctionArguments_CompletedTime_timeMilliSeconds_set)

    def __init__(self):
        _WMX3ApiPython.TriggerEventInputFunctionArguments_CompletedTime_swiginit(self, _WMX3ApiPython.new_TriggerEventInputFunctionArguments_CompletedTime())
    __swig_destroy__ = _WMX3ApiPython.delete_TriggerEventInputFunctionArguments_CompletedTime

# Register TriggerEventInputFunctionArguments_CompletedTime in _WMX3ApiPython:
_WMX3ApiPython.TriggerEventInputFunctionArguments_CompletedTime_swigregister(TriggerEventInputFunctionArguments_CompletedTime)
class TriggerEventInputFunctionArguments_CompletedDistance(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    axis = property(_WMX3ApiPython.TriggerEventInputFunctionArguments_CompletedDistance_axis_get, _WMX3ApiPython.TriggerEventInputFunctionArguments_CompletedDistance_axis_set)
    distance = property(_WMX3ApiPython.TriggerEventInputFunctionArguments_CompletedDistance_distance_get, _WMX3ApiPython.TriggerEventInputFunctionArguments_CompletedDistance_distance_set)
    invert = property(_WMX3ApiPython.TriggerEventInputFunctionArguments_CompletedDistance_invert_get, _WMX3ApiPython.TriggerEventInputFunctionArguments_CompletedDistance_invert_set)

    def __init__(self):
        _WMX3ApiPython.TriggerEventInputFunctionArguments_CompletedDistance_swiginit(self, _WMX3ApiPython.new_TriggerEventInputFunctionArguments_CompletedDistance())
    __swig_destroy__ = _WMX3ApiPython.delete_TriggerEventInputFunctionArguments_CompletedDistance

# Register TriggerEventInputFunctionArguments_CompletedDistance in _WMX3ApiPython:
_WMX3ApiPython.TriggerEventInputFunctionArguments_CompletedDistance_swigregister(TriggerEventInputFunctionArguments_CompletedDistance)
class TriggerEventInputFunctionArguments_StaggeredTimeCompletion(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    axis = property(_WMX3ApiPython.TriggerEventInputFunctionArguments_StaggeredTimeCompletion_axis_get, _WMX3ApiPython.TriggerEventInputFunctionArguments_StaggeredTimeCompletion_axis_set)
    timeMilliseconds = property(_WMX3ApiPython.TriggerEventInputFunctionArguments_StaggeredTimeCompletion_timeMilliseconds_get, _WMX3ApiPython.TriggerEventInputFunctionArguments_StaggeredTimeCompletion_timeMilliseconds_set)

    def __init__(self):
        _WMX3ApiPython.TriggerEventInputFunctionArguments_StaggeredTimeCompletion_swiginit(self, _WMX3ApiPython.new_TriggerEventInputFunctionArguments_StaggeredTimeCompletion())
    __swig_destroy__ = _WMX3ApiPython.delete_TriggerEventInputFunctionArguments_StaggeredTimeCompletion

# Register TriggerEventInputFunctionArguments_StaggeredTimeCompletion in _WMX3ApiPython:
_WMX3ApiPython.TriggerEventInputFunctionArguments_StaggeredTimeCompletion_swigregister(TriggerEventInputFunctionArguments_StaggeredTimeCompletion)
class TriggerEventInputFunctionArguments_StaggeredDistanceCompletion(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    axis = property(_WMX3ApiPython.TriggerEventInputFunctionArguments_StaggeredDistanceCompletion_axis_get, _WMX3ApiPython.TriggerEventInputFunctionArguments_StaggeredDistanceCompletion_axis_set)
    distance = property(_WMX3ApiPython.TriggerEventInputFunctionArguments_StaggeredDistanceCompletion_distance_get, _WMX3ApiPython.TriggerEventInputFunctionArguments_StaggeredDistanceCompletion_distance_set)

    def __init__(self):
        _WMX3ApiPython.TriggerEventInputFunctionArguments_StaggeredDistanceCompletion_swiginit(self, _WMX3ApiPython.new_TriggerEventInputFunctionArguments_StaggeredDistanceCompletion())
    __swig_destroy__ = _WMX3ApiPython.delete_TriggerEventInputFunctionArguments_StaggeredDistanceCompletion

# Register TriggerEventInputFunctionArguments_StaggeredDistanceCompletion in _WMX3ApiPython:
_WMX3ApiPython.TriggerEventInputFunctionArguments_StaggeredDistanceCompletion_swigregister(TriggerEventInputFunctionArguments_StaggeredDistanceCompletion)
class TriggerEventInputFunctionArguments_DistanceToTarget(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    axis = property(_WMX3ApiPython.TriggerEventInputFunctionArguments_DistanceToTarget_axis_get, _WMX3ApiPython.TriggerEventInputFunctionArguments_DistanceToTarget_axis_set)
    invert = property(_WMX3ApiPython.TriggerEventInputFunctionArguments_DistanceToTarget_invert_get, _WMX3ApiPython.TriggerEventInputFunctionArguments_DistanceToTarget_invert_set)
    distance = property(_WMX3ApiPython.TriggerEventInputFunctionArguments_DistanceToTarget_distance_get, _WMX3ApiPython.TriggerEventInputFunctionArguments_DistanceToTarget_distance_set)

    def __init__(self):
        _WMX3ApiPython.TriggerEventInputFunctionArguments_DistanceToTarget_swiginit(self, _WMX3ApiPython.new_TriggerEventInputFunctionArguments_DistanceToTarget())
    __swig_destroy__ = _WMX3ApiPython.delete_TriggerEventInputFunctionArguments_DistanceToTarget

# Register TriggerEventInputFunctionArguments_DistanceToTarget in _WMX3ApiPython:
_WMX3ApiPython.TriggerEventInputFunctionArguments_DistanceToTarget_swigregister(TriggerEventInputFunctionArguments_DistanceToTarget)
class TriggerEventOutputFunctionArguments_TriggerMotion(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    reserved = property(_WMX3ApiPython.TriggerEventOutputFunctionArguments_TriggerMotion_reserved_get, _WMX3ApiPython.TriggerEventOutputFunctionArguments_TriggerMotion_reserved_set)

    def __init__(self):
        _WMX3ApiPython.TriggerEventOutputFunctionArguments_TriggerMotion_swiginit(self, _WMX3ApiPython.new_TriggerEventOutputFunctionArguments_TriggerMotion())
    __swig_destroy__ = _WMX3ApiPython.delete_TriggerEventOutputFunctionArguments_TriggerMotion

# Register TriggerEventOutputFunctionArguments_TriggerMotion in _WMX3ApiPython:
_WMX3ApiPython.TriggerEventOutputFunctionArguments_TriggerMotion_swigregister(TriggerEventOutputFunctionArguments_TriggerMotion)
class TriggerEventOutputFunctionArguments_SetReg(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    regNumber = property(_WMX3ApiPython.TriggerEventOutputFunctionArguments_SetReg_regNumber_get, _WMX3ApiPython.TriggerEventOutputFunctionArguments_SetReg_regNumber_set)

    def __init__(self):
        _WMX3ApiPython.TriggerEventOutputFunctionArguments_SetReg_swiginit(self, _WMX3ApiPython.new_TriggerEventOutputFunctionArguments_SetReg())
    __swig_destroy__ = _WMX3ApiPython.delete_TriggerEventOutputFunctionArguments_SetReg

# Register TriggerEventOutputFunctionArguments_SetReg in _WMX3ApiPython:
_WMX3ApiPython.TriggerEventOutputFunctionArguments_SetReg_swigregister(TriggerEventOutputFunctionArguments_SetReg)
class TriggerEvent(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def SetData(self, pTriggerEvent):
        return _WMX3ApiPython.TriggerEvent_SetData(self, pTriggerEvent)

    def GetData(self, pTriggerEvent):
        return _WMX3ApiPython.TriggerEvent_GetData(self, pTriggerEvent)
    inputFunction = property(_WMX3ApiPython.TriggerEvent_inputFunction_get, _WMX3ApiPython.TriggerEvent_inputFunction_set)
    outputFunction = property(_WMX3ApiPython.TriggerEvent_outputFunction_get, _WMX3ApiPython.TriggerEvent_outputFunction_set)
    input_ioBit = property(_WMX3ApiPython.TriggerEvent_input_ioBit_get, _WMX3ApiPython.TriggerEvent_input_ioBit_set)
    input_notIOBit = property(_WMX3ApiPython.TriggerEvent_input_notIOBit_get, _WMX3ApiPython.TriggerEvent_input_notIOBit_set)
    input_orIOBit = property(_WMX3ApiPython.TriggerEvent_input_orIOBit_get, _WMX3ApiPython.TriggerEvent_input_orIOBit_set)
    input_andIOBit = property(_WMX3ApiPython.TriggerEvent_input_andIOBit_get, _WMX3ApiPython.TriggerEvent_input_andIOBit_set)
    input_xorIOBit = property(_WMX3ApiPython.TriggerEvent_input_xorIOBit_get, _WMX3ApiPython.TriggerEvent_input_xorIOBit_set)
    input_nandIOBit = property(_WMX3ApiPython.TriggerEvent_input_nandIOBit_get, _WMX3ApiPython.TriggerEvent_input_nandIOBit_set)
    input_norIOBit = property(_WMX3ApiPython.TriggerEvent_input_norIOBit_get, _WMX3ApiPython.TriggerEvent_input_norIOBit_set)
    input_xnorIOBit = property(_WMX3ApiPython.TriggerEvent_input_xnorIOBit_get, _WMX3ApiPython.TriggerEvent_input_xnorIOBit_set)
    input_mBit = property(_WMX3ApiPython.TriggerEvent_input_mBit_get, _WMX3ApiPython.TriggerEvent_input_mBit_set)
    input_notMBit = property(_WMX3ApiPython.TriggerEvent_input_notMBit_get, _WMX3ApiPython.TriggerEvent_input_notMBit_set)
    input_orMBit = property(_WMX3ApiPython.TriggerEvent_input_orMBit_get, _WMX3ApiPython.TriggerEvent_input_orMBit_set)
    input_andMBit = property(_WMX3ApiPython.TriggerEvent_input_andMBit_get, _WMX3ApiPython.TriggerEvent_input_andMBit_set)
    input_xorMBit = property(_WMX3ApiPython.TriggerEvent_input_xorMBit_get, _WMX3ApiPython.TriggerEvent_input_xorMBit_set)
    input_nandMBit = property(_WMX3ApiPython.TriggerEvent_input_nandMBit_get, _WMX3ApiPython.TriggerEvent_input_nandMBit_set)
    input_norMBit = property(_WMX3ApiPython.TriggerEvent_input_norMBit_get, _WMX3ApiPython.TriggerEvent_input_norMBit_set)
    input_xnorMBit = property(_WMX3ApiPython.TriggerEvent_input_xnorMBit_get, _WMX3ApiPython.TriggerEvent_input_xnorMBit_set)
    input_reg = property(_WMX3ApiPython.TriggerEvent_input_reg_get, _WMX3ApiPython.TriggerEvent_input_reg_set)
    input_notReg = property(_WMX3ApiPython.TriggerEvent_input_notReg_get, _WMX3ApiPython.TriggerEvent_input_notReg_set)
    input_orReg = property(_WMX3ApiPython.TriggerEvent_input_orReg_get, _WMX3ApiPython.TriggerEvent_input_orReg_set)
    input_andReg = property(_WMX3ApiPython.TriggerEvent_input_andReg_get, _WMX3ApiPython.TriggerEvent_input_andReg_set)
    input_xorReg = property(_WMX3ApiPython.TriggerEvent_input_xorReg_get, _WMX3ApiPython.TriggerEvent_input_xorReg_set)
    input_nandReg = property(_WMX3ApiPython.TriggerEvent_input_nandReg_get, _WMX3ApiPython.TriggerEvent_input_nandReg_set)
    input_norReg = property(_WMX3ApiPython.TriggerEvent_input_norReg_get, _WMX3ApiPython.TriggerEvent_input_norReg_set)
    input_xnorReg = property(_WMX3ApiPython.TriggerEvent_input_xnorReg_get, _WMX3ApiPython.TriggerEvent_input_xnorReg_set)
    input_equalPos = property(_WMX3ApiPython.TriggerEvent_input_equalPos_get, _WMX3ApiPython.TriggerEvent_input_equalPos_set)
    input_greaterPos = property(_WMX3ApiPython.TriggerEvent_input_greaterPos_get, _WMX3ApiPython.TriggerEvent_input_greaterPos_set)
    input_lessPos = property(_WMX3ApiPython.TriggerEvent_input_lessPos_get, _WMX3ApiPython.TriggerEvent_input_lessPos_set)
    input_equalVelocity = property(_WMX3ApiPython.TriggerEvent_input_equalVelocity_get, _WMX3ApiPython.TriggerEvent_input_equalVelocity_set)
    input_greaterVelocity = property(_WMX3ApiPython.TriggerEvent_input_greaterVelocity_get, _WMX3ApiPython.TriggerEvent_input_greaterVelocity_set)
    input_lessVelocity = property(_WMX3ApiPython.TriggerEvent_input_lessVelocity_get, _WMX3ApiPython.TriggerEvent_input_lessVelocity_set)
    input_equalTrq = property(_WMX3ApiPython.TriggerEvent_input_equalTrq_get, _WMX3ApiPython.TriggerEvent_input_equalTrq_set)
    input_greaterTrq = property(_WMX3ApiPython.TriggerEvent_input_greaterTrq_get, _WMX3ApiPython.TriggerEvent_input_greaterTrq_set)
    input_lessTrq = property(_WMX3ApiPython.TriggerEvent_input_lessTrq_get, _WMX3ApiPython.TriggerEvent_input_lessTrq_set)
    input_remainingTime = property(_WMX3ApiPython.TriggerEvent_input_remainingTime_get, _WMX3ApiPython.TriggerEvent_input_remainingTime_set)
    input_remainingDistance = property(_WMX3ApiPython.TriggerEvent_input_remainingDistance_get, _WMX3ApiPython.TriggerEvent_input_remainingDistance_set)
    input_sameTimeCompletion = property(_WMX3ApiPython.TriggerEvent_input_sameTimeCompletion_get, _WMX3ApiPython.TriggerEvent_input_sameTimeCompletion_set)
    input_completedTime = property(_WMX3ApiPython.TriggerEvent_input_completedTime_get, _WMX3ApiPython.TriggerEvent_input_completedTime_set)
    input_completedDistance = property(_WMX3ApiPython.TriggerEvent_input_completedDistance_get, _WMX3ApiPython.TriggerEvent_input_completedDistance_set)
    input_staggeredTimeCompletion = property(_WMX3ApiPython.TriggerEvent_input_staggeredTimeCompletion_get, _WMX3ApiPython.TriggerEvent_input_staggeredTimeCompletion_set)
    input_staggeredDistanceCompletion = property(_WMX3ApiPython.TriggerEvent_input_staggeredDistanceCompletion_get, _WMX3ApiPython.TriggerEvent_input_staggeredDistanceCompletion_set)
    input_DistanceToTarget = property(_WMX3ApiPython.TriggerEvent_input_DistanceToTarget_get, _WMX3ApiPython.TriggerEvent_input_DistanceToTarget_set)
    output_triggerMotion = property(_WMX3ApiPython.TriggerEvent_output_triggerMotion_get, _WMX3ApiPython.TriggerEvent_output_triggerMotion_set)
    output_setReg = property(_WMX3ApiPython.TriggerEvent_output_setReg_get, _WMX3ApiPython.TriggerEvent_output_setReg_set)

    def __init__(self):
        _WMX3ApiPython.TriggerEvent_swiginit(self, _WMX3ApiPython.new_TriggerEvent())
    __swig_destroy__ = _WMX3ApiPython.delete_TriggerEvent

# Register TriggerEvent in _WMX3ApiPython:
_WMX3ApiPython.TriggerEvent_swigregister(TriggerEvent)
class TriggerEvents(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def SetData(self, pTriggerEvents):
        return _WMX3ApiPython.TriggerEvents_SetData(self, pTriggerEvents)

    def GetData(self, pTriggerEvents):
        return _WMX3ApiPython.TriggerEvents_GetData(self, pTriggerEvents)
    numEvents = property(_WMX3ApiPython.TriggerEvents_numEvents_get, _WMX3ApiPython.TriggerEvents_numEvents_set)
    event = property(_WMX3ApiPython.TriggerEvents_event_get, _WMX3ApiPython.TriggerEvents_event_set)

    def SetEvent(self, index, value):
        return _WMX3ApiPython.TriggerEvents_SetEvent(self, index, value)

    def GetEvent(self, index):
        return _WMX3ApiPython.TriggerEvents_GetEvent(self, index)

    def __init__(self):
        _WMX3ApiPython.TriggerEvents_swiginit(self, _WMX3ApiPython.new_TriggerEvents())
    __swig_destroy__ = _WMX3ApiPython.delete_TriggerEvents

# Register TriggerEvents in _WMX3ApiPython:
_WMX3ApiPython.TriggerEvents_swigregister(TriggerEvents)
class Trigger(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def SetData(self, pTrigger):
        return _WMX3ApiPython.Trigger_SetData(self, pTrigger)

    def GetData(self, pTrigger):
        return _WMX3ApiPython.Trigger_GetData(self, pTrigger)
    triggerAxis = property(_WMX3ApiPython.Trigger_triggerAxis_get, _WMX3ApiPython.Trigger_triggerAxis_set)
    triggerType = property(_WMX3ApiPython.Trigger_triggerType_get, _WMX3ApiPython.Trigger_triggerType_set)
    triggerValue = property(_WMX3ApiPython.Trigger_triggerValue_get, _WMX3ApiPython.Trigger_triggerValue_set)

    def __init__(self):
        _WMX3ApiPython.Trigger_swiginit(self, _WMX3ApiPython.new_Trigger())
    __swig_destroy__ = _WMX3ApiPython.delete_Trigger

# Register Trigger in _WMX3ApiPython:
_WMX3ApiPython.Trigger_swigregister(Trigger)
class AxisControl(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, cm):
        _WMX3ApiPython.AxisControl_swiginit(self, _WMX3ApiPython.new_AxisControl(cm))
    __swig_destroy__ = _WMX3ApiPython.delete_AxisControl

    def IsDeviceValid(self):
        return _WMX3ApiPython.AxisControl_IsDeviceValid(self)

    def SetServoOn(self, axis, newStatus):
        return _WMX3ApiPython.AxisControl_SetServoOn(self, axis, newStatus)

    def SetServoOn_AxisSel(self, axisSel, newStatus):
        return _WMX3ApiPython.AxisControl_SetServoOn_AxisSel(self, axisSel, newStatus)

    def ClearAmpAlarm(self, axis):
        return _WMX3ApiPython.AxisControl_ClearAmpAlarm(self, axis)

    def ClearAmpAlarm_AxisSel(self, axisSel):
        return _WMX3ApiPython.AxisControl_ClearAmpAlarm_AxisSel(self, axisSel)

    def ClearAxisAlarm(self, axis):
        return _WMX3ApiPython.AxisControl_ClearAxisAlarm(self, axis)

    def ClearAxisAlarm_AxisSel(self, axisSel):
        return _WMX3ApiPython.AxisControl_ClearAxisAlarm_AxisSel(self, axisSel)

    def SetAxisCommandMode(self, axis, mode):
        return _WMX3ApiPython.AxisControl_SetAxisCommandMode(self, axis, mode)

    def SetAxisCommandMode_AxisSel(self, axisSel, mode):
        return _WMX3ApiPython.AxisControl_SetAxisCommandMode_AxisSel(self, axisSel, mode)

    def GetAxisCommandMode(self, axis):
        pMode = intp()
        ret = _WMX3ApiPython.AxisControl_GetAxisCommandMode(self, axis, pMode)
        return ret, pMode.value()



    def GetPosCommand(self, axis):
        pPosition = doublep()
        ret = _WMX3ApiPython.AxisControl_GetPosCommand(self, axis, pPosition)
        return ret, pPosition.value()



    def GetPosFeedback(self, axis):
        pPosition = doublep()
        ret = _WMX3ApiPython.AxisControl_GetPosFeedback(self, axis, pPosition)
        return ret, pPosition.value()



    def GetVelCommand(self, axis):
        pVelocity = doublep()
        ret = _WMX3ApiPython.AxisControl_GetVelCommand(self, axis, pVelocity)
        return ret, pVelocity.value()



    def GetVelFeedback(self, axis):
        pVelocity = doublep()
        ret = _WMX3ApiPython.AxisControl_GetVelFeedback(self, axis, pVelocity)
        return ret, pVelocity.value()



# Register AxisControl in _WMX3ApiPython:
_WMX3ApiPython.AxisControl_swigregister(AxisControl)
class Motion_WaitConditionType(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    AxisIdle = _WMX3ApiPython.Motion_WaitConditionType_AxisIdle
    MotionStarted = _WMX3ApiPython.Motion_WaitConditionType_MotionStarted
    MotionStartedOverrideReady = _WMX3ApiPython.Motion_WaitConditionType_MotionStartedOverrideReady
    Event = _WMX3ApiPython.Motion_WaitConditionType_Event

    def __init__(self):
        _WMX3ApiPython.Motion_WaitConditionType_swiginit(self, _WMX3ApiPython.new_Motion_WaitConditionType())
    __swig_destroy__ = _WMX3ApiPython.delete_Motion_WaitConditionType

# Register Motion_WaitConditionType in _WMX3ApiPython:
_WMX3ApiPython.Motion_WaitConditionType_swigregister(Motion_WaitConditionType)
class Motion_HelicalIntplProfileType(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Helical = _WMX3ApiPython.Motion_HelicalIntplProfileType_Helical
    Circular = _WMX3ApiPython.Motion_HelicalIntplProfileType_Circular
    Linear = _WMX3ApiPython.Motion_HelicalIntplProfileType_Linear

    def __init__(self):
        _WMX3ApiPython.Motion_HelicalIntplProfileType_swiginit(self, _WMX3ApiPython.new_Motion_HelicalIntplProfileType())
    __swig_destroy__ = _WMX3ApiPython.delete_Motion_HelicalIntplProfileType

# Register Motion_HelicalIntplProfileType in _WMX3ApiPython:
_WMX3ApiPython.Motion_HelicalIntplProfileType_swigregister(Motion_HelicalIntplProfileType)
class Motion_PosCommand(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def GetData(self, posCommand):
        return _WMX3ApiPython.Motion_PosCommand_GetData(self, posCommand)
    axis = property(_WMX3ApiPython.Motion_PosCommand_axis_get, _WMX3ApiPython.Motion_PosCommand_axis_set)
    target = property(_WMX3ApiPython.Motion_PosCommand_target_get, _WMX3ApiPython.Motion_PosCommand_target_set)
    profile = property(_WMX3ApiPython.Motion_PosCommand_profile_get, _WMX3ApiPython.Motion_PosCommand_profile_set)

    def __init__(self):
        _WMX3ApiPython.Motion_PosCommand_swiginit(self, _WMX3ApiPython.new_Motion_PosCommand())
    __swig_destroy__ = _WMX3ApiPython.delete_Motion_PosCommand

# Register Motion_PosCommand in _WMX3ApiPython:
_WMX3ApiPython.Motion_PosCommand_swigregister(Motion_PosCommand)
class Motion_TriggerPosCommand(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def GetData(self, triggerPosCommand):
        return _WMX3ApiPython.Motion_TriggerPosCommand_GetData(self, triggerPosCommand)
    axis = property(_WMX3ApiPython.Motion_TriggerPosCommand_axis_get, _WMX3ApiPython.Motion_TriggerPosCommand_axis_set)
    target = property(_WMX3ApiPython.Motion_TriggerPosCommand_target_get, _WMX3ApiPython.Motion_TriggerPosCommand_target_set)
    profile = property(_WMX3ApiPython.Motion_TriggerPosCommand_profile_get, _WMX3ApiPython.Motion_TriggerPosCommand_profile_set)
    trigger = property(_WMX3ApiPython.Motion_TriggerPosCommand_trigger_get, _WMX3ApiPython.Motion_TriggerPosCommand_trigger_set)

    def __init__(self):
        _WMX3ApiPython.Motion_TriggerPosCommand_swiginit(self, _WMX3ApiPython.new_Motion_TriggerPosCommand())
    __swig_destroy__ = _WMX3ApiPython.delete_Motion_TriggerPosCommand

# Register Motion_TriggerPosCommand in _WMX3ApiPython:
_WMX3ApiPython.Motion_TriggerPosCommand_swigregister(Motion_TriggerPosCommand)
class Motion_LinearIntplCommand(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def GetData(self, linearIntplCommand):
        return _WMX3ApiPython.Motion_LinearIntplCommand_GetData(self, linearIntplCommand)
    axisCount = property(_WMX3ApiPython.Motion_LinearIntplCommand_axisCount_get, _WMX3ApiPython.Motion_LinearIntplCommand_axisCount_set)
    axis = property(_WMX3ApiPython.Motion_LinearIntplCommand_axis_get, _WMX3ApiPython.Motion_LinearIntplCommand_axis_set)

    def SetAxis(self, index, value):
        return _WMX3ApiPython.Motion_LinearIntplCommand_SetAxis(self, index, value)

    def GetAxis(self, index):
        return _WMX3ApiPython.Motion_LinearIntplCommand_GetAxis(self, index)
    target = property(_WMX3ApiPython.Motion_LinearIntplCommand_target_get, _WMX3ApiPython.Motion_LinearIntplCommand_target_set)

    def SetTarget(self, index, value):
        return _WMX3ApiPython.Motion_LinearIntplCommand_SetTarget(self, index, value)

    def GetTarget(self, index):
        return _WMX3ApiPython.Motion_LinearIntplCommand_GetTarget(self, index)
    maxVelocity = property(_WMX3ApiPython.Motion_LinearIntplCommand_maxVelocity_get, _WMX3ApiPython.Motion_LinearIntplCommand_maxVelocity_set)

    def SetMaxVelocity(self, index, value):
        return _WMX3ApiPython.Motion_LinearIntplCommand_SetMaxVelocity(self, index, value)

    def GetMaxVelocity(self, index):
        return _WMX3ApiPython.Motion_LinearIntplCommand_GetMaxVelocity(self, index)
    maxAcc = property(_WMX3ApiPython.Motion_LinearIntplCommand_maxAcc_get, _WMX3ApiPython.Motion_LinearIntplCommand_maxAcc_set)

    def SetMaxAcc(self, index, value):
        return _WMX3ApiPython.Motion_LinearIntplCommand_SetMaxAcc(self, index, value)

    def GetMaxAcc(self, index):
        return _WMX3ApiPython.Motion_LinearIntplCommand_GetMaxAcc(self, index)
    maxDec = property(_WMX3ApiPython.Motion_LinearIntplCommand_maxDec_get, _WMX3ApiPython.Motion_LinearIntplCommand_maxDec_set)

    def SetMaxDec(self, index, value):
        return _WMX3ApiPython.Motion_LinearIntplCommand_SetMaxDec(self, index, value)

    def GetMaxDec(self, index):
        return _WMX3ApiPython.Motion_LinearIntplCommand_GetMaxDec(self, index)
    maxJerkAcc = property(_WMX3ApiPython.Motion_LinearIntplCommand_maxJerkAcc_get, _WMX3ApiPython.Motion_LinearIntplCommand_maxJerkAcc_set)

    def SetMaxJerkAcc(self, index, value):
        return _WMX3ApiPython.Motion_LinearIntplCommand_SetMaxJerkAcc(self, index, value)

    def GetMaxJerkAcc(self, index):
        return _WMX3ApiPython.Motion_LinearIntplCommand_GetMaxJerkAcc(self, index)
    maxJerkDec = property(_WMX3ApiPython.Motion_LinearIntplCommand_maxJerkDec_get, _WMX3ApiPython.Motion_LinearIntplCommand_maxJerkDec_set)

    def SetMaxJerkDec(self, index, value):
        return _WMX3ApiPython.Motion_LinearIntplCommand_SetMaxJerkDec(self, index, value)

    def GetMaxJerkDec(self, index):
        return _WMX3ApiPython.Motion_LinearIntplCommand_GetMaxJerkDec(self, index)
    profile = property(_WMX3ApiPython.Motion_LinearIntplCommand_profile_get, _WMX3ApiPython.Motion_LinearIntplCommand_profile_set)

    def __init__(self):
        _WMX3ApiPython.Motion_LinearIntplCommand_swiginit(self, _WMX3ApiPython.new_Motion_LinearIntplCommand())
    __swig_destroy__ = _WMX3ApiPython.delete_Motion_LinearIntplCommand

# Register Motion_LinearIntplCommand in _WMX3ApiPython:
_WMX3ApiPython.Motion_LinearIntplCommand_swigregister(Motion_LinearIntplCommand)
class Motion_CenterAndLengthCircularIntplCommand(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def GetData(self, centerAndLengthCircularIntplCommand):
        return _WMX3ApiPython.Motion_CenterAndLengthCircularIntplCommand_GetData(self, centerAndLengthCircularIntplCommand)
    axis = property(_WMX3ApiPython.Motion_CenterAndLengthCircularIntplCommand_axis_get, _WMX3ApiPython.Motion_CenterAndLengthCircularIntplCommand_axis_set)

    def SetAxis(self, index, value):
        return _WMX3ApiPython.Motion_CenterAndLengthCircularIntplCommand_SetAxis(self, index, value)

    def GetAxis(self, index):
        return _WMX3ApiPython.Motion_CenterAndLengthCircularIntplCommand_GetAxis(self, index)
    centerPos = property(_WMX3ApiPython.Motion_CenterAndLengthCircularIntplCommand_centerPos_get, _WMX3ApiPython.Motion_CenterAndLengthCircularIntplCommand_centerPos_set)

    def SetCenterPos(self, index, value):
        return _WMX3ApiPython.Motion_CenterAndLengthCircularIntplCommand_SetCenterPos(self, index, value)

    def GetCenterPos(self, index):
        return _WMX3ApiPython.Motion_CenterAndLengthCircularIntplCommand_GetCenterPos(self, index)
    arcLengthDegree = property(_WMX3ApiPython.Motion_CenterAndLengthCircularIntplCommand_arcLengthDegree_get, _WMX3ApiPython.Motion_CenterAndLengthCircularIntplCommand_arcLengthDegree_set)
    clockwise = property(_WMX3ApiPython.Motion_CenterAndLengthCircularIntplCommand_clockwise_get, _WMX3ApiPython.Motion_CenterAndLengthCircularIntplCommand_clockwise_set)
    profile = property(_WMX3ApiPython.Motion_CenterAndLengthCircularIntplCommand_profile_get, _WMX3ApiPython.Motion_CenterAndLengthCircularIntplCommand_profile_set)

    def __init__(self):
        _WMX3ApiPython.Motion_CenterAndLengthCircularIntplCommand_swiginit(self, _WMX3ApiPython.new_Motion_CenterAndLengthCircularIntplCommand())
    __swig_destroy__ = _WMX3ApiPython.delete_Motion_CenterAndLengthCircularIntplCommand

# Register Motion_CenterAndLengthCircularIntplCommand in _WMX3ApiPython:
_WMX3ApiPython.Motion_CenterAndLengthCircularIntplCommand_swigregister(Motion_CenterAndLengthCircularIntplCommand)
class Motion_CenterAndEndCircularIntplCommand(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def GetData(self, centerAndEndCircularIntplCommand):
        return _WMX3ApiPython.Motion_CenterAndEndCircularIntplCommand_GetData(self, centerAndEndCircularIntplCommand)
    axis = property(_WMX3ApiPython.Motion_CenterAndEndCircularIntplCommand_axis_get, _WMX3ApiPython.Motion_CenterAndEndCircularIntplCommand_axis_set)

    def SetAxis(self, index, value):
        return _WMX3ApiPython.Motion_CenterAndEndCircularIntplCommand_SetAxis(self, index, value)

    def GetAxis(self, index):
        return _WMX3ApiPython.Motion_CenterAndEndCircularIntplCommand_GetAxis(self, index)
    centerPos = property(_WMX3ApiPython.Motion_CenterAndEndCircularIntplCommand_centerPos_get, _WMX3ApiPython.Motion_CenterAndEndCircularIntplCommand_centerPos_set)

    def SetCenterPos(self, index, value):
        return _WMX3ApiPython.Motion_CenterAndEndCircularIntplCommand_SetCenterPos(self, index, value)

    def GetCenterPos(self, index):
        return _WMX3ApiPython.Motion_CenterAndEndCircularIntplCommand_GetCenterPos(self, index)
    endPos = property(_WMX3ApiPython.Motion_CenterAndEndCircularIntplCommand_endPos_get, _WMX3ApiPython.Motion_CenterAndEndCircularIntplCommand_endPos_set)

    def SetEndPos(self, index, value):
        return _WMX3ApiPython.Motion_CenterAndEndCircularIntplCommand_SetEndPos(self, index, value)

    def GetEndPos(self, index):
        return _WMX3ApiPython.Motion_CenterAndEndCircularIntplCommand_GetEndPos(self, index)
    clockwise = property(_WMX3ApiPython.Motion_CenterAndEndCircularIntplCommand_clockwise_get, _WMX3ApiPython.Motion_CenterAndEndCircularIntplCommand_clockwise_set)
    profile = property(_WMX3ApiPython.Motion_CenterAndEndCircularIntplCommand_profile_get, _WMX3ApiPython.Motion_CenterAndEndCircularIntplCommand_profile_set)

    def __init__(self):
        _WMX3ApiPython.Motion_CenterAndEndCircularIntplCommand_swiginit(self, _WMX3ApiPython.new_Motion_CenterAndEndCircularIntplCommand())
    __swig_destroy__ = _WMX3ApiPython.delete_Motion_CenterAndEndCircularIntplCommand

# Register Motion_CenterAndEndCircularIntplCommand in _WMX3ApiPython:
_WMX3ApiPython.Motion_CenterAndEndCircularIntplCommand_swigregister(Motion_CenterAndEndCircularIntplCommand)
class Motion_ThroughAndEndCircularIntplCommand(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def GetData(self, throughAndEndCircularIntplCommand):
        return _WMX3ApiPython.Motion_ThroughAndEndCircularIntplCommand_GetData(self, throughAndEndCircularIntplCommand)
    axis = property(_WMX3ApiPython.Motion_ThroughAndEndCircularIntplCommand_axis_get, _WMX3ApiPython.Motion_ThroughAndEndCircularIntplCommand_axis_set)

    def SetAxis(self, index, value):
        return _WMX3ApiPython.Motion_ThroughAndEndCircularIntplCommand_SetAxis(self, index, value)

    def GetAxis(self, index):
        return _WMX3ApiPython.Motion_ThroughAndEndCircularIntplCommand_GetAxis(self, index)
    throughPos = property(_WMX3ApiPython.Motion_ThroughAndEndCircularIntplCommand_throughPos_get, _WMX3ApiPython.Motion_ThroughAndEndCircularIntplCommand_throughPos_set)

    def SetThroughPos(self, index, value):
        return _WMX3ApiPython.Motion_ThroughAndEndCircularIntplCommand_SetThroughPos(self, index, value)

    def GetThroughPos(self, index):
        return _WMX3ApiPython.Motion_ThroughAndEndCircularIntplCommand_GetThroughPos(self, index)
    endPos = property(_WMX3ApiPython.Motion_ThroughAndEndCircularIntplCommand_endPos_get, _WMX3ApiPython.Motion_ThroughAndEndCircularIntplCommand_endPos_set)

    def SetEndPos(self, index, value):
        return _WMX3ApiPython.Motion_ThroughAndEndCircularIntplCommand_SetEndPos(self, index, value)

    def GetEndPos(self, index):
        return _WMX3ApiPython.Motion_ThroughAndEndCircularIntplCommand_GetEndPos(self, index)
    profile = property(_WMX3ApiPython.Motion_ThroughAndEndCircularIntplCommand_profile_get, _WMX3ApiPython.Motion_ThroughAndEndCircularIntplCommand_profile_set)

    def __init__(self):
        _WMX3ApiPython.Motion_ThroughAndEndCircularIntplCommand_swiginit(self, _WMX3ApiPython.new_Motion_ThroughAndEndCircularIntplCommand())
    __swig_destroy__ = _WMX3ApiPython.delete_Motion_ThroughAndEndCircularIntplCommand

# Register Motion_ThroughAndEndCircularIntplCommand in _WMX3ApiPython:
_WMX3ApiPython.Motion_ThroughAndEndCircularIntplCommand_swigregister(Motion_ThroughAndEndCircularIntplCommand)
class Motion_LengthAndEndCircularIntplCommand(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def GetData(self, lengthAndEndCircularIntplCommand):
        return _WMX3ApiPython.Motion_LengthAndEndCircularIntplCommand_GetData(self, lengthAndEndCircularIntplCommand)
    axis = property(_WMX3ApiPython.Motion_LengthAndEndCircularIntplCommand_axis_get, _WMX3ApiPython.Motion_LengthAndEndCircularIntplCommand_axis_set)

    def SetAxis(self, index, value):
        return _WMX3ApiPython.Motion_LengthAndEndCircularIntplCommand_SetAxis(self, index, value)

    def GetAxis(self, index):
        return _WMX3ApiPython.Motion_LengthAndEndCircularIntplCommand_GetAxis(self, index)
    arcLengthDegree = property(_WMX3ApiPython.Motion_LengthAndEndCircularIntplCommand_arcLengthDegree_get, _WMX3ApiPython.Motion_LengthAndEndCircularIntplCommand_arcLengthDegree_set)
    clockwise = property(_WMX3ApiPython.Motion_LengthAndEndCircularIntplCommand_clockwise_get, _WMX3ApiPython.Motion_LengthAndEndCircularIntplCommand_clockwise_set)
    endPos = property(_WMX3ApiPython.Motion_LengthAndEndCircularIntplCommand_endPos_get, _WMX3ApiPython.Motion_LengthAndEndCircularIntplCommand_endPos_set)

    def SetEndPos(self, index, value):
        return _WMX3ApiPython.Motion_LengthAndEndCircularIntplCommand_SetEndPos(self, index, value)

    def GetEndPos(self, index):
        return _WMX3ApiPython.Motion_LengthAndEndCircularIntplCommand_GetEndPos(self, index)
    profile = property(_WMX3ApiPython.Motion_LengthAndEndCircularIntplCommand_profile_get, _WMX3ApiPython.Motion_LengthAndEndCircularIntplCommand_profile_set)

    def __init__(self):
        _WMX3ApiPython.Motion_LengthAndEndCircularIntplCommand_swiginit(self, _WMX3ApiPython.new_Motion_LengthAndEndCircularIntplCommand())
    __swig_destroy__ = _WMX3ApiPython.delete_Motion_LengthAndEndCircularIntplCommand

# Register Motion_LengthAndEndCircularIntplCommand in _WMX3ApiPython:
_WMX3ApiPython.Motion_LengthAndEndCircularIntplCommand_swigregister(Motion_LengthAndEndCircularIntplCommand)
class Motion_RadiusAndEndCircularIntplCommand(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def GetData(self, radiusAndEndCircularIntplCommand):
        return _WMX3ApiPython.Motion_RadiusAndEndCircularIntplCommand_GetData(self, radiusAndEndCircularIntplCommand)
    axis = property(_WMX3ApiPython.Motion_RadiusAndEndCircularIntplCommand_axis_get, _WMX3ApiPython.Motion_RadiusAndEndCircularIntplCommand_axis_set)

    def SetAxis(self, index, value):
        return _WMX3ApiPython.Motion_RadiusAndEndCircularIntplCommand_SetAxis(self, index, value)

    def GetAxis(self, index):
        return _WMX3ApiPython.Motion_RadiusAndEndCircularIntplCommand_GetAxis(self, index)
    radius = property(_WMX3ApiPython.Motion_RadiusAndEndCircularIntplCommand_radius_get, _WMX3ApiPython.Motion_RadiusAndEndCircularIntplCommand_radius_set)
    clockwise = property(_WMX3ApiPython.Motion_RadiusAndEndCircularIntplCommand_clockwise_get, _WMX3ApiPython.Motion_RadiusAndEndCircularIntplCommand_clockwise_set)
    endPos = property(_WMX3ApiPython.Motion_RadiusAndEndCircularIntplCommand_endPos_get, _WMX3ApiPython.Motion_RadiusAndEndCircularIntplCommand_endPos_set)

    def SetEndPos(self, index, value):
        return _WMX3ApiPython.Motion_RadiusAndEndCircularIntplCommand_SetEndPos(self, index, value)

    def GetEndPos(self, index):
        return _WMX3ApiPython.Motion_RadiusAndEndCircularIntplCommand_GetEndPos(self, index)
    profile = property(_WMX3ApiPython.Motion_RadiusAndEndCircularIntplCommand_profile_get, _WMX3ApiPython.Motion_RadiusAndEndCircularIntplCommand_profile_set)

    def __init__(self):
        _WMX3ApiPython.Motion_RadiusAndEndCircularIntplCommand_swiginit(self, _WMX3ApiPython.new_Motion_RadiusAndEndCircularIntplCommand())
    __swig_destroy__ = _WMX3ApiPython.delete_Motion_RadiusAndEndCircularIntplCommand

# Register Motion_RadiusAndEndCircularIntplCommand in _WMX3ApiPython:
_WMX3ApiPython.Motion_RadiusAndEndCircularIntplCommand_swigregister(Motion_RadiusAndEndCircularIntplCommand)
class Motion_ThroughAndEnd3DCircularIntplCommand(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def GetData(self, throughAndEnd3DCircularIntplCommand):
        return _WMX3ApiPython.Motion_ThroughAndEnd3DCircularIntplCommand_GetData(self, throughAndEnd3DCircularIntplCommand)
    axis = property(_WMX3ApiPython.Motion_ThroughAndEnd3DCircularIntplCommand_axis_get, _WMX3ApiPython.Motion_ThroughAndEnd3DCircularIntplCommand_axis_set)

    def SetAxis(self, index, value):
        return _WMX3ApiPython.Motion_ThroughAndEnd3DCircularIntplCommand_SetAxis(self, index, value)

    def GetAxis(self, index):
        return _WMX3ApiPython.Motion_ThroughAndEnd3DCircularIntplCommand_GetAxis(self, index)
    throughPos = property(_WMX3ApiPython.Motion_ThroughAndEnd3DCircularIntplCommand_throughPos_get, _WMX3ApiPython.Motion_ThroughAndEnd3DCircularIntplCommand_throughPos_set)

    def SetThroughPos(self, index, value):
        return _WMX3ApiPython.Motion_ThroughAndEnd3DCircularIntplCommand_SetThroughPos(self, index, value)

    def GetThroughPos(self, index):
        return _WMX3ApiPython.Motion_ThroughAndEnd3DCircularIntplCommand_GetThroughPos(self, index)
    endPos = property(_WMX3ApiPython.Motion_ThroughAndEnd3DCircularIntplCommand_endPos_get, _WMX3ApiPython.Motion_ThroughAndEnd3DCircularIntplCommand_endPos_set)

    def SetEndPos(self, index, value):
        return _WMX3ApiPython.Motion_ThroughAndEnd3DCircularIntplCommand_SetEndPos(self, index, value)

    def GetEndPos(self, index):
        return _WMX3ApiPython.Motion_ThroughAndEnd3DCircularIntplCommand_GetEndPos(self, index)
    profile = property(_WMX3ApiPython.Motion_ThroughAndEnd3DCircularIntplCommand_profile_get, _WMX3ApiPython.Motion_ThroughAndEnd3DCircularIntplCommand_profile_set)

    def __init__(self):
        _WMX3ApiPython.Motion_ThroughAndEnd3DCircularIntplCommand_swiginit(self, _WMX3ApiPython.new_Motion_ThroughAndEnd3DCircularIntplCommand())
    __swig_destroy__ = _WMX3ApiPython.delete_Motion_ThroughAndEnd3DCircularIntplCommand

# Register Motion_ThroughAndEnd3DCircularIntplCommand in _WMX3ApiPython:
_WMX3ApiPython.Motion_ThroughAndEnd3DCircularIntplCommand_swigregister(Motion_ThroughAndEnd3DCircularIntplCommand)
class Motion_HelicalIntplCommand(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def GetData(self, helicalIntplCommand):
        return _WMX3ApiPython.Motion_HelicalIntplCommand_GetData(self, helicalIntplCommand)
    axis = property(_WMX3ApiPython.Motion_HelicalIntplCommand_axis_get, _WMX3ApiPython.Motion_HelicalIntplCommand_axis_set)

    def SetAxis(self, index, value):
        return _WMX3ApiPython.Motion_HelicalIntplCommand_SetAxis(self, index, value)

    def GetAxis(self, index):
        return _WMX3ApiPython.Motion_HelicalIntplCommand_GetAxis(self, index)
    zAxis = property(_WMX3ApiPython.Motion_HelicalIntplCommand_zAxis_get, _WMX3ApiPython.Motion_HelicalIntplCommand_zAxis_set)
    centerPos = property(_WMX3ApiPython.Motion_HelicalIntplCommand_centerPos_get, _WMX3ApiPython.Motion_HelicalIntplCommand_centerPos_set)

    def SetCenterPos(self, index, value):
        return _WMX3ApiPython.Motion_HelicalIntplCommand_SetCenterPos(self, index, value)

    def GetCenterPos(self, index):
        return _WMX3ApiPython.Motion_HelicalIntplCommand_GetCenterPos(self, index)
    zEndPos = property(_WMX3ApiPython.Motion_HelicalIntplCommand_zEndPos_get, _WMX3ApiPython.Motion_HelicalIntplCommand_zEndPos_set)
    arcLengthDegree = property(_WMX3ApiPython.Motion_HelicalIntplCommand_arcLengthDegree_get, _WMX3ApiPython.Motion_HelicalIntplCommand_arcLengthDegree_set)
    clockwise = property(_WMX3ApiPython.Motion_HelicalIntplCommand_clockwise_get, _WMX3ApiPython.Motion_HelicalIntplCommand_clockwise_set)
    helicalProfileType = property(_WMX3ApiPython.Motion_HelicalIntplCommand_helicalProfileType_get, _WMX3ApiPython.Motion_HelicalIntplCommand_helicalProfileType_set)
    profile = property(_WMX3ApiPython.Motion_HelicalIntplCommand_profile_get, _WMX3ApiPython.Motion_HelicalIntplCommand_profile_set)

    def __init__(self):
        _WMX3ApiPython.Motion_HelicalIntplCommand_swiginit(self, _WMX3ApiPython.new_Motion_HelicalIntplCommand())
    __swig_destroy__ = _WMX3ApiPython.delete_Motion_HelicalIntplCommand

# Register Motion_HelicalIntplCommand in _WMX3ApiPython:
_WMX3ApiPython.Motion_HelicalIntplCommand_swigregister(Motion_HelicalIntplCommand)
class Motion_JogCommand(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def GetData(self, jogCommand):
        return _WMX3ApiPython.Motion_JogCommand_GetData(self, jogCommand)
    axis = property(_WMX3ApiPython.Motion_JogCommand_axis_get, _WMX3ApiPython.Motion_JogCommand_axis_set)
    profile = property(_WMX3ApiPython.Motion_JogCommand_profile_get, _WMX3ApiPython.Motion_JogCommand_profile_set)

    def __init__(self):
        _WMX3ApiPython.Motion_JogCommand_swiginit(self, _WMX3ApiPython.new_Motion_JogCommand())
    __swig_destroy__ = _WMX3ApiPython.delete_Motion_JogCommand

# Register Motion_JogCommand in _WMX3ApiPython:
_WMX3ApiPython.Motion_JogCommand_swigregister(Motion_JogCommand)
class Motion_TimedJogCommand(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def GetData(self, timedJogCommand):
        return _WMX3ApiPython.Motion_TimedJogCommand_GetData(self, timedJogCommand)
    axis = property(_WMX3ApiPython.Motion_TimedJogCommand_axis_get, _WMX3ApiPython.Motion_TimedJogCommand_axis_set)
    runTimeMilliseconds = property(_WMX3ApiPython.Motion_TimedJogCommand_runTimeMilliseconds_get, _WMX3ApiPython.Motion_TimedJogCommand_runTimeMilliseconds_set)
    profile = property(_WMX3ApiPython.Motion_TimedJogCommand_profile_get, _WMX3ApiPython.Motion_TimedJogCommand_profile_set)

    def __init__(self):
        _WMX3ApiPython.Motion_TimedJogCommand_swiginit(self, _WMX3ApiPython.new_Motion_TimedJogCommand())
    __swig_destroy__ = _WMX3ApiPython.delete_Motion_TimedJogCommand

# Register Motion_TimedJogCommand in _WMX3ApiPython:
_WMX3ApiPython.Motion_TimedJogCommand_swigregister(Motion_TimedJogCommand)
class Motion_TriggerJogCommand(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def GetData(self, triggerJogCommand):
        return _WMX3ApiPython.Motion_TriggerJogCommand_GetData(self, triggerJogCommand)
    axis = property(_WMX3ApiPython.Motion_TriggerJogCommand_axis_get, _WMX3ApiPython.Motion_TriggerJogCommand_axis_set)
    profile = property(_WMX3ApiPython.Motion_TriggerJogCommand_profile_get, _WMX3ApiPython.Motion_TriggerJogCommand_profile_set)
    trigger = property(_WMX3ApiPython.Motion_TriggerJogCommand_trigger_get, _WMX3ApiPython.Motion_TriggerJogCommand_trigger_set)

    def __init__(self):
        _WMX3ApiPython.Motion_TriggerJogCommand_swiginit(self, _WMX3ApiPython.new_Motion_TriggerJogCommand())
    __swig_destroy__ = _WMX3ApiPython.delete_Motion_TriggerJogCommand

# Register Motion_TriggerJogCommand in _WMX3ApiPython:
_WMX3ApiPython.Motion_TriggerJogCommand_swigregister(Motion_TriggerJogCommand)
class Motion_PosToJogCommand(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def GetData(self, posToJogCommand):
        return _WMX3ApiPython.Motion_PosToJogCommand_GetData(self, posToJogCommand)
    axis = property(_WMX3ApiPython.Motion_PosToJogCommand_axis_get, _WMX3ApiPython.Motion_PosToJogCommand_axis_set)
    target = property(_WMX3ApiPython.Motion_PosToJogCommand_target_get, _WMX3ApiPython.Motion_PosToJogCommand_target_set)
    unsignedVelocity = property(_WMX3ApiPython.Motion_PosToJogCommand_unsignedVelocity_get, _WMX3ApiPython.Motion_PosToJogCommand_unsignedVelocity_set)
    posProfile = property(_WMX3ApiPython.Motion_PosToJogCommand_posProfile_get, _WMX3ApiPython.Motion_PosToJogCommand_posProfile_set)
    jogProfile = property(_WMX3ApiPython.Motion_PosToJogCommand_jogProfile_get, _WMX3ApiPython.Motion_PosToJogCommand_jogProfile_set)
    trigger = property(_WMX3ApiPython.Motion_PosToJogCommand_trigger_get, _WMX3ApiPython.Motion_PosToJogCommand_trigger_set)

    def __init__(self):
        _WMX3ApiPython.Motion_PosToJogCommand_swiginit(self, _WMX3ApiPython.new_Motion_PosToJogCommand())
    __swig_destroy__ = _WMX3ApiPython.delete_Motion_PosToJogCommand

# Register Motion_PosToJogCommand in _WMX3ApiPython:
_WMX3ApiPython.Motion_PosToJogCommand_swigregister(Motion_PosToJogCommand)
class Motion_StopCommand(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def GetData(self, stopCommand):
        return _WMX3ApiPython.Motion_StopCommand_GetData(self, stopCommand)
    axis = property(_WMX3ApiPython.Motion_StopCommand_axis_get, _WMX3ApiPython.Motion_StopCommand_axis_set)
    dec = property(_WMX3ApiPython.Motion_StopCommand_dec_get, _WMX3ApiPython.Motion_StopCommand_dec_set)

    def __init__(self):
        _WMX3ApiPython.Motion_StopCommand_swiginit(self, _WMX3ApiPython.new_Motion_StopCommand())
    __swig_destroy__ = _WMX3ApiPython.delete_Motion_StopCommand

# Register Motion_StopCommand in _WMX3ApiPython:
_WMX3ApiPython.Motion_StopCommand_swigregister(Motion_StopCommand)
class Motion_TimeCommand(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def GetData(self, timeCommand):
        return _WMX3ApiPython.Motion_TimeCommand_GetData(self, timeCommand)
    axis = property(_WMX3ApiPython.Motion_TimeCommand_axis_get, _WMX3ApiPython.Motion_TimeCommand_axis_set)
    timeMilliseconds = property(_WMX3ApiPython.Motion_TimeCommand_timeMilliseconds_get, _WMX3ApiPython.Motion_TimeCommand_timeMilliseconds_set)

    def __init__(self):
        _WMX3ApiPython.Motion_TimeCommand_swiginit(self, _WMX3ApiPython.new_Motion_TimeCommand())
    __swig_destroy__ = _WMX3ApiPython.delete_Motion_TimeCommand

# Register Motion_TimeCommand in _WMX3ApiPython:
_WMX3ApiPython.Motion_TimeCommand_swigregister(Motion_TimeCommand)
class Motion_SimulatePosCommand(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def GetData(self, simulatePosCommand):
        return _WMX3ApiPython.Motion_SimulatePosCommand_GetData(self, simulatePosCommand)
    posCommand = property(_WMX3ApiPython.Motion_SimulatePosCommand_posCommand_get, _WMX3ApiPython.Motion_SimulatePosCommand_posCommand_set)
    setStartPos = property(_WMX3ApiPython.Motion_SimulatePosCommand_setStartPos_get, _WMX3ApiPython.Motion_SimulatePosCommand_setStartPos_set)
    startPos = property(_WMX3ApiPython.Motion_SimulatePosCommand_startPos_get, _WMX3ApiPython.Motion_SimulatePosCommand_startPos_set)

    def __init__(self):
        _WMX3ApiPython.Motion_SimulatePosCommand_swiginit(self, _WMX3ApiPython.new_Motion_SimulatePosCommand())
    __swig_destroy__ = _WMX3ApiPython.delete_Motion_SimulatePosCommand

# Register Motion_SimulatePosCommand in _WMX3ApiPython:
_WMX3ApiPython.Motion_SimulatePosCommand_swigregister(Motion_SimulatePosCommand)
class Motion_SimulateLinearIntplCommand(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def GetData(self, simulateLinearIntplCommand):
        return _WMX3ApiPython.Motion_SimulateLinearIntplCommand_GetData(self, simulateLinearIntplCommand)
    linearIntplCommand = property(_WMX3ApiPython.Motion_SimulateLinearIntplCommand_linearIntplCommand_get, _WMX3ApiPython.Motion_SimulateLinearIntplCommand_linearIntplCommand_set)
    setStartPos = property(_WMX3ApiPython.Motion_SimulateLinearIntplCommand_setStartPos_get, _WMX3ApiPython.Motion_SimulateLinearIntplCommand_setStartPos_set)

    def SetSetStartPos(self, index, value):
        return _WMX3ApiPython.Motion_SimulateLinearIntplCommand_SetSetStartPos(self, index, value)

    def GetSetStartPos(self, index):
        return _WMX3ApiPython.Motion_SimulateLinearIntplCommand_GetSetStartPos(self, index)
    startPos = property(_WMX3ApiPython.Motion_SimulateLinearIntplCommand_startPos_get, _WMX3ApiPython.Motion_SimulateLinearIntplCommand_startPos_set)

    def SetStartPos(self, index, value):
        return _WMX3ApiPython.Motion_SimulateLinearIntplCommand_SetStartPos(self, index, value)

    def GetStartPos(self, index):
        return _WMX3ApiPython.Motion_SimulateLinearIntplCommand_GetStartPos(self, index)

    def __init__(self):
        _WMX3ApiPython.Motion_SimulateLinearIntplCommand_swiginit(self, _WMX3ApiPython.new_Motion_SimulateLinearIntplCommand())
    __swig_destroy__ = _WMX3ApiPython.delete_Motion_SimulateLinearIntplCommand

# Register Motion_SimulateLinearIntplCommand in _WMX3ApiPython:
_WMX3ApiPython.Motion_SimulateLinearIntplCommand_swigregister(Motion_SimulateLinearIntplCommand)
class Motion_WaitCondition(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def GetData(self, waitCondition):
        return _WMX3ApiPython.Motion_WaitCondition_GetData(self, waitCondition)
    waitConditionType = property(_WMX3ApiPython.Motion_WaitCondition_waitConditionType_get, _WMX3ApiPython.Motion_WaitCondition_waitConditionType_set)
    axisCount = property(_WMX3ApiPython.Motion_WaitCondition_axisCount_get, _WMX3ApiPython.Motion_WaitCondition_axisCount_set)
    axis = property(_WMX3ApiPython.Motion_WaitCondition_axis_get, _WMX3ApiPython.Motion_WaitCondition_axis_set)

    def SetAxis(self, index, value):
        return _WMX3ApiPython.Motion_WaitCondition_SetAxis(self, index, value)

    def GetAxis(self, index):
        return _WMX3ApiPython.Motion_WaitCondition_GetAxis(self, index)
    eventID = property(_WMX3ApiPython.Motion_WaitCondition_eventID_get, _WMX3ApiPython.Motion_WaitCondition_eventID_set)

    def __init__(self):
        _WMX3ApiPython.Motion_WaitCondition_swiginit(self, _WMX3ApiPython.new_Motion_WaitCondition())
    __swig_destroy__ = _WMX3ApiPython.delete_Motion_WaitCondition

# Register Motion_WaitCondition in _WMX3ApiPython:
_WMX3ApiPython.Motion_WaitCondition_swigregister(Motion_WaitCondition)
class Motion(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, cm):
        _WMX3ApiPython.Motion_swiginit(self, _WMX3ApiPython.new_Motion(cm))
    __swig_destroy__ = _WMX3ApiPython.delete_Motion

    def IsDeviceValid(self):
        return _WMX3ApiPython.Motion_IsDeviceValid(self)

    def StartPos(self, *args):
        return _WMX3ApiPython.Motion_StartPos(self, *args)

    def StartMov(self, *args):
        return _WMX3ApiPython.Motion_StartMov(self, *args)

    def StartPos_Trigger(self, *args):
        return _WMX3ApiPython.Motion_StartPos_Trigger(self, *args)

    def StartMov_Trigger(self, *args):
        return _WMX3ApiPython.Motion_StartMov_Trigger(self, *args)

    def StartPos_TriggerEvents(self, *args):
        return _WMX3ApiPython.Motion_StartPos_TriggerEvents(self, *args)

    def StartMov_TriggerEvents(self, *args):
        return _WMX3ApiPython.Motion_StartMov_TriggerEvents(self, *args)

    def StartLinearIntplPos(self, pLinearIntplCommand):
        return _WMX3ApiPython.Motion_StartLinearIntplPos(self, pLinearIntplCommand)

    def StartLinearIntplMov(self, pLinearIntplCommand):
        return _WMX3ApiPython.Motion_StartLinearIntplMov(self, pLinearIntplCommand)

    def StartLinearIntplPos_Trigger(self, pLinearIntplCommand, pTrigger):
        return _WMX3ApiPython.Motion_StartLinearIntplPos_Trigger(self, pLinearIntplCommand, pTrigger)

    def StartLinearIntplMov_Trigger(self, pLinearIntplCommand, pTrigger):
        return _WMX3ApiPython.Motion_StartLinearIntplMov_Trigger(self, pLinearIntplCommand, pTrigger)

    def StartLinearIntplPos_TriggerEvents(self, pLinearIntplCommand, pTriggerEvents):
        return _WMX3ApiPython.Motion_StartLinearIntplPos_TriggerEvents(self, pLinearIntplCommand, pTriggerEvents)

    def StartLinearIntplMov_TriggerEvents(self, pLinearIntplCommand, pTriggerEvents):
        return _WMX3ApiPython.Motion_StartLinearIntplMov_TriggerEvents(self, pLinearIntplCommand, pTriggerEvents)

    def StartCircularIntplPos_CenterAndLength(self, pCircularIntplCommand):
        return _WMX3ApiPython.Motion_StartCircularIntplPos_CenterAndLength(self, pCircularIntplCommand)

    def StartCircularIntplMov_CenterAndLength(self, pCircularIntplCommand):
        return _WMX3ApiPython.Motion_StartCircularIntplMov_CenterAndLength(self, pCircularIntplCommand)

    def StartCircularIntplPos_CenterAndEnd(self, pCircularIntplCommand):
        return _WMX3ApiPython.Motion_StartCircularIntplPos_CenterAndEnd(self, pCircularIntplCommand)

    def StartCircularIntplMov_CenterAndEnd(self, pCircularIntplCommand):
        return _WMX3ApiPython.Motion_StartCircularIntplMov_CenterAndEnd(self, pCircularIntplCommand)

    def StartCircularIntplPos_ThroughAndEnd(self, pCircularIntplCommand):
        return _WMX3ApiPython.Motion_StartCircularIntplPos_ThroughAndEnd(self, pCircularIntplCommand)

    def StartCircularIntplMov_ThroughAndEnd(self, pCircularIntplCommand):
        return _WMX3ApiPython.Motion_StartCircularIntplMov_ThroughAndEnd(self, pCircularIntplCommand)

    def StartCircularIntplPos_LengthAndEnd(self, pCircularIntplCommand):
        return _WMX3ApiPython.Motion_StartCircularIntplPos_LengthAndEnd(self, pCircularIntplCommand)

    def StartCircularIntplMov_LengthAndEnd(self, pCircularIntplCommand):
        return _WMX3ApiPython.Motion_StartCircularIntplMov_LengthAndEnd(self, pCircularIntplCommand)

    def StartCircularIntplPos_RadiusAndEnd(self, pCircularIntplCommand):
        return _WMX3ApiPython.Motion_StartCircularIntplPos_RadiusAndEnd(self, pCircularIntplCommand)

    def StartCircularIntplMov_RadiusAndEnd(self, pCircularIntplCommand):
        return _WMX3ApiPython.Motion_StartCircularIntplMov_RadiusAndEnd(self, pCircularIntplCommand)

    def StartCircularIntplPos_ThroughAndEnd3D(self, pCircularIntplCommand):
        return _WMX3ApiPython.Motion_StartCircularIntplPos_ThroughAndEnd3D(self, pCircularIntplCommand)

    def StartCircularIntplMov_ThroughAndEnd3D(self, pCircularIntplCommand):
        return _WMX3ApiPython.Motion_StartCircularIntplMov_ThroughAndEnd3D(self, pCircularIntplCommand)

    def StartCircularIntplPos_CenterAndLength_Trigger(self, pCircularIntplCommand, pTrigger):
        return _WMX3ApiPython.Motion_StartCircularIntplPos_CenterAndLength_Trigger(self, pCircularIntplCommand, pTrigger)

    def StartCircularIntplMov_CenterAndLength_Trigger(self, pCircularIntplCommand, pTrigger):
        return _WMX3ApiPython.Motion_StartCircularIntplMov_CenterAndLength_Trigger(self, pCircularIntplCommand, pTrigger)

    def StartCircularIntplPos_CenterAndEnd_Trigger(self, pCircularIntplCommand, pTrigger):
        return _WMX3ApiPython.Motion_StartCircularIntplPos_CenterAndEnd_Trigger(self, pCircularIntplCommand, pTrigger)

    def StartCircularIntplMov_CenterAndEnd_Trigger(self, pCircularIntplCommand, pTrigger):
        return _WMX3ApiPython.Motion_StartCircularIntplMov_CenterAndEnd_Trigger(self, pCircularIntplCommand, pTrigger)

    def StartCircularIntplPos_ThroughAndEnd_Trigger(self, pCircularIntplCommand, pTrigger):
        return _WMX3ApiPython.Motion_StartCircularIntplPos_ThroughAndEnd_Trigger(self, pCircularIntplCommand, pTrigger)

    def StartCircularIntplMov_ThroughAndEnd_Trigger(self, pCircularIntplCommand, pTrigger):
        return _WMX3ApiPython.Motion_StartCircularIntplMov_ThroughAndEnd_Trigger(self, pCircularIntplCommand, pTrigger)

    def StartCircularIntplPos_LengthAndEnd_Trigger(self, pCircularIntplCommand, pTrigger):
        return _WMX3ApiPython.Motion_StartCircularIntplPos_LengthAndEnd_Trigger(self, pCircularIntplCommand, pTrigger)

    def StartCircularIntplMov_LengthAndEnd_Trigger(self, pCircularIntplCommand, pTrigger):
        return _WMX3ApiPython.Motion_StartCircularIntplMov_LengthAndEnd_Trigger(self, pCircularIntplCommand, pTrigger)

    def StartCircularIntplPos_RadiusAndEnd_Trigger(self, pCircularIntplCommand, pTrigger):
        return _WMX3ApiPython.Motion_StartCircularIntplPos_RadiusAndEnd_Trigger(self, pCircularIntplCommand, pTrigger)

    def StartCircularIntplMov_RadiusAndEnd_Trigger(self, pCircularIntplCommand, pTrigger):
        return _WMX3ApiPython.Motion_StartCircularIntplMov_RadiusAndEnd_Trigger(self, pCircularIntplCommand, pTrigger)

    def StartCircularIntplPos_ThroughAndEnd3D_Trigger(self, pCircularIntplCommand, pTrigger):
        return _WMX3ApiPython.Motion_StartCircularIntplPos_ThroughAndEnd3D_Trigger(self, pCircularIntplCommand, pTrigger)

    def StartCircularIntplMov_ThroughAndEnd3D_Trigger(self, pCircularIntplCommand, pTrigger):
        return _WMX3ApiPython.Motion_StartCircularIntplMov_ThroughAndEnd3D_Trigger(self, pCircularIntplCommand, pTrigger)

    def StartCircularIntplPos_CenterAndLength_TriggerEvents(self, pCircularIntplCommand, pTriggerEvents):
        return _WMX3ApiPython.Motion_StartCircularIntplPos_CenterAndLength_TriggerEvents(self, pCircularIntplCommand, pTriggerEvents)

    def StartCircularIntplMov_CenterAndLength_TriggerEvents(self, pCircularIntplCommand, pTriggerEvents):
        return _WMX3ApiPython.Motion_StartCircularIntplMov_CenterAndLength_TriggerEvents(self, pCircularIntplCommand, pTriggerEvents)

    def StartCircularIntplPos_CenterAndEnd_TriggerEvents(self, pCircularIntplCommand, pTriggerEvents):
        return _WMX3ApiPython.Motion_StartCircularIntplPos_CenterAndEnd_TriggerEvents(self, pCircularIntplCommand, pTriggerEvents)

    def StartCircularIntplMov_CenterAndEnd_TriggerEvents(self, pCircularIntplCommand, pTriggerEvents):
        return _WMX3ApiPython.Motion_StartCircularIntplMov_CenterAndEnd_TriggerEvents(self, pCircularIntplCommand, pTriggerEvents)

    def StartCircularIntplPos_ThroughAndEnd_TriggerEvents(self, pCircularIntplCommand, pTriggerEvents):
        return _WMX3ApiPython.Motion_StartCircularIntplPos_ThroughAndEnd_TriggerEvents(self, pCircularIntplCommand, pTriggerEvents)

    def StartCircularIntplMov_ThroughAndEnd_TriggerEvents(self, pCircularIntplCommand, pTriggerEvents):
        return _WMX3ApiPython.Motion_StartCircularIntplMov_ThroughAndEnd_TriggerEvents(self, pCircularIntplCommand, pTriggerEvents)

    def StartCircularIntplPos_LengthAndEnd_TriggerEvents(self, pCircularIntplCommand, pTriggerEvents):
        return _WMX3ApiPython.Motion_StartCircularIntplPos_LengthAndEnd_TriggerEvents(self, pCircularIntplCommand, pTriggerEvents)

    def StartCircularIntplMov_LengthAndEnd_TriggerEvents(self, pCircularIntplCommand, pTriggerEvents):
        return _WMX3ApiPython.Motion_StartCircularIntplMov_LengthAndEnd_TriggerEvents(self, pCircularIntplCommand, pTriggerEvents)

    def StartCircularIntplPos_RadiusAndEnd_TriggerEvents(self, pCircularIntplCommand, pTriggerEvents):
        return _WMX3ApiPython.Motion_StartCircularIntplPos_RadiusAndEnd_TriggerEvents(self, pCircularIntplCommand, pTriggerEvents)

    def StartCircularIntplMov_RadiusAndEnd_TriggerEvents(self, pCircularIntplCommand, pTriggerEvents):
        return _WMX3ApiPython.Motion_StartCircularIntplMov_RadiusAndEnd_TriggerEvents(self, pCircularIntplCommand, pTriggerEvents)

    def StartCircularIntplPos_ThroughAndEnd3D_TriggerEvents(self, pCircularIntplCommand, pTriggerEvents):
        return _WMX3ApiPython.Motion_StartCircularIntplPos_ThroughAndEnd3D_TriggerEvents(self, pCircularIntplCommand, pTriggerEvents)

    def StartCircularIntplMov_ThroughAndEnd3D_TriggerEvents(self, pCircularIntplCommand, pTriggerEvents):
        return _WMX3ApiPython.Motion_StartCircularIntplMov_ThroughAndEnd3D_TriggerEvents(self, pCircularIntplCommand, pTriggerEvents)

    def StartHelicalIntplPos(self, pHelicalIntplCommand):
        return _WMX3ApiPython.Motion_StartHelicalIntplPos(self, pHelicalIntplCommand)

    def StartHelicalIntplMov(self, pHelicalIntplCommand):
        return _WMX3ApiPython.Motion_StartHelicalIntplMov(self, pHelicalIntplCommand)

    def StartHelicalIntplPos_Trigger(self, pHelicalIntplCommand, pTrigger):
        return _WMX3ApiPython.Motion_StartHelicalIntplPos_Trigger(self, pHelicalIntplCommand, pTrigger)

    def StartHelicalIntplMov_Trigger(self, pHelicalIntplCommand, pTrigger):
        return _WMX3ApiPython.Motion_StartHelicalIntplMov_Trigger(self, pHelicalIntplCommand, pTrigger)

    def StartHelicalIntplPos_TriggerEvents(self, pHelicalIntplCommand, pTriggerEvents):
        return _WMX3ApiPython.Motion_StartHelicalIntplPos_TriggerEvents(self, pHelicalIntplCommand, pTriggerEvents)

    def StartHelicalIntplMov_TriggerEvents(self, pHelicalIntplCommand, pTriggerEvents):
        return _WMX3ApiPython.Motion_StartHelicalIntplMov_TriggerEvents(self, pHelicalIntplCommand, pTriggerEvents)

    def StartVelToPos(self, *args):
        return _WMX3ApiPython.Motion_StartVelToPos(self, *args)

    def StartVelToMov(self, *args):
        return _WMX3ApiPython.Motion_StartVelToMov(self, *args)

    def StartVelToPos_TriggerEvents(self, *args):
        return _WMX3ApiPython.Motion_StartVelToPos_TriggerEvents(self, *args)

    def StartVelToMov_TriggerEvents(self, *args):
        return _WMX3ApiPython.Motion_StartVelToMov_TriggerEvents(self, *args)

    def StartTrqToPos(self, *args):
        return _WMX3ApiPython.Motion_StartTrqToPos(self, *args)

    def StartTrqToMov(self, *args):
        return _WMX3ApiPython.Motion_StartTrqToMov(self, *args)

    def StartTrqToPos_TriggerEvents(self, *args):
        return _WMX3ApiPython.Motion_StartTrqToPos_TriggerEvents(self, *args)

    def StartTrqToMov_TriggerEvents(self, *args):
        return _WMX3ApiPython.Motion_StartTrqToMov_TriggerEvents(self, *args)

    def StartJog(self, *args):
        return _WMX3ApiPython.Motion_StartJog(self, *args)

    def StartJog_TimedJog(self, *args):
        return _WMX3ApiPython.Motion_StartJog_TimedJog(self, *args)

    def StartPosToJog_Trigger(self, *args):
        return _WMX3ApiPython.Motion_StartPosToJog_Trigger(self, *args)

    def StartPosToJog_TriggerEvents(self, *args):
        return _WMX3ApiPython.Motion_StartPosToJog_TriggerEvents(self, *args)

    def StartPosToJog_PosToJog(self, *args):
        return _WMX3ApiPython.Motion_StartPosToJog_PosToJog(self, *args)

    def StartMovToJog(self, *args):
        return _WMX3ApiPython.Motion_StartMovToJog(self, *args)

    def Stop(self, axis):
        return _WMX3ApiPython.Motion_Stop(self, axis)

    def Stop_AxisSel(self, pAxisSelection):
        return _WMX3ApiPython.Motion_Stop_AxisSel(self, pAxisSelection)

    def Stop_Dec(self, axis, dec):
        return _WMX3ApiPython.Motion_Stop_Dec(self, axis, dec)

    def Stop_StopCommand(self, numCommands, pStopCommand):
        return _WMX3ApiPython.Motion_Stop_StopCommand(self, numCommands, pStopCommand)

    def ExecQuickStop(self, axis):
        return _WMX3ApiPython.Motion_ExecQuickStop(self, axis)

    def ExecQuickStop_AxisSel(self, pAxisSelection):
        return _WMX3ApiPython.Motion_ExecQuickStop_AxisSel(self, pAxisSelection)

    def ExecTimedStop_TimeMilli(self, axis, timeMilliseconds):
        return _WMX3ApiPython.Motion_ExecTimedStop_TimeMilli(self, axis, timeMilliseconds)

    def ExecTimedStop_AxisSel(self, pAxisSelection, timeMilliseconds):
        return _WMX3ApiPython.Motion_ExecTimedStop_AxisSel(self, pAxisSelection, timeMilliseconds)

    def ExecTimedStop_TimeCmd(self, numCommands, pTimeCommand):
        return _WMX3ApiPython.Motion_ExecTimedStop_TimeCmd(self, numCommands, pTimeCommand)

    def Wait(self, axis):
        return _WMX3ApiPython.Motion_Wait(self, axis)

    def Wait_AxisSel(self, pAxisSelection):
        return _WMX3ApiPython.Motion_Wait_AxisSel(self, pAxisSelection)

    def Wait_WaitCondition(self, pWaitCondition):
        return _WMX3ApiPython.Motion_Wait_WaitCondition(self, pWaitCondition)

    def Wait_TimeMilli(self, axis, waitTimeMilliseconds):
        return _WMX3ApiPython.Motion_Wait_TimeMilli(self, axis, waitTimeMilliseconds)

    def Wait_AxisSel_TimeMilli(self, pAxisSelection, waitTimeMilliseconds):
        return _WMX3ApiPython.Motion_Wait_AxisSel_TimeMilli(self, pAxisSelection, waitTimeMilliseconds)

    def Wait_WaitCondition_TimeMilli(self, pWaitCondition, waitTimeMilliseconds):
        return _WMX3ApiPython.Motion_Wait_WaitCondition_TimeMilli(self, pWaitCondition, waitTimeMilliseconds)

    def Pause(self, axis):
        return _WMX3ApiPython.Motion_Pause(self, axis)

    def Pause_AxisSel(self, pAxisSelection):
        return _WMX3ApiPython.Motion_Pause_AxisSel(self, pAxisSelection)

    def Resume(self, axis):
        return _WMX3ApiPython.Motion_Resume(self, axis)

    def Resume_AxisSel(self, pAxisSelection):
        return _WMX3ApiPython.Motion_Resume_AxisSel(self, pAxisSelection)

    def OverridePos(self, *args):
        return _WMX3ApiPython.Motion_OverridePos(self, *args)

    def OverrideMov(self, *args):
        return _WMX3ApiPython.Motion_OverrideMov(self, *args)

    def OverrideVel(self, *args):
        return _WMX3ApiPython.Motion_OverrideVel(self, *args)

    def OverrideAcc(self, *args):
        return _WMX3ApiPython.Motion_OverrideAcc(self, *args)

    def OverrideDec(self, *args):
        return _WMX3ApiPython.Motion_OverrideDec(self, *args)

    def OverrideJerkAcc(self, *args):
        return _WMX3ApiPython.Motion_OverrideJerkAcc(self, *args)

    def OverrideJerkDec(self, *args):
        return _WMX3ApiPython.Motion_OverrideJerkDec(self, *args)

    def OverrideProfile(self, *args):
        return _WMX3ApiPython.Motion_OverrideProfile(self, *args)

    def StopJogAtPos(self, *args):
        return _WMX3ApiPython.Motion_StopJogAtPos(self, *args)

    def SuperimposeMov(self, *args):
        return _WMX3ApiPython.Motion_SuperimposeMov(self, *args)

    def StopSuperimpose(self, axis):
        return _WMX3ApiPython.Motion_StopSuperimpose(self, axis)

    def StopSuperimpose_AxisSel(self, pAxisSelection):
        return _WMX3ApiPython.Motion_StopSuperimpose_AxisSel(self, pAxisSelection)

    def SimulatePos(self, pSimulatePosCommand):
        pPeakVelocity = doublep()
        pTotalTimeMilliseconds = doublep()
        pAccelerationTimeMilliseconds = doublep()
        pCruiseTimeMilliseconds = doublep()
        pDecelerationTimeMilliseconds = doublep()
        ret = _WMX3ApiPython.Motion_SimulatePos(self, pSimulatePosCommand, pPeakVelocity, pTotalTimeMilliseconds, pAccelerationTimeMilliseconds, pCruiseTimeMilliseconds, pDecelerationTimeMilliseconds)
        return ret, pPeakVelocity.value(), pTotalTimeMilliseconds.value(), pAccelerationTimeMilliseconds.value(), pCruiseTimeMilliseconds.value(), pDecelerationTimeMilliseconds.value()



    def SimulateLinearIntplPos(self, pSimulateLinearIntplCommand):
        pPeakVelocity = doublep()
        pTotalTimeMilliseconds = doublep()
        pAccelerationTimeMilliseconds = doublep()
        pCruiseTimeMilliseconds = doublep()
        pDecelerationTimeMilliseconds = doublep()
        ret = _WMX3ApiPython.Motion_SimulateLinearIntplPos(self, pSimulateLinearIntplCommand, pPeakVelocity, pTotalTimeMilliseconds, pAccelerationTimeMilliseconds, pCruiseTimeMilliseconds, pDecelerationTimeMilliseconds)
        return ret, pPeakVelocity.value(), pTotalTimeMilliseconds.value(), pAccelerationTimeMilliseconds.value(), pCruiseTimeMilliseconds.value(), pDecelerationTimeMilliseconds.value()



    def SimulatePosAtTime(self, pSimulatePosCommand, returnType, timeMilliseconds, pCalculatedPos, pCalculatedVel):
        return _WMX3ApiPython.Motion_SimulatePosAtTime(self, pSimulatePosCommand, returnType, timeMilliseconds, pCalculatedPos, pCalculatedVel)

    def SimulatePosAtTime_LinearIntpl(self, pSimulateLinearIntplCommand, timeMilliseconds, pPosArray, pMoveDistance, pRemainDistance, pTotalDistance):
        return _WMX3ApiPython.Motion_SimulatePosAtTime_LinearIntpl(self, pSimulateLinearIntplCommand, timeMilliseconds, pPosArray, pMoveDistance, pRemainDistance, pTotalDistance)

    def SimulateTimeAtPos(self, pSimulatePosCommand, specificPos, pMoveTimeMilliseconds, pRemainTimeMilliseconds):
        return _WMX3ApiPython.Motion_SimulateTimeAtPos(self, pSimulatePosCommand, specificPos, pMoveTimeMilliseconds, pRemainTimeMilliseconds)

    def SimulateTimeAtDist_LinearIntpl(self, pSimulateLinearIntplCommand, specificDistance, pMoveTimeMilliseconds, pRemainTimeMilliseconds, pTotalTimeMilliseconds):
        return _WMX3ApiPython.Motion_SimulateTimeAtDist_LinearIntpl(self, pSimulateLinearIntplCommand, specificDistance, pMoveTimeMilliseconds, pRemainTimeMilliseconds, pTotalTimeMilliseconds)

# Register Motion in _WMX3ApiPython:
_WMX3ApiPython.Motion_swigregister(Motion)
class Home_AxisHomeData(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def GetData(self, axisHomeData):
        return _WMX3ApiPython.Home_AxisHomeData_GetData(self, axisHomeData)

    def SetData(self, axisHomeData):
        return _WMX3ApiPython.Home_AxisHomeData_SetData(self, axisHomeData)
    distHStoZPulse = property(_WMX3ApiPython.Home_AxisHomeData_distHStoZPulse_get, _WMX3ApiPython.Home_AxisHomeData_distHStoZPulse_set)
    distLStoZPulse = property(_WMX3ApiPython.Home_AxisHomeData_distLStoZPulse_get, _WMX3ApiPython.Home_AxisHomeData_distLStoZPulse_set)
    latchedZPulseEncoder = property(_WMX3ApiPython.Home_AxisHomeData_latchedZPulseEncoder_get, _WMX3ApiPython.Home_AxisHomeData_latchedZPulseEncoder_set)
    latchedLimitSwitchEncoder = property(_WMX3ApiPython.Home_AxisHomeData_latchedLimitSwitchEncoder_get, _WMX3ApiPython.Home_AxisHomeData_latchedLimitSwitchEncoder_set)
    latchedHomeSwitchEncoder = property(_WMX3ApiPython.Home_AxisHomeData_latchedHomeSwitchEncoder_get, _WMX3ApiPython.Home_AxisHomeData_latchedHomeSwitchEncoder_set)
    latchedFirstHomeSwitchEncoder = property(_WMX3ApiPython.Home_AxisHomeData_latchedFirstHomeSwitchEncoder_get, _WMX3ApiPython.Home_AxisHomeData_latchedFirstHomeSwitchEncoder_set)
    latchedTouchProbeEncoder = property(_WMX3ApiPython.Home_AxisHomeData_latchedTouchProbeEncoder_get, _WMX3ApiPython.Home_AxisHomeData_latchedTouchProbeEncoder_set)
    distZPulseToMasterZPulse = property(_WMX3ApiPython.Home_AxisHomeData_distZPulseToMasterZPulse_get, _WMX3ApiPython.Home_AxisHomeData_distZPulseToMasterZPulse_set)
    distLSToMasterLS = property(_WMX3ApiPython.Home_AxisHomeData_distLSToMasterLS_get, _WMX3ApiPython.Home_AxisHomeData_distLSToMasterLS_set)
    distHSToMasterHS = property(_WMX3ApiPython.Home_AxisHomeData_distHSToMasterHS_get, _WMX3ApiPython.Home_AxisHomeData_distHSToMasterHS_set)

    def __init__(self):
        _WMX3ApiPython.Home_AxisHomeData_swiginit(self, _WMX3ApiPython.new_Home_AxisHomeData())
    __swig_destroy__ = _WMX3ApiPython.delete_Home_AxisHomeData

# Register Home_AxisHomeData in _WMX3ApiPython:
_WMX3ApiPython.Home_AxisHomeData_swigregister(Home_AxisHomeData)
class Home_HomeData(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def GetData(self, homeData):
        return _WMX3ApiPython.Home_HomeData_GetData(self, homeData)

    def SetData(self, homeData):
        return _WMX3ApiPython.Home_HomeData_SetData(self, homeData)
    axesHomeData = property(_WMX3ApiPython.Home_HomeData_axesHomeData_get, _WMX3ApiPython.Home_HomeData_axesHomeData_set)

    def SetAxesHomeData(self, index, value):
        return _WMX3ApiPython.Home_HomeData_SetAxesHomeData(self, index, value)

    def GetAxesHomeData(self, index):
        return _WMX3ApiPython.Home_HomeData_GetAxesHomeData(self, index)

    def __init__(self):
        _WMX3ApiPython.Home_HomeData_swiginit(self, _WMX3ApiPython.new_Home_HomeData())
    __swig_destroy__ = _WMX3ApiPython.delete_Home_HomeData

# Register Home_HomeData in _WMX3ApiPython:
_WMX3ApiPython.Home_HomeData_swigregister(Home_HomeData)
class Home(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, cm):
        _WMX3ApiPython.Home_swiginit(self, _WMX3ApiPython.new_Home(cm))
    __swig_destroy__ = _WMX3ApiPython.delete_Home

    def IsDeviceValid(self):
        return _WMX3ApiPython.Home_IsDeviceValid(self)

    def StartHome(self, axis):
        return _WMX3ApiPython.Home_StartHome(self, axis)

    def StartHome_AxisSel(self, pAxisSelection):
        return _WMX3ApiPython.Home_StartHome_AxisSel(self, pAxisSelection)

    def Continue(self, axis):
        return _WMX3ApiPython.Home_Continue(self, axis)

    def Continue_AxisSel(self, pAxisSelection):
        return _WMX3ApiPython.Home_Continue_AxisSel(self, pAxisSelection)

    def Cancel(self, axis):
        return _WMX3ApiPython.Home_Cancel(self, axis)

    def Cancel_AxisSel(self, pAxisSelection):
        return _WMX3ApiPython.Home_Cancel_AxisSel(self, pAxisSelection)

    def SetCommandPos(self, axis, position):
        return _WMX3ApiPython.Home_SetCommandPos(self, axis, position)

    def SetFeedbackPos(self, axis, position):
        return _WMX3ApiPython.Home_SetFeedbackPos(self, axis, position)

    def SetHomeDone(self, axis, value):
        return _WMX3ApiPython.Home_SetHomeDone(self, axis, value)

    def SetCommandPosToFeedbackPos(self, *args):
        return _WMX3ApiPython.Home_SetCommandPosToFeedbackPos(self, *args)

    def GetHomeData(self):
        pHomeData = Home_HomeData()
        ret = _WMX3ApiPython.Home_GetHomeData(self, pHomeData)
        return ret, pHomeData



# Register Home in _WMX3ApiPython:
_WMX3ApiPython.Home_swigregister(Home)
class Velocity_VelCommand(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def GetData(self, velCommand):
        return _WMX3ApiPython.Velocity_VelCommand_GetData(self, velCommand)
    axis = property(_WMX3ApiPython.Velocity_VelCommand_axis_get, _WMX3ApiPython.Velocity_VelCommand_axis_set)
    profile = property(_WMX3ApiPython.Velocity_VelCommand_profile_get, _WMX3ApiPython.Velocity_VelCommand_profile_set)

    def __init__(self):
        _WMX3ApiPython.Velocity_VelCommand_swiginit(self, _WMX3ApiPython.new_Velocity_VelCommand())
    __swig_destroy__ = _WMX3ApiPython.delete_Velocity_VelCommand

# Register Velocity_VelCommand in _WMX3ApiPython:
_WMX3ApiPython.Velocity_VelCommand_swigregister(Velocity_VelCommand)
class Velocity_TimedVelCommand(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def GetData(self, timedVelCommand):
        return _WMX3ApiPython.Velocity_TimedVelCommand_GetData(self, timedVelCommand)
    axis = property(_WMX3ApiPython.Velocity_TimedVelCommand_axis_get, _WMX3ApiPython.Velocity_TimedVelCommand_axis_set)
    runTimeMilliseconds = property(_WMX3ApiPython.Velocity_TimedVelCommand_runTimeMilliseconds_get, _WMX3ApiPython.Velocity_TimedVelCommand_runTimeMilliseconds_set)
    profile = property(_WMX3ApiPython.Velocity_TimedVelCommand_profile_get, _WMX3ApiPython.Velocity_TimedVelCommand_profile_set)

    def __init__(self):
        _WMX3ApiPython.Velocity_TimedVelCommand_swiginit(self, _WMX3ApiPython.new_Velocity_TimedVelCommand())
    __swig_destroy__ = _WMX3ApiPython.delete_Velocity_TimedVelCommand

# Register Velocity_TimedVelCommand in _WMX3ApiPython:
_WMX3ApiPython.Velocity_TimedVelCommand_swigregister(Velocity_TimedVelCommand)
class Velocity_TriggerVelCommand(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def GetData(self, triggerVelCommand):
        return _WMX3ApiPython.Velocity_TriggerVelCommand_GetData(self, triggerVelCommand)
    axis = property(_WMX3ApiPython.Velocity_TriggerVelCommand_axis_get, _WMX3ApiPython.Velocity_TriggerVelCommand_axis_set)
    profile = property(_WMX3ApiPython.Velocity_TriggerVelCommand_profile_get, _WMX3ApiPython.Velocity_TriggerVelCommand_profile_set)
    trigger = property(_WMX3ApiPython.Velocity_TriggerVelCommand_trigger_get, _WMX3ApiPython.Velocity_TriggerVelCommand_trigger_set)

    def __init__(self):
        _WMX3ApiPython.Velocity_TriggerVelCommand_swiginit(self, _WMX3ApiPython.new_Velocity_TriggerVelCommand())
    __swig_destroy__ = _WMX3ApiPython.delete_Velocity_TriggerVelCommand

# Register Velocity_TriggerVelCommand in _WMX3ApiPython:
_WMX3ApiPython.Velocity_TriggerVelCommand_swigregister(Velocity_TriggerVelCommand)
class Velocity_TimeCommand(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def GetData(self, timeCommand):
        return _WMX3ApiPython.Velocity_TimeCommand_GetData(self, timeCommand)
    axis = property(_WMX3ApiPython.Velocity_TimeCommand_axis_get, _WMX3ApiPython.Velocity_TimeCommand_axis_set)
    timeMilliseconds = property(_WMX3ApiPython.Velocity_TimeCommand_timeMilliseconds_get, _WMX3ApiPython.Velocity_TimeCommand_timeMilliseconds_set)

    def __init__(self):
        _WMX3ApiPython.Velocity_TimeCommand_swiginit(self, _WMX3ApiPython.new_Velocity_TimeCommand())
    __swig_destroy__ = _WMX3ApiPython.delete_Velocity_TimeCommand

# Register Velocity_TimeCommand in _WMX3ApiPython:
_WMX3ApiPython.Velocity_TimeCommand_swigregister(Velocity_TimeCommand)
class Velocity(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, cm):
        _WMX3ApiPython.Velocity_swiginit(self, _WMX3ApiPython.new_Velocity(cm))
    __swig_destroy__ = _WMX3ApiPython.delete_Velocity

    def IsDeviceValid(self):
        return _WMX3ApiPython.Velocity_IsDeviceValid(self)

    def StartVel_MaxTrq(self, pVelCommand, maxTrqLimit):
        return _WMX3ApiPython.Velocity_StartVel_MaxTrq(self, pVelCommand, maxTrqLimit)

    def StartVel(self, *args):
        return _WMX3ApiPython.Velocity_StartVel(self, *args)

    def StartVel_TimedVel(self, *args):
        return _WMX3ApiPython.Velocity_StartVel_TimedVel(self, *args)

    def Stop(self, axis):
        return _WMX3ApiPython.Velocity_Stop(self, axis)

    def Stop_AxisSel(self, pAxisSelection):
        return _WMX3ApiPython.Velocity_Stop_AxisSel(self, pAxisSelection)

    def ExecQuickStop(self, axis):
        return _WMX3ApiPython.Velocity_ExecQuickStop(self, axis)

    def ExecQuickStop_AxisSel(self, pAxisSelection):
        return _WMX3ApiPython.Velocity_ExecQuickStop_AxisSel(self, pAxisSelection)

    def ExecTimedStop_TimeMilli(self, axis, timeMilliseconds):
        return _WMX3ApiPython.Velocity_ExecTimedStop_TimeMilli(self, axis, timeMilliseconds)

    def ExecTimedStop_AxisSel(self, pAxisSelection, timeMilliseconds):
        return _WMX3ApiPython.Velocity_ExecTimedStop_AxisSel(self, pAxisSelection, timeMilliseconds)

    def ExecTimedStop_TimeCmd(self, numCommands, pTimeCommand):
        return _WMX3ApiPython.Velocity_ExecTimedStop_TimeCmd(self, numCommands, pTimeCommand)

    def SetMaxMotorSpeed(self, axis, speed):
        return _WMX3ApiPython.Velocity_SetMaxMotorSpeed(self, axis, speed)

    def GetMaxMotorSpeed(self, axis):
        pSpeed = doublep()
        ret = _WMX3ApiPython.Velocity_GetMaxMotorSpeed(self, axis, pSpeed)
        return ret, pSpeed.value()



    def OverrideVel(self, *args):
        return _WMX3ApiPython.Velocity_OverrideVel(self, *args)

    def StartPosToVel_TriggerVel(self, *args):
        return _WMX3ApiPython.Velocity_StartPosToVel_TriggerVel(self, *args)

    def StartPosToVel_TriggerEvents(self, *args):
        return _WMX3ApiPython.Velocity_StartPosToVel_TriggerEvents(self, *args)

    def StartTrqToVel_TriggerVel(self, *args):
        return _WMX3ApiPython.Velocity_StartTrqToVel_TriggerVel(self, *args)

    def StartTrqToVel_TriggerEvents(self, *args):
        return _WMX3ApiPython.Velocity_StartTrqToVel_TriggerEvents(self, *args)

# Register Velocity in _WMX3ApiPython:
_WMX3ApiPython.Velocity_swigregister(Velocity)
class Torque_TrqCommand(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def GetData(self, trqCommand):
        return _WMX3ApiPython.Torque_TrqCommand_GetData(self, trqCommand)
    axis = property(_WMX3ApiPython.Torque_TrqCommand_axis_get, _WMX3ApiPython.Torque_TrqCommand_axis_set)
    torque = property(_WMX3ApiPython.Torque_TrqCommand_torque_get, _WMX3ApiPython.Torque_TrqCommand_torque_set)

    def __init__(self):
        _WMX3ApiPython.Torque_TrqCommand_swiginit(self, _WMX3ApiPython.new_Torque_TrqCommand())
    __swig_destroy__ = _WMX3ApiPython.delete_Torque_TrqCommand

# Register Torque_TrqCommand in _WMX3ApiPython:
_WMX3ApiPython.Torque_TrqCommand_swigregister(Torque_TrqCommand)
class Torque_TriggerTrqCommand(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def GetData(self, triggerTrqCommand):
        return _WMX3ApiPython.Torque_TriggerTrqCommand_GetData(self, triggerTrqCommand)
    axis = property(_WMX3ApiPython.Torque_TriggerTrqCommand_axis_get, _WMX3ApiPython.Torque_TriggerTrqCommand_axis_set)
    torque = property(_WMX3ApiPython.Torque_TriggerTrqCommand_torque_get, _WMX3ApiPython.Torque_TriggerTrqCommand_torque_set)
    trigger = property(_WMX3ApiPython.Torque_TriggerTrqCommand_trigger_get, _WMX3ApiPython.Torque_TriggerTrqCommand_trigger_set)

    def __init__(self):
        _WMX3ApiPython.Torque_TriggerTrqCommand_swiginit(self, _WMX3ApiPython.new_Torque_TriggerTrqCommand())
    __swig_destroy__ = _WMX3ApiPython.delete_Torque_TriggerTrqCommand

# Register Torque_TriggerTrqCommand in _WMX3ApiPython:
_WMX3ApiPython.Torque_TriggerTrqCommand_swigregister(Torque_TriggerTrqCommand)
class Torque(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, cm):
        _WMX3ApiPython.Torque_swiginit(self, _WMX3ApiPython.new_Torque(cm))
    __swig_destroy__ = _WMX3ApiPython.delete_Torque

    def IsDeviceValid(self):
        return _WMX3ApiPython.Torque_IsDeviceValid(self)

    def SetMaxTrqLimit(self, axis, torque):
        return _WMX3ApiPython.Torque_SetMaxTrqLimit(self, axis, torque)

    def GetMaxTrqLimit(self, axis):
        pTorque = doublep()
        ret = _WMX3ApiPython.Torque_GetMaxTrqLimit(self, axis, pTorque)
        return ret, pTorque.value()



    def SetPositiveTrqLimit(self, axis, torque):
        return _WMX3ApiPython.Torque_SetPositiveTrqLimit(self, axis, torque)

    def GetPositiveTrqLimit(self, axis):
        pTorque = doublep()
        ret = _WMX3ApiPython.Torque_GetPositiveTrqLimit(self, axis, pTorque)
        return ret, pTorque.value()



    def SetNegativeTrqLimit(self, axis, torque):
        return _WMX3ApiPython.Torque_SetNegativeTrqLimit(self, axis, torque)

    def GetNegativeTrqLimit(self, axis):
        pTorque = doublep()
        ret = _WMX3ApiPython.Torque_GetNegativeTrqLimit(self, axis, pTorque)
        return ret, pTorque.value()



    def StartTrq(self, *args):
        return _WMX3ApiPython.Torque_StartTrq(self, *args)

    def StartTrq_MaxMotorSpeed(self, pTrqCommand, maxMotorSpeed):
        return _WMX3ApiPython.Torque_StartTrq_MaxMotorSpeed(self, pTrqCommand, maxMotorSpeed)

    def StartRampTimeTrq(self, *args):
        return _WMX3ApiPython.Torque_StartRampTimeTrq(self, *args)

    def StartRampRateTrq(self, *args):
        return _WMX3ApiPython.Torque_StartRampRateTrq(self, *args)

    def StopTrq(self, axis):
        return _WMX3ApiPython.Torque_StopTrq(self, axis)

    def StopTrq_AxisSel(self, pAxisSelection):
        return _WMX3ApiPython.Torque_StopTrq_AxisSel(self, pAxisSelection)

    def StartPosToTrq(self, *args):
        return _WMX3ApiPython.Torque_StartPosToTrq(self, *args)

    def StartPosToTrq_TriggerEvents(self, *args):
        return _WMX3ApiPython.Torque_StartPosToTrq_TriggerEvents(self, *args)

    def StartPosToRampTimeTrq(self, pTrqCommand, rampCycleTime, pTrigger):
        return _WMX3ApiPython.Torque_StartPosToRampTimeTrq(self, pTrqCommand, rampCycleTime, pTrigger)

    def StartPosToRampTimeTrq_TriggerEvents(self, pTrqCommand, rampCycleTime, pTriggerEvents):
        return _WMX3ApiPython.Torque_StartPosToRampTimeTrq_TriggerEvents(self, pTrqCommand, rampCycleTime, pTriggerEvents)

    def StartPosToRampRateTrq(self, pTrqCommand, rampRate, pTrigger):
        return _WMX3ApiPython.Torque_StartPosToRampRateTrq(self, pTrqCommand, rampRate, pTrigger)

    def StartPosToRampRateTrq_TriggerEvents(self, pTrqCommand, rampRate, pTriggerEvents):
        return _WMX3ApiPython.Torque_StartPosToRampRateTrq_TriggerEvents(self, pTrqCommand, rampRate, pTriggerEvents)

    def StartVelToTrq(self, *args):
        return _WMX3ApiPython.Torque_StartVelToTrq(self, *args)

    def StartVelToTrq_TriggerEvents(self, *args):
        return _WMX3ApiPython.Torque_StartVelToTrq_TriggerEvents(self, *args)

    def StartVelToRampTimeTrq(self, pTrqCommand, rampCycleTime, pTrigger):
        return _WMX3ApiPython.Torque_StartVelToRampTimeTrq(self, pTrqCommand, rampCycleTime, pTrigger)

    def StartVelToRampTimeTrq_TriggerEvents(self, pTrqCommand, rampCycleTime, pTriggerEvents):
        return _WMX3ApiPython.Torque_StartVelToRampTimeTrq_TriggerEvents(self, pTrqCommand, rampCycleTime, pTriggerEvents)

    def StartVelToRampRateTrq(self, pTrqCommand, rampRate, pTrigger):
        return _WMX3ApiPython.Torque_StartVelToRampRateTrq(self, pTrqCommand, rampRate, pTrigger)

    def StartVelToRampRateTrq_TriggerEvents(self, pTrqCommand, rampRate, pTriggerEvents):
        return _WMX3ApiPython.Torque_StartVelToRampRateTrq_TriggerEvents(self, pTrqCommand, rampRate, pTriggerEvents)

# Register Torque in _WMX3ApiPython:
_WMX3ApiPython.Torque_swigregister(Torque)
class Sync_SyncGroupStartupType(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Normal = _WMX3ApiPython.Sync_SyncGroupStartupType_Normal
    CatchUp = _WMX3ApiPython.Sync_SyncGroupStartupType_CatchUp

    def __init__(self):
        _WMX3ApiPython.Sync_SyncGroupStartupType_swiginit(self, _WMX3ApiPython.new_Sync_SyncGroupStartupType())
    __swig_destroy__ = _WMX3ApiPython.delete_Sync_SyncGroupStartupType

# Register Sync_SyncGroupStartupType in _WMX3ApiPython:
_WMX3ApiPython.Sync_SyncGroupStartupType_swigregister(Sync_SyncGroupStartupType)
class Sync_SyncOptions(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def GetData(self, syncOptions):
        return _WMX3ApiPython.Sync_SyncOptions_GetData(self, syncOptions)
    useMasterFeedback = property(_WMX3ApiPython.Sync_SyncOptions_useMasterFeedback_get, _WMX3ApiPython.Sync_SyncOptions_useMasterFeedback_set)

    def __init__(self):
        _WMX3ApiPython.Sync_SyncOptions_swiginit(self, _WMX3ApiPython.new_Sync_SyncOptions())
    __swig_destroy__ = _WMX3ApiPython.delete_Sync_SyncOptions

# Register Sync_SyncOptions in _WMX3ApiPython:
_WMX3ApiPython.Sync_SyncOptions_swigregister(Sync_SyncOptions)
class Sync_SyncCombineOptions(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def GetData(self, syncCombineOptions):
        return _WMX3ApiPython.Sync_SyncCombineOptions_GetData(self, syncCombineOptions)
    useMaster1Feedback = property(_WMX3ApiPython.Sync_SyncCombineOptions_useMaster1Feedback_get, _WMX3ApiPython.Sync_SyncCombineOptions_useMaster1Feedback_set)
    useMaster2Feedback = property(_WMX3ApiPython.Sync_SyncCombineOptions_useMaster2Feedback_get, _WMX3ApiPython.Sync_SyncCombineOptions_useMaster2Feedback_set)

    def __init__(self):
        _WMX3ApiPython.Sync_SyncCombineOptions_swiginit(self, _WMX3ApiPython.new_Sync_SyncCombineOptions())
    __swig_destroy__ = _WMX3ApiPython.delete_Sync_SyncCombineOptions

# Register Sync_SyncCombineOptions in _WMX3ApiPython:
_WMX3ApiPython.Sync_SyncCombineOptions_swigregister(Sync_SyncCombineOptions)
class Sync_SyncGroup(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def GetData(self, syncGroup):
        return _WMX3ApiPython.Sync_SyncGroup_GetData(self, syncGroup)

    def SetData(self, syncGroup):
        return _WMX3ApiPython.Sync_SyncGroup_SetData(self, syncGroup)
    masterAxis = property(_WMX3ApiPython.Sync_SyncGroup_masterAxis_get, _WMX3ApiPython.Sync_SyncGroup_masterAxis_set)
    slaveAxisCount = property(_WMX3ApiPython.Sync_SyncGroup_slaveAxisCount_get, _WMX3ApiPython.Sync_SyncGroup_slaveAxisCount_set)
    slaveAxis = property(_WMX3ApiPython.Sync_SyncGroup_slaveAxis_get, _WMX3ApiPython.Sync_SyncGroup_slaveAxis_set)

    def SetSlaveAxis(self, index, value):
        return _WMX3ApiPython.Sync_SyncGroup_SetSlaveAxis(self, index, value)

    def GetSlaveAxis(self, index):
        return _WMX3ApiPython.Sync_SyncGroup_GetSlaveAxis(self, index)
    servoOnOffSynchronization = property(_WMX3ApiPython.Sync_SyncGroup_servoOnOffSynchronization_get, _WMX3ApiPython.Sync_SyncGroup_servoOnOffSynchronization_set)
    startupType = property(_WMX3ApiPython.Sync_SyncGroup_startupType_get, _WMX3ApiPython.Sync_SyncGroup_startupType_set)
    gantryLoopCycleRatio = property(_WMX3ApiPython.Sync_SyncGroup_gantryLoopCycleRatio_get, _WMX3ApiPython.Sync_SyncGroup_gantryLoopCycleRatio_set)
    maxCatchUpDistance = property(_WMX3ApiPython.Sync_SyncGroup_maxCatchUpDistance_get, _WMX3ApiPython.Sync_SyncGroup_maxCatchUpDistance_set)
    catchUpVelocity = property(_WMX3ApiPython.Sync_SyncGroup_catchUpVelocity_get, _WMX3ApiPython.Sync_SyncGroup_catchUpVelocity_set)
    catchUpAcc = property(_WMX3ApiPython.Sync_SyncGroup_catchUpAcc_get, _WMX3ApiPython.Sync_SyncGroup_catchUpAcc_set)
    syncErrorTolerance = property(_WMX3ApiPython.Sync_SyncGroup_syncErrorTolerance_get, _WMX3ApiPython.Sync_SyncGroup_syncErrorTolerance_set)
    useMasterFeedback = property(_WMX3ApiPython.Sync_SyncGroup_useMasterFeedback_get, _WMX3ApiPython.Sync_SyncGroup_useMasterFeedback_set)

    def __init__(self):
        _WMX3ApiPython.Sync_SyncGroup_swiginit(self, _WMX3ApiPython.new_Sync_SyncGroup())
    __swig_destroy__ = _WMX3ApiPython.delete_Sync_SyncGroup

# Register Sync_SyncGroup in _WMX3ApiPython:
_WMX3ApiPython.Sync_SyncGroup_swigregister(Sync_SyncGroup)
class Sync_SyncGroupStatus(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def GetData(self, syncGroupStatus):
        return _WMX3ApiPython.Sync_SyncGroupStatus_GetData(self, syncGroupStatus)

    def SetData(self, syncGroupStatus):
        return _WMX3ApiPython.Sync_SyncGroupStatus_SetData(self, syncGroupStatus)
    enabled = property(_WMX3ApiPython.Sync_SyncGroupStatus_enabled_get, _WMX3ApiPython.Sync_SyncGroupStatus_enabled_set)
    homeDone = property(_WMX3ApiPython.Sync_SyncGroupStatus_homeDone_get, _WMX3ApiPython.Sync_SyncGroupStatus_homeDone_set)
    catchUpError = property(_WMX3ApiPython.Sync_SyncGroupStatus_catchUpError_get, _WMX3ApiPython.Sync_SyncGroupStatus_catchUpError_set)
    syncError = property(_WMX3ApiPython.Sync_SyncGroupStatus_syncError_get, _WMX3ApiPython.Sync_SyncGroupStatus_syncError_set)
    axisError = property(_WMX3ApiPython.Sync_SyncGroupStatus_axisError_get, _WMX3ApiPython.Sync_SyncGroupStatus_axisError_set)
    interruptError = property(_WMX3ApiPython.Sync_SyncGroupStatus_interruptError_get, _WMX3ApiPython.Sync_SyncGroupStatus_interruptError_set)

    def __init__(self):
        _WMX3ApiPython.Sync_SyncGroupStatus_swiginit(self, _WMX3ApiPython.new_Sync_SyncGroupStatus())
    __swig_destroy__ = _WMX3ApiPython.delete_Sync_SyncGroupStatus

# Register Sync_SyncGroupStatus in _WMX3ApiPython:
_WMX3ApiPython.Sync_SyncGroupStatus_swigregister(Sync_SyncGroupStatus)
class Sync(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, cm):
        _WMX3ApiPython.Sync_swiginit(self, _WMX3ApiPython.new_Sync(cm))
    __swig_destroy__ = _WMX3ApiPython.delete_Sync

    def IsDeviceValid(self):
        return _WMX3ApiPython.Sync_IsDeviceValid(self)

    def SetSyncMasterSlave(self, *args):
        return _WMX3ApiPython.Sync_SetSyncMasterSlave(self, *args)

    def SetSyncCombine(self, *args):
        return _WMX3ApiPython.Sync_SetSyncCombine(self, *args)

    def SetAbsoluteSyncPhase(self, slaveAxis, phase, pProfile):
        return _WMX3ApiPython.Sync_SetAbsoluteSyncPhase(self, slaveAxis, phase, pProfile)

    def AddRelativeSyncPhase(self, slaveAxis, phase, pProfile):
        return _WMX3ApiPython.Sync_AddRelativeSyncPhase(self, slaveAxis, phase, pProfile)

    def SetSyncGearRatio(self, *args):
        return _WMX3ApiPython.Sync_SetSyncGearRatio(self, *args)

    def SyncToJog(self, *args):
        return _WMX3ApiPython.Sync_SyncToJog(self, *args)

    def ResolveSync(self, slaveAxis):
        return _WMX3ApiPython.Sync_ResolveSync(self, slaveAxis)

    def SetSyncGroup(self, groupId, pSyncGroup):
        return _WMX3ApiPython.Sync_SetSyncGroup(self, groupId, pSyncGroup)

    def GetSyncGroup(self, groupId):
        pSyncGroup = Sync_SyncGroup()
        ret = _WMX3ApiPython.Sync_GetSyncGroup(self, groupId, pSyncGroup)
        return ret, pSyncGroup



    def AddAxisToSyncGroup(self, groupId, axis, isMaster):
        return _WMX3ApiPython.Sync_AddAxisToSyncGroup(self, groupId, axis, isMaster)

    def RemoveAxisFromSyncGroup(self, groupId, axis):
        return _WMX3ApiPython.Sync_RemoveAxisFromSyncGroup(self, groupId, axis)

    def EnableSyncGroup(self, groupId, enable):
        return _WMX3ApiPython.Sync_EnableSyncGroup(self, groupId, enable)

    def GetSyncGroupStatus(self, groupId):
        pStatus = Sync_SyncGroupStatus()
        ret = _WMX3ApiPython.Sync_GetSyncGroupStatus(self, groupId, pStatus)
        return ret, pStatus



    def ClearSyncGroupError(self, groupId):
        return _WMX3ApiPython.Sync_ClearSyncGroupError(self, groupId)

# Register Sync in _WMX3ApiPython:
_WMX3ApiPython.Sync_swigregister(Sync)
class Config_VelocityMonitorSource(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    UseVelocityFeedback = _WMX3ApiPython.Config_VelocityMonitorSource_UseVelocityFeedback
    CalculateFromPositionFeedback = _WMX3ApiPython.Config_VelocityMonitorSource_CalculateFromPositionFeedback

    def __init__(self):
        _WMX3ApiPython.Config_VelocityMonitorSource_swiginit(self, _WMX3ApiPython.new_Config_VelocityMonitorSource())
    __swig_destroy__ = _WMX3ApiPython.delete_Config_VelocityMonitorSource

# Register Config_VelocityMonitorSource in _WMX3ApiPython:
_WMX3ApiPython.Config_VelocityMonitorSource_swigregister(Config_VelocityMonitorSource)
class Config_HomeDirection(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Positive = _WMX3ApiPython.Config_HomeDirection_Positive
    Negative = _WMX3ApiPython.Config_HomeDirection_Negative

    def __init__(self):
        _WMX3ApiPython.Config_HomeDirection_swiginit(self, _WMX3ApiPython.new_Config_HomeDirection())
    __swig_destroy__ = _WMX3ApiPython.delete_Config_HomeDirection

# Register Config_HomeDirection in _WMX3ApiPython:
_WMX3ApiPython.Config_HomeDirection_swigregister(Config_HomeDirection)
class Config_HomeType(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    CurrentPos = _WMX3ApiPython.Config_HomeType_CurrentPos
    ZPulse = _WMX3ApiPython.Config_HomeType_ZPulse
    HS = _WMX3ApiPython.Config_HomeType_HS
    HSHS = _WMX3ApiPython.Config_HomeType_HSHS
    HSZPulse = _WMX3ApiPython.Config_HomeType_HSZPulse
    HSReverseZPulse = _WMX3ApiPython.Config_HomeType_HSReverseZPulse
    HSOff = _WMX3ApiPython.Config_HomeType_HSOff
    HSOffZPulse = _WMX3ApiPython.Config_HomeType_HSOffZPulse
    HSOffReverseZPulse = _WMX3ApiPython.Config_HomeType_HSOffReverseZPulse
    LSReverseZPulse = _WMX3ApiPython.Config_HomeType_LSReverseZPulse
    NearLSReverseZPulse = _WMX3ApiPython.Config_HomeType_NearLSReverseZPulse
    ExternalLSReverseZPulse = _WMX3ApiPython.Config_HomeType_ExternalLSReverseZPulse
    TouchProbe = _WMX3ApiPython.Config_HomeType_TouchProbe
    HSTouchProbe = _WMX3ApiPython.Config_HomeType_HSTouchProbe
    LS = _WMX3ApiPython.Config_HomeType_LS
    NearLS = _WMX3ApiPython.Config_HomeType_NearLS
    ExternalLS = _WMX3ApiPython.Config_HomeType_ExternalLS
    MechanicalEndDetection = _WMX3ApiPython.Config_HomeType_MechanicalEndDetection
    MechanicalEndDetectionHS = _WMX3ApiPython.Config_HomeType_MechanicalEndDetectionHS
    MechanicalEndDetectionLS = _WMX3ApiPython.Config_HomeType_MechanicalEndDetectionLS
    MechanicalEndDetectionReverseZPulse = _WMX3ApiPython.Config_HomeType_MechanicalEndDetectionReverseZPulse

    def __init__(self):
        _WMX3ApiPython.Config_HomeType_swiginit(self, _WMX3ApiPython.new_Config_HomeType())
    __swig_destroy__ = _WMX3ApiPython.delete_Config_HomeType

# Register Config_HomeType in _WMX3ApiPython:
_WMX3ApiPython.Config_HomeType_swigregister(Config_HomeType)
class Config_LimitSwitchType(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    PyNone = _WMX3ApiPython.Config_LimitSwitchType_PyNone
    ServoOff = _WMX3ApiPython.Config_LimitSwitchType_ServoOff
    DecServoOff = _WMX3ApiPython.Config_LimitSwitchType_DecServoOff
    Dec = _WMX3ApiPython.Config_LimitSwitchType_Dec
    SlowDecServoOff = _WMX3ApiPython.Config_LimitSwitchType_SlowDecServoOff
    SlowDec = _WMX3ApiPython.Config_LimitSwitchType_SlowDec
    SeparatePositiveLSNegativeLS = _WMX3ApiPython.Config_LimitSwitchType_SeparatePositiveLSNegativeLS

    def __init__(self):
        _WMX3ApiPython.Config_LimitSwitchType_swiginit(self, _WMX3ApiPython.new_Config_LimitSwitchType())
    __swig_destroy__ = _WMX3ApiPython.delete_Config_LimitSwitchType

# Register Config_LimitSwitchType in _WMX3ApiPython:
_WMX3ApiPython.Config_LimitSwitchType_swigregister(Config_LimitSwitchType)
class Config_LimitSwitchDirection(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Normal = _WMX3ApiPython.Config_LimitSwitchDirection_Normal
    Reverse = _WMX3ApiPython.Config_LimitSwitchDirection_Reverse

    def __init__(self):
        _WMX3ApiPython.Config_LimitSwitchDirection_swiginit(self, _WMX3ApiPython.new_Config_LimitSwitchDirection())
    __swig_destroy__ = _WMX3ApiPython.delete_Config_LimitSwitchDirection

# Register Config_LimitSwitchDirection in _WMX3ApiPython:
_WMX3ApiPython.Config_LimitSwitchDirection_swigregister(Config_LimitSwitchDirection)
class Config_ProhibitOvertravelType(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Disabled = _WMX3ApiPython.Config_ProhibitOvertravelType_Disabled
    ChangeDeceleration = _WMX3ApiPython.Config_ProhibitOvertravelType_ChangeDeceleration
    ChangeInitialVelocity = _WMX3ApiPython.Config_ProhibitOvertravelType_ChangeInitialVelocity

    def __init__(self):
        _WMX3ApiPython.Config_ProhibitOvertravelType_swiginit(self, _WMX3ApiPython.new_Config_ProhibitOvertravelType())
    __swig_destroy__ = _WMX3ApiPython.delete_Config_ProhibitOvertravelType

# Register Config_ProhibitOvertravelType in _WMX3ApiPython:
_WMX3ApiPython.Config_ProhibitOvertravelType_swigregister(Config_ProhibitOvertravelType)
class Config_LinearIntplOverrideType(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Smoothing = _WMX3ApiPython.Config_LinearIntplOverrideType_Smoothing
    Blending = _WMX3ApiPython.Config_LinearIntplOverrideType_Blending
    FastBlending = _WMX3ApiPython.Config_LinearIntplOverrideType_FastBlending

    def __init__(self):
        _WMX3ApiPython.Config_LinearIntplOverrideType_swiginit(self, _WMX3ApiPython.new_Config_LinearIntplOverrideType())
    __swig_destroy__ = _WMX3ApiPython.delete_Config_LinearIntplOverrideType

# Register Config_LinearIntplOverrideType in _WMX3ApiPython:
_WMX3ApiPython.Config_LinearIntplOverrideType_swigregister(Config_LinearIntplOverrideType)
class Config_LinearIntplProfileCalcMode(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    AxisLimit = _WMX3ApiPython.Config_LinearIntplProfileCalcMode_AxisLimit
    MatchSlowestAxis = _WMX3ApiPython.Config_LinearIntplProfileCalcMode_MatchSlowestAxis
    MatchFarthestAxis = _WMX3ApiPython.Config_LinearIntplProfileCalcMode_MatchFarthestAxis

    def __init__(self):
        _WMX3ApiPython.Config_LinearIntplProfileCalcMode_swiginit(self, _WMX3ApiPython.new_Config_LinearIntplProfileCalcMode())
    __swig_destroy__ = _WMX3ApiPython.delete_Config_LinearIntplProfileCalcMode

# Register Config_LinearIntplProfileCalcMode in _WMX3ApiPython:
_WMX3ApiPython.Config_LinearIntplProfileCalcMode_swigregister(Config_LinearIntplProfileCalcMode)
class Config_CircularIntplOverrideType(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Blending = _WMX3ApiPython.Config_CircularIntplOverrideType_Blending
    FastBlending = _WMX3ApiPython.Config_CircularIntplOverrideType_FastBlending

    def __init__(self):
        _WMX3ApiPython.Config_CircularIntplOverrideType_swiginit(self, _WMX3ApiPython.new_Config_CircularIntplOverrideType())
    __swig_destroy__ = _WMX3ApiPython.delete_Config_CircularIntplOverrideType

# Register Config_CircularIntplOverrideType in _WMX3ApiPython:
_WMX3ApiPython.Config_CircularIntplOverrideType_swigregister(Config_CircularIntplOverrideType)
class Config_FollowingErrorAlarmType(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    NoAction = _WMX3ApiPython.Config_FollowingErrorAlarmType_NoAction
    QuickStop = _WMX3ApiPython.Config_FollowingErrorAlarmType_QuickStop

    def __init__(self):
        _WMX3ApiPython.Config_FollowingErrorAlarmType_swiginit(self, _WMX3ApiPython.new_Config_FollowingErrorAlarmType())
    __swig_destroy__ = _WMX3ApiPython.delete_Config_FollowingErrorAlarmType

# Register Config_FollowingErrorAlarmType in _WMX3ApiPython:
_WMX3ApiPython.Config_FollowingErrorAlarmType_swigregister(Config_FollowingErrorAlarmType)
class Config_VelocityFollowingErrorAlarmType(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    NoAction = _WMX3ApiPython.Config_VelocityFollowingErrorAlarmType_NoAction
    QuickStop = _WMX3ApiPython.Config_VelocityFollowingErrorAlarmType_QuickStop
    Warning = _WMX3ApiPython.Config_VelocityFollowingErrorAlarmType_Warning

    def __init__(self):
        _WMX3ApiPython.Config_VelocityFollowingErrorAlarmType_swiginit(self, _WMX3ApiPython.new_Config_VelocityFollowingErrorAlarmType())
    __swig_destroy__ = _WMX3ApiPython.delete_Config_VelocityFollowingErrorAlarmType

# Register Config_VelocityFollowingErrorAlarmType in _WMX3ApiPython:
_WMX3ApiPython.Config_VelocityFollowingErrorAlarmType_swigregister(Config_VelocityFollowingErrorAlarmType)
class Config_SyncCompensationMode(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    PyNone = _WMX3ApiPython.Config_SyncCompensationMode_PyNone
    VelocityOffset = _WMX3ApiPython.Config_SyncCompensationMode_VelocityOffset
    SymmetricVelocityOffset = _WMX3ApiPython.Config_SyncCompensationMode_SymmetricVelocityOffset

    def __init__(self):
        _WMX3ApiPython.Config_SyncCompensationMode_swiginit(self, _WMX3ApiPython.new_Config_SyncCompensationMode())
    __swig_destroy__ = _WMX3ApiPython.delete_Config_SyncCompensationMode

# Register Config_SyncCompensationMode in _WMX3ApiPython:
_WMX3ApiPython.Config_SyncCompensationMode_swigregister(Config_SyncCompensationMode)
class Config_MasterDesyncType(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    NoAction = _WMX3ApiPython.Config_MasterDesyncType_NoAction
    ServoOff = _WMX3ApiPython.Config_MasterDesyncType_ServoOff
    DecServoOff = _WMX3ApiPython.Config_MasterDesyncType_DecServoOff
    Dec = _WMX3ApiPython.Config_MasterDesyncType_Dec

    def __init__(self):
        _WMX3ApiPython.Config_MasterDesyncType_swiginit(self, _WMX3ApiPython.new_Config_MasterDesyncType())
    __swig_destroy__ = _WMX3ApiPython.delete_Config_MasterDesyncType

# Register Config_MasterDesyncType in _WMX3ApiPython:
_WMX3ApiPython.Config_MasterDesyncType_swigregister(Config_MasterDesyncType)
class Config_SlaveDesyncType(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    NoAction = _WMX3ApiPython.Config_SlaveDesyncType_NoAction
    ServoOff = _WMX3ApiPython.Config_SlaveDesyncType_ServoOff
    ResolveSync = _WMX3ApiPython.Config_SlaveDesyncType_ResolveSync

    def __init__(self):
        _WMX3ApiPython.Config_SlaveDesyncType_swiginit(self, _WMX3ApiPython.new_Config_SlaveDesyncType())
    __swig_destroy__ = _WMX3ApiPython.delete_Config_SlaveDesyncType

# Register Config_SlaveDesyncType in _WMX3ApiPython:
_WMX3ApiPython.Config_SlaveDesyncType_swigregister(Config_SlaveDesyncType)
class Config_EStopSignalSource(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Input = _WMX3ApiPython.Config_EStopSignalSource_Input
    Output = _WMX3ApiPython.Config_EStopSignalSource_Output
    UserMemory = _WMX3ApiPython.Config_EStopSignalSource_UserMemory

    def __init__(self):
        _WMX3ApiPython.Config_EStopSignalSource_swiginit(self, _WMX3ApiPython.new_Config_EStopSignalSource())
    __swig_destroy__ = _WMX3ApiPython.delete_Config_EStopSignalSource

# Register Config_EStopSignalSource in _WMX3ApiPython:
_WMX3ApiPython.Config_EStopSignalSource_swigregister(Config_EStopSignalSource)
class Config_EStopStatusSignalDestination(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Output = _WMX3ApiPython.Config_EStopStatusSignalDestination_Output
    UserMemory = _WMX3ApiPython.Config_EStopStatusSignalDestination_UserMemory

    def __init__(self):
        _WMX3ApiPython.Config_EStopStatusSignalDestination_swiginit(self, _WMX3ApiPython.new_Config_EStopStatusSignalDestination())
    __swig_destroy__ = _WMX3ApiPython.delete_Config_EStopStatusSignalDestination

# Register Config_EStopStatusSignalDestination in _WMX3ApiPython:
_WMX3ApiPython.Config_EStopStatusSignalDestination_swigregister(Config_EStopStatusSignalDestination)
class Config_EStopLevel1Type(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Dec = _WMX3ApiPython.Config_EStopLevel1Type_Dec
    DecServoOff = _WMX3ApiPython.Config_EStopLevel1Type_DecServoOff

    def __init__(self):
        _WMX3ApiPython.Config_EStopLevel1Type_swiginit(self, _WMX3ApiPython.new_Config_EStopLevel1Type())
    __swig_destroy__ = _WMX3ApiPython.delete_Config_EStopLevel1Type

# Register Config_EStopLevel1Type in _WMX3ApiPython:
_WMX3ApiPython.Config_EStopLevel1Type_swigregister(Config_EStopLevel1Type)
class Config_FeedbackParam(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def GetData(self, param):
        return _WMX3ApiPython.Config_FeedbackParam_GetData(self, param)

    def SetData(self, param):
        return _WMX3ApiPython.Config_FeedbackParam_SetData(self, param)
    inPosWidth = property(_WMX3ApiPython.Config_FeedbackParam_inPosWidth_get, _WMX3ApiPython.Config_FeedbackParam_inPosWidth_set)
    inPosWidth2 = property(_WMX3ApiPython.Config_FeedbackParam_inPosWidth2_get, _WMX3ApiPython.Config_FeedbackParam_inPosWidth2_set)
    inPosWidth3 = property(_WMX3ApiPython.Config_FeedbackParam_inPosWidth3_get, _WMX3ApiPython.Config_FeedbackParam_inPosWidth3_set)
    inPosWidth4 = property(_WMX3ApiPython.Config_FeedbackParam_inPosWidth4_get, _WMX3ApiPython.Config_FeedbackParam_inPosWidth4_set)
    inPosWidth5 = property(_WMX3ApiPython.Config_FeedbackParam_inPosWidth5_get, _WMX3ApiPython.Config_FeedbackParam_inPosWidth5_set)
    velocityMonitorSource = property(_WMX3ApiPython.Config_FeedbackParam_velocityMonitorSource_get, _WMX3ApiPython.Config_FeedbackParam_velocityMonitorSource_set)
    posSetWidth = property(_WMX3ApiPython.Config_FeedbackParam_posSetWidth_get, _WMX3ApiPython.Config_FeedbackParam_posSetWidth_set)
    delayedPosSetWidth = property(_WMX3ApiPython.Config_FeedbackParam_delayedPosSetWidth_get, _WMX3ApiPython.Config_FeedbackParam_delayedPosSetWidth_set)
    delayedPosSetMilliseconds = property(_WMX3ApiPython.Config_FeedbackParam_delayedPosSetMilliseconds_get, _WMX3ApiPython.Config_FeedbackParam_delayedPosSetMilliseconds_set)

    def __init__(self):
        _WMX3ApiPython.Config_FeedbackParam_swiginit(self, _WMX3ApiPython.new_Config_FeedbackParam())
    __swig_destroy__ = _WMX3ApiPython.delete_Config_FeedbackParam

# Register Config_FeedbackParam in _WMX3ApiPython:
_WMX3ApiPython.Config_FeedbackParam_swigregister(Config_FeedbackParam)
class Config_HomeParam(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def GetData(self, param):
        return _WMX3ApiPython.Config_HomeParam_GetData(self, param)

    def SetData(self, param):
        return _WMX3ApiPython.Config_HomeParam_SetData(self, param)
    homeType = property(_WMX3ApiPython.Config_HomeParam_homeType_get, _WMX3ApiPython.Config_HomeParam_homeType_set)
    homeDirection = property(_WMX3ApiPython.Config_HomeParam_homeDirection_get, _WMX3ApiPython.Config_HomeParam_homeDirection_set)
    homingVelocitySlow = property(_WMX3ApiPython.Config_HomeParam_homingVelocitySlow_get, _WMX3ApiPython.Config_HomeParam_homingVelocitySlow_set)
    homingVelocitySlowAcc = property(_WMX3ApiPython.Config_HomeParam_homingVelocitySlowAcc_get, _WMX3ApiPython.Config_HomeParam_homingVelocitySlowAcc_set)
    homingVelocitySlowDec = property(_WMX3ApiPython.Config_HomeParam_homingVelocitySlowDec_get, _WMX3ApiPython.Config_HomeParam_homingVelocitySlowDec_set)
    homingVelocityFast = property(_WMX3ApiPython.Config_HomeParam_homingVelocityFast_get, _WMX3ApiPython.Config_HomeParam_homingVelocityFast_set)
    homingVelocityFastAcc = property(_WMX3ApiPython.Config_HomeParam_homingVelocityFastAcc_get, _WMX3ApiPython.Config_HomeParam_homingVelocityFastAcc_set)
    homingVelocityFastDec = property(_WMX3ApiPython.Config_HomeParam_homingVelocityFastDec_get, _WMX3ApiPython.Config_HomeParam_homingVelocityFastDec_set)
    homingReverseDistance = property(_WMX3ApiPython.Config_HomeParam_homingReverseDistance_get, _WMX3ApiPython.Config_HomeParam_homingReverseDistance_set)
    homeShiftVelocity = property(_WMX3ApiPython.Config_HomeParam_homeShiftVelocity_get, _WMX3ApiPython.Config_HomeParam_homeShiftVelocity_set)
    homeShiftAcc = property(_WMX3ApiPython.Config_HomeParam_homeShiftAcc_get, _WMX3ApiPython.Config_HomeParam_homeShiftAcc_set)
    homeShiftDec = property(_WMX3ApiPython.Config_HomeParam_homeShiftDec_get, _WMX3ApiPython.Config_HomeParam_homeShiftDec_set)
    homeShiftDistance = property(_WMX3ApiPython.Config_HomeParam_homeShiftDistance_get, _WMX3ApiPython.Config_HomeParam_homeShiftDistance_set)
    invertHSPolarity = property(_WMX3ApiPython.Config_HomeParam_invertHSPolarity_get, _WMX3ApiPython.Config_HomeParam_invertHSPolarity_set)
    multipleZPulse = property(_WMX3ApiPython.Config_HomeParam_multipleZPulse_get, _WMX3ApiPython.Config_HomeParam_multipleZPulse_set)
    roundPosCmdAfterHoming = property(_WMX3ApiPython.Config_HomeParam_roundPosCmdAfterHoming_get, _WMX3ApiPython.Config_HomeParam_roundPosCmdAfterHoming_set)
    pauseMode = property(_WMX3ApiPython.Config_HomeParam_pauseMode_get, _WMX3ApiPython.Config_HomeParam_pauseMode_set)
    maxHSOnAtStartReverseDistance = property(_WMX3ApiPython.Config_HomeParam_maxHSOnAtStartReverseDistance_get, _WMX3ApiPython.Config_HomeParam_maxHSOnAtStartReverseDistance_set)
    maxLSReverseDistance = property(_WMX3ApiPython.Config_HomeParam_maxLSReverseDistance_get, _WMX3ApiPython.Config_HomeParam_maxLSReverseDistance_set)
    zPulseDistanceCheck = property(_WMX3ApiPython.Config_HomeParam_zPulseDistanceCheck_get, _WMX3ApiPython.Config_HomeParam_zPulseDistanceCheck_set)
    homePosition = property(_WMX3ApiPython.Config_HomeParam_homePosition_get, _WMX3ApiPython.Config_HomeParam_homePosition_set)
    gantryHomingUseSlaveHS = property(_WMX3ApiPython.Config_HomeParam_gantryHomingUseSlaveHS_get, _WMX3ApiPython.Config_HomeParam_gantryHomingUseSlaveHS_set)
    gantryHomingUseSlaveLS = property(_WMX3ApiPython.Config_HomeParam_gantryHomingUseSlaveLS_get, _WMX3ApiPython.Config_HomeParam_gantryHomingUseSlaveLS_set)
    gantryHomingUseSlaveZPulse = property(_WMX3ApiPython.Config_HomeParam_gantryHomingUseSlaveZPulse_get, _WMX3ApiPython.Config_HomeParam_gantryHomingUseSlaveZPulse_set)
    gantryHomingUseSlaveTouchProbe = property(_WMX3ApiPython.Config_HomeParam_gantryHomingUseSlaveTouchProbe_get, _WMX3ApiPython.Config_HomeParam_gantryHomingUseSlaveTouchProbe_set)
    gantryHomingUseSlaveMechanicalEnd = property(_WMX3ApiPython.Config_HomeParam_gantryHomingUseSlaveMechanicalEnd_get, _WMX3ApiPython.Config_HomeParam_gantryHomingUseSlaveMechanicalEnd_set)
    gantryHomingRetainSyncOffset = property(_WMX3ApiPython.Config_HomeParam_gantryHomingRetainSyncOffset_get, _WMX3ApiPython.Config_HomeParam_gantryHomingRetainSyncOffset_set)
    immediateStopAtLS = property(_WMX3ApiPython.Config_HomeParam_immediateStopAtLS_get, _WMX3ApiPython.Config_HomeParam_immediateStopAtLS_set)
    mechanicalEndDetectionPosDiff = property(_WMX3ApiPython.Config_HomeParam_mechanicalEndDetectionPosDiff_get, _WMX3ApiPython.Config_HomeParam_mechanicalEndDetectionPosDiff_set)
    mechanicalEndDetectionTimeMilliseconds = property(_WMX3ApiPython.Config_HomeParam_mechanicalEndDetectionTimeMilliseconds_get, _WMX3ApiPython.Config_HomeParam_mechanicalEndDetectionTimeMilliseconds_set)
    mechanicalEndDetectionIgnoreLS = property(_WMX3ApiPython.Config_HomeParam_mechanicalEndDetectionIgnoreLS_get, _WMX3ApiPython.Config_HomeParam_mechanicalEndDetectionIgnoreLS_set)
    mechanicalEndDetectionFirstTorqueLimit = property(_WMX3ApiPython.Config_HomeParam_mechanicalEndDetectionFirstTorqueLimit_get, _WMX3ApiPython.Config_HomeParam_mechanicalEndDetectionFirstTorqueLimit_set)
    mechanicalEndDetectionSecondTorqueLimit = property(_WMX3ApiPython.Config_HomeParam_mechanicalEndDetectionSecondTorqueLimit_get, _WMX3ApiPython.Config_HomeParam_mechanicalEndDetectionSecondTorqueLimit_set)
    openLoopHoming = property(_WMX3ApiPython.Config_HomeParam_openLoopHoming_get, _WMX3ApiPython.Config_HomeParam_openLoopHoming_set)
    clearHomeDoneOnServoOff = property(_WMX3ApiPython.Config_HomeParam_clearHomeDoneOnServoOff_get, _WMX3ApiPython.Config_HomeParam_clearHomeDoneOnServoOff_set)
    clearHomeDoneOnCommStop = property(_WMX3ApiPython.Config_HomeParam_clearHomeDoneOnCommStop_get, _WMX3ApiPython.Config_HomeParam_clearHomeDoneOnCommStop_set)

    def __init__(self):
        _WMX3ApiPython.Config_HomeParam_swiginit(self, _WMX3ApiPython.new_Config_HomeParam())
    __swig_destroy__ = _WMX3ApiPython.delete_Config_HomeParam

# Register Config_HomeParam in _WMX3ApiPython:
_WMX3ApiPython.Config_HomeParam_swigregister(Config_HomeParam)
class Config_LimitParam(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def GetData(self, param):
        return _WMX3ApiPython.Config_LimitParam_GetData(self, param)

    def SetData(self, param):
        return _WMX3ApiPython.Config_LimitParam_SetData(self, param)
    lsType = property(_WMX3ApiPython.Config_LimitParam_lsType_get, _WMX3ApiPython.Config_LimitParam_lsType_set)
    positiveLSType = property(_WMX3ApiPython.Config_LimitParam_positiveLSType_get, _WMX3ApiPython.Config_LimitParam_positiveLSType_set)
    negativeLSType = property(_WMX3ApiPython.Config_LimitParam_negativeLSType_get, _WMX3ApiPython.Config_LimitParam_negativeLSType_set)
    invertPositiveLSPolarity = property(_WMX3ApiPython.Config_LimitParam_invertPositiveLSPolarity_get, _WMX3ApiPython.Config_LimitParam_invertPositiveLSPolarity_set)
    invertNegativeLSPolarity = property(_WMX3ApiPython.Config_LimitParam_invertNegativeLSPolarity_get, _WMX3ApiPython.Config_LimitParam_invertNegativeLSPolarity_set)
    nearLSType = property(_WMX3ApiPython.Config_LimitParam_nearLSType_get, _WMX3ApiPython.Config_LimitParam_nearLSType_set)
    nearPositiveLSType = property(_WMX3ApiPython.Config_LimitParam_nearPositiveLSType_get, _WMX3ApiPython.Config_LimitParam_nearPositiveLSType_set)
    nearNegativeLSType = property(_WMX3ApiPython.Config_LimitParam_nearNegativeLSType_get, _WMX3ApiPython.Config_LimitParam_nearNegativeLSType_set)
    nearPositiveLSByte = property(_WMX3ApiPython.Config_LimitParam_nearPositiveLSByte_get, _WMX3ApiPython.Config_LimitParam_nearPositiveLSByte_set)
    nearPositiveLSBit = property(_WMX3ApiPython.Config_LimitParam_nearPositiveLSBit_get, _WMX3ApiPython.Config_LimitParam_nearPositiveLSBit_set)
    invertNearPositiveLSPolarity = property(_WMX3ApiPython.Config_LimitParam_invertNearPositiveLSPolarity_get, _WMX3ApiPython.Config_LimitParam_invertNearPositiveLSPolarity_set)
    nearNegativeLSByte = property(_WMX3ApiPython.Config_LimitParam_nearNegativeLSByte_get, _WMX3ApiPython.Config_LimitParam_nearNegativeLSByte_set)
    nearNegativeLSBit = property(_WMX3ApiPython.Config_LimitParam_nearNegativeLSBit_get, _WMX3ApiPython.Config_LimitParam_nearNegativeLSBit_set)
    invertNearNegativeLSPolarity = property(_WMX3ApiPython.Config_LimitParam_invertNearNegativeLSPolarity_get, _WMX3ApiPython.Config_LimitParam_invertNearNegativeLSPolarity_set)
    externalLSType = property(_WMX3ApiPython.Config_LimitParam_externalLSType_get, _WMX3ApiPython.Config_LimitParam_externalLSType_set)
    externalPositiveLSType = property(_WMX3ApiPython.Config_LimitParam_externalPositiveLSType_get, _WMX3ApiPython.Config_LimitParam_externalPositiveLSType_set)
    externalNegativeLSType = property(_WMX3ApiPython.Config_LimitParam_externalNegativeLSType_get, _WMX3ApiPython.Config_LimitParam_externalNegativeLSType_set)
    externalPositiveLSByte = property(_WMX3ApiPython.Config_LimitParam_externalPositiveLSByte_get, _WMX3ApiPython.Config_LimitParam_externalPositiveLSByte_set)
    externalPositiveLSBit = property(_WMX3ApiPython.Config_LimitParam_externalPositiveLSBit_get, _WMX3ApiPython.Config_LimitParam_externalPositiveLSBit_set)
    invertExternalPositiveLSPolarity = property(_WMX3ApiPython.Config_LimitParam_invertExternalPositiveLSPolarity_get, _WMX3ApiPython.Config_LimitParam_invertExternalPositiveLSPolarity_set)
    externalNegativeLSByte = property(_WMX3ApiPython.Config_LimitParam_externalNegativeLSByte_get, _WMX3ApiPython.Config_LimitParam_externalNegativeLSByte_set)
    externalNegativeLSBit = property(_WMX3ApiPython.Config_LimitParam_externalNegativeLSBit_get, _WMX3ApiPython.Config_LimitParam_externalNegativeLSBit_set)
    invertExternalNegativeLSPolarity = property(_WMX3ApiPython.Config_LimitParam_invertExternalNegativeLSPolarity_get, _WMX3ApiPython.Config_LimitParam_invertExternalNegativeLSPolarity_set)
    softLimitType = property(_WMX3ApiPython.Config_LimitParam_softLimitType_get, _WMX3ApiPython.Config_LimitParam_softLimitType_set)
    positiveSoftLimitType = property(_WMX3ApiPython.Config_LimitParam_positiveSoftLimitType_get, _WMX3ApiPython.Config_LimitParam_positiveSoftLimitType_set)
    negativeSoftLimitType = property(_WMX3ApiPython.Config_LimitParam_negativeSoftLimitType_get, _WMX3ApiPython.Config_LimitParam_negativeSoftLimitType_set)
    softLimitPositivePos = property(_WMX3ApiPython.Config_LimitParam_softLimitPositivePos_get, _WMX3ApiPython.Config_LimitParam_softLimitPositivePos_set)
    softLimitNegativePos = property(_WMX3ApiPython.Config_LimitParam_softLimitNegativePos_get, _WMX3ApiPython.Config_LimitParam_softLimitNegativePos_set)
    lsDec = property(_WMX3ApiPython.Config_LimitParam_lsDec_get, _WMX3ApiPython.Config_LimitParam_lsDec_set)
    lsSlowDec = property(_WMX3ApiPython.Config_LimitParam_lsSlowDec_get, _WMX3ApiPython.Config_LimitParam_lsSlowDec_set)
    allLSDuringHoming = property(_WMX3ApiPython.Config_LimitParam_allLSDuringHoming_get, _WMX3ApiPython.Config_LimitParam_allLSDuringHoming_set)
    lsDirection = property(_WMX3ApiPython.Config_LimitParam_lsDirection_get, _WMX3ApiPython.Config_LimitParam_lsDirection_set)

    def __init__(self):
        _WMX3ApiPython.Config_LimitParam_swiginit(self, _WMX3ApiPython.new_Config_LimitParam())
    __swig_destroy__ = _WMX3ApiPython.delete_Config_LimitParam

# Register Config_LimitParam in _WMX3ApiPython:
_WMX3ApiPython.Config_LimitParam_swigregister(Config_LimitParam)
class Config_MotionParam(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def GetData(self, param):
        return _WMX3ApiPython.Config_MotionParam_GetData(self, param)

    def SetData(self, param):
        return _WMX3ApiPython.Config_MotionParam_SetData(self, param)
    quickStopDec = property(_WMX3ApiPython.Config_MotionParam_quickStopDec_get, _WMX3ApiPython.Config_MotionParam_quickStopDec_set)
    prohibitOvertravel = property(_WMX3ApiPython.Config_MotionParam_prohibitOvertravel_get, _WMX3ApiPython.Config_MotionParam_prohibitOvertravel_set)
    linearIntplOverrideType = property(_WMX3ApiPython.Config_MotionParam_linearIntplOverrideType_get, _WMX3ApiPython.Config_MotionParam_linearIntplOverrideType_set)
    linearIntplOverrideSmoothPercent = property(_WMX3ApiPython.Config_MotionParam_linearIntplOverrideSmoothPercent_get, _WMX3ApiPython.Config_MotionParam_linearIntplOverrideSmoothPercent_set)
    circularIntplOverrideType = property(_WMX3ApiPython.Config_MotionParam_circularIntplOverrideType_get, _WMX3ApiPython.Config_MotionParam_circularIntplOverrideType_set)
    interruptedIntplUseQuickStop = property(_WMX3ApiPython.Config_MotionParam_interruptedIntplUseQuickStop_get, _WMX3ApiPython.Config_MotionParam_interruptedIntplUseQuickStop_set)
    singleTurnReduceToHalfTurn = property(_WMX3ApiPython.Config_MotionParam_singleTurnReduceToHalfTurn_get, _WMX3ApiPython.Config_MotionParam_singleTurnReduceToHalfTurn_set)
    enableGlobalStartingVelocity = property(_WMX3ApiPython.Config_MotionParam_enableGlobalStartingVelocity_get, _WMX3ApiPython.Config_MotionParam_enableGlobalStartingVelocity_set)
    globalStartingVelocity = property(_WMX3ApiPython.Config_MotionParam_globalStartingVelocity_get, _WMX3ApiPython.Config_MotionParam_globalStartingVelocity_set)
    enableGlobalEndVelocity = property(_WMX3ApiPython.Config_MotionParam_enableGlobalEndVelocity_get, _WMX3ApiPython.Config_MotionParam_enableGlobalEndVelocity_set)
    globalEndVelocity = property(_WMX3ApiPython.Config_MotionParam_globalEndVelocity_get, _WMX3ApiPython.Config_MotionParam_globalEndVelocity_set)
    enableGlobalMinVelocity = property(_WMX3ApiPython.Config_MotionParam_enableGlobalMinVelocity_get, _WMX3ApiPython.Config_MotionParam_enableGlobalMinVelocity_set)
    globalMinVelocity = property(_WMX3ApiPython.Config_MotionParam_globalMinVelocity_get, _WMX3ApiPython.Config_MotionParam_globalMinVelocity_set)
    enableGlobalMovingAverageProfileTimeMilliseconds = property(_WMX3ApiPython.Config_MotionParam_enableGlobalMovingAverageProfileTimeMilliseconds_get, _WMX3ApiPython.Config_MotionParam_enableGlobalMovingAverageProfileTimeMilliseconds_set)
    globalMovingAverageProfileTimeMilliseconds = property(_WMX3ApiPython.Config_MotionParam_globalMovingAverageProfileTimeMilliseconds_get, _WMX3ApiPython.Config_MotionParam_globalMovingAverageProfileTimeMilliseconds_set)
    apiWaitUntilMotionStart = property(_WMX3ApiPython.Config_MotionParam_apiWaitUntilMotionStart_get, _WMX3ApiPython.Config_MotionParam_apiWaitUntilMotionStart_set)
    linearIntplProfileCalcMode = property(_WMX3ApiPython.Config_MotionParam_linearIntplProfileCalcMode_get, _WMX3ApiPython.Config_MotionParam_linearIntplProfileCalcMode_set)

    def __init__(self):
        _WMX3ApiPython.Config_MotionParam_swiginit(self, _WMX3ApiPython.new_Config_MotionParam())
    __swig_destroy__ = _WMX3ApiPython.delete_Config_MotionParam

# Register Config_MotionParam in _WMX3ApiPython:
_WMX3ApiPython.Config_MotionParam_swigregister(Config_MotionParam)
class Config_AlarmParam(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def GetData(self, param):
        return _WMX3ApiPython.Config_AlarmParam_GetData(self, param)

    def SetData(self, param):
        return _WMX3ApiPython.Config_AlarmParam_SetData(self, param)
    followingErrorStopped = property(_WMX3ApiPython.Config_AlarmParam_followingErrorStopped_get, _WMX3ApiPython.Config_AlarmParam_followingErrorStopped_set)
    followingErrorMoving = property(_WMX3ApiPython.Config_AlarmParam_followingErrorMoving_get, _WMX3ApiPython.Config_AlarmParam_followingErrorMoving_set)
    followingErrorType = property(_WMX3ApiPython.Config_AlarmParam_followingErrorType_get, _WMX3ApiPython.Config_AlarmParam_followingErrorType_set)
    velocityFollowingErrorStopped = property(_WMX3ApiPython.Config_AlarmParam_velocityFollowingErrorStopped_get, _WMX3ApiPython.Config_AlarmParam_velocityFollowingErrorStopped_set)
    velocityFollowingErrorStoppedMilliseconds = property(_WMX3ApiPython.Config_AlarmParam_velocityFollowingErrorStoppedMilliseconds_get, _WMX3ApiPython.Config_AlarmParam_velocityFollowingErrorStoppedMilliseconds_set)
    velocityFollowingErrorMoving = property(_WMX3ApiPython.Config_AlarmParam_velocityFollowingErrorMoving_get, _WMX3ApiPython.Config_AlarmParam_velocityFollowingErrorMoving_set)
    velocityFollowingErrorMovingMilliseconds = property(_WMX3ApiPython.Config_AlarmParam_velocityFollowingErrorMovingMilliseconds_get, _WMX3ApiPython.Config_AlarmParam_velocityFollowingErrorMovingMilliseconds_set)
    velocityFollowingErrorType = property(_WMX3ApiPython.Config_AlarmParam_velocityFollowingErrorType_get, _WMX3ApiPython.Config_AlarmParam_velocityFollowingErrorType_set)
    servoOffDuringAmpAlarm = property(_WMX3ApiPython.Config_AlarmParam_servoOffDuringAmpAlarm_get, _WMX3ApiPython.Config_AlarmParam_servoOffDuringAmpAlarm_set)
    servoOnFollowingError = property(_WMX3ApiPython.Config_AlarmParam_servoOnFollowingError_get, _WMX3ApiPython.Config_AlarmParam_servoOnFollowingError_set)

    def __init__(self):
        _WMX3ApiPython.Config_AlarmParam_swiginit(self, _WMX3ApiPython.new_Config_AlarmParam())
    __swig_destroy__ = _WMX3ApiPython.delete_Config_AlarmParam

# Register Config_AlarmParam in _WMX3ApiPython:
_WMX3ApiPython.Config_AlarmParam_swigregister(Config_AlarmParam)
class Config_SyncParam(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def GetData(self, param):
        return _WMX3ApiPython.Config_SyncParam_GetData(self, param)

    def SetData(self, param):
        return _WMX3ApiPython.Config_SyncParam_SetData(self, param)
    inSyncWidth = property(_WMX3ApiPython.Config_SyncParam_inSyncWidth_get, _WMX3ApiPython.Config_SyncParam_inSyncWidth_set)
    syncGain = property(_WMX3ApiPython.Config_SyncParam_syncGain_get, _WMX3ApiPython.Config_SyncParam_syncGain_set)
    syncCompensationMode = property(_WMX3ApiPython.Config_SyncParam_syncCompensationMode_get, _WMX3ApiPython.Config_SyncParam_syncCompensationMode_set)
    masterDesyncType = property(_WMX3ApiPython.Config_SyncParam_masterDesyncType_get, _WMX3ApiPython.Config_SyncParam_masterDesyncType_set)
    masterDesyncDec = property(_WMX3ApiPython.Config_SyncParam_masterDesyncDec_get, _WMX3ApiPython.Config_SyncParam_masterDesyncDec_set)
    slaveDesyncType = property(_WMX3ApiPython.Config_SyncParam_slaveDesyncType_get, _WMX3ApiPython.Config_SyncParam_slaveDesyncType_set)
    slaveDesyncDec = property(_WMX3ApiPython.Config_SyncParam_slaveDesyncDec_get, _WMX3ApiPython.Config_SyncParam_slaveDesyncDec_set)
    matchPos = property(_WMX3ApiPython.Config_SyncParam_matchPos_get, _WMX3ApiPython.Config_SyncParam_matchPos_set)

    def __init__(self):
        _WMX3ApiPython.Config_SyncParam_swiginit(self, _WMX3ApiPython.new_Config_SyncParam())
    __swig_destroy__ = _WMX3ApiPython.delete_Config_SyncParam

# Register Config_SyncParam in _WMX3ApiPython:
_WMX3ApiPython.Config_SyncParam_swigregister(Config_SyncParam)
class Config_FlightRecorderParam(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def GetData(self, param):
        return _WMX3ApiPython.Config_FlightRecorderParam_GetData(self, param)

    def SetData(self, param):
        return _WMX3ApiPython.Config_FlightRecorderParam_SetData(self, param)
    enableFlightRecorder = property(_WMX3ApiPython.Config_FlightRecorderParam_enableFlightRecorder_get, _WMX3ApiPython.Config_FlightRecorderParam_enableFlightRecorder_set)
    flightRecorderTimeStamp = property(_WMX3ApiPython.Config_FlightRecorderParam_flightRecorderTimeStamp_get, _WMX3ApiPython.Config_FlightRecorderParam_flightRecorderTimeStamp_set)
    collectAxisFlightRecorderData = property(_WMX3ApiPython.Config_FlightRecorderParam_collectAxisFlightRecorderData_get, _WMX3ApiPython.Config_FlightRecorderParam_collectAxisFlightRecorderData_set)

    def SetCollectAxisFlightRecorderData(self, index, value):
        return _WMX3ApiPython.Config_FlightRecorderParam_SetCollectAxisFlightRecorderData(self, index, value)

    def GetCollectAxisFlightRecorderData(self, index):
        return _WMX3ApiPython.Config_FlightRecorderParam_GetCollectAxisFlightRecorderData(self, index)
    triggerFlightRecorderOnAmpAlarm = property(_WMX3ApiPython.Config_FlightRecorderParam_triggerFlightRecorderOnAmpAlarm_get, _WMX3ApiPython.Config_FlightRecorderParam_triggerFlightRecorderOnAmpAlarm_set)

    def __init__(self):
        _WMX3ApiPython.Config_FlightRecorderParam_swiginit(self, _WMX3ApiPython.new_Config_FlightRecorderParam())
    __swig_destroy__ = _WMX3ApiPython.delete_Config_FlightRecorderParam

# Register Config_FlightRecorderParam in _WMX3ApiPython:
_WMX3ApiPython.Config_FlightRecorderParam_swigregister(Config_FlightRecorderParam)
class Config_EmergencyStopParam(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def GetData(self, param):
        return _WMX3ApiPython.Config_EmergencyStopParam_GetData(self, param)

    def SetData(self, param):
        return _WMX3ApiPython.Config_EmergencyStopParam_SetData(self, param)
    eStopDec = property(_WMX3ApiPython.Config_EmergencyStopParam_eStopDec_get, _WMX3ApiPython.Config_EmergencyStopParam_eStopDec_set)

    def SetEStopDec(self, index, value):
        return _WMX3ApiPython.Config_EmergencyStopParam_SetEStopDec(self, index, value)

    def GetEStopDec(self, index):
        return _WMX3ApiPython.Config_EmergencyStopParam_GetEStopDec(self, index)
    enableEStopSignal = property(_WMX3ApiPython.Config_EmergencyStopParam_enableEStopSignal_get, _WMX3ApiPython.Config_EmergencyStopParam_enableEStopSignal_set)
    eStopSignalSource = property(_WMX3ApiPython.Config_EmergencyStopParam_eStopSignalSource_get, _WMX3ApiPython.Config_EmergencyStopParam_eStopSignalSource_set)
    eStopSignalLevel = property(_WMX3ApiPython.Config_EmergencyStopParam_eStopSignalLevel_get, _WMX3ApiPython.Config_EmergencyStopParam_eStopSignalLevel_set)
    invertEStopSignalPolarity = property(_WMX3ApiPython.Config_EmergencyStopParam_invertEStopSignalPolarity_get, _WMX3ApiPython.Config_EmergencyStopParam_invertEStopSignalPolarity_set)
    eStopSignalByteAddress = property(_WMX3ApiPython.Config_EmergencyStopParam_eStopSignalByteAddress_get, _WMX3ApiPython.Config_EmergencyStopParam_eStopSignalByteAddress_set)
    eStopSignalBitAddress = property(_WMX3ApiPython.Config_EmergencyStopParam_eStopSignalBitAddress_get, _WMX3ApiPython.Config_EmergencyStopParam_eStopSignalBitAddress_set)
    enableEStopStatusSignal = property(_WMX3ApiPython.Config_EmergencyStopParam_enableEStopStatusSignal_get, _WMX3ApiPython.Config_EmergencyStopParam_enableEStopStatusSignal_set)
    eStopStatusSignalDestination = property(_WMX3ApiPython.Config_EmergencyStopParam_eStopStatusSignalDestination_get, _WMX3ApiPython.Config_EmergencyStopParam_eStopStatusSignalDestination_set)
    invertEStopStatusSignalPolarity = property(_WMX3ApiPython.Config_EmergencyStopParam_invertEStopStatusSignalPolarity_get, _WMX3ApiPython.Config_EmergencyStopParam_invertEStopStatusSignalPolarity_set)
    eStopStatusSignalByteAddress = property(_WMX3ApiPython.Config_EmergencyStopParam_eStopStatusSignalByteAddress_get, _WMX3ApiPython.Config_EmergencyStopParam_eStopStatusSignalByteAddress_set)
    eStopStatusSignalBitAddress = property(_WMX3ApiPython.Config_EmergencyStopParam_eStopStatusSignalBitAddress_get, _WMX3ApiPython.Config_EmergencyStopParam_eStopStatusSignalBitAddress_set)
    eStopLevel1Type = property(_WMX3ApiPython.Config_EmergencyStopParam_eStopLevel1Type_get, _WMX3ApiPython.Config_EmergencyStopParam_eStopLevel1Type_set)

    def __init__(self):
        _WMX3ApiPython.Config_EmergencyStopParam_swiginit(self, _WMX3ApiPython.new_Config_EmergencyStopParam())
    __swig_destroy__ = _WMX3ApiPython.delete_Config_EmergencyStopParam

# Register Config_EmergencyStopParam in _WMX3ApiPython:
_WMX3ApiPython.Config_EmergencyStopParam_swigregister(Config_EmergencyStopParam)
class Config_SystemParam(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def GetData(self, param):
        return _WMX3ApiPython.Config_SystemParam_GetData(self, param)

    def SetData(self, param):
        return _WMX3ApiPython.Config_SystemParam_SetData(self, param)
    feedbackParam = property(_WMX3ApiPython.Config_SystemParam_feedbackParam_get, _WMX3ApiPython.Config_SystemParam_feedbackParam_set)

    def SetFeedbackParam(self, index, value):
        return _WMX3ApiPython.Config_SystemParam_SetFeedbackParam(self, index, value)

    def GetFeedbackParam(self, index):
        return _WMX3ApiPython.Config_SystemParam_GetFeedbackParam(self, index)
    homeParam = property(_WMX3ApiPython.Config_SystemParam_homeParam_get, _WMX3ApiPython.Config_SystemParam_homeParam_set)

    def SetHomeParam(self, index, value):
        return _WMX3ApiPython.Config_SystemParam_SetHomeParam(self, index, value)

    def GetHomeParam(self, index):
        return _WMX3ApiPython.Config_SystemParam_GetHomeParam(self, index)
    limitParam = property(_WMX3ApiPython.Config_SystemParam_limitParam_get, _WMX3ApiPython.Config_SystemParam_limitParam_set)

    def SetLimitParam(self, index, value):
        return _WMX3ApiPython.Config_SystemParam_SetLimitParam(self, index, value)

    def GetLimitParam(self, index):
        return _WMX3ApiPython.Config_SystemParam_GetLimitParam(self, index)
    motionParam = property(_WMX3ApiPython.Config_SystemParam_motionParam_get, _WMX3ApiPython.Config_SystemParam_motionParam_set)

    def SetMotionParam(self, index, value):
        return _WMX3ApiPython.Config_SystemParam_SetMotionParam(self, index, value)

    def GetMotionParam(self, index):
        return _WMX3ApiPython.Config_SystemParam_GetMotionParam(self, index)
    alarmParam = property(_WMX3ApiPython.Config_SystemParam_alarmParam_get, _WMX3ApiPython.Config_SystemParam_alarmParam_set)

    def SetAlarmParam(self, index, value):
        return _WMX3ApiPython.Config_SystemParam_SetAlarmParam(self, index, value)

    def GetAlarmParam(self, index):
        return _WMX3ApiPython.Config_SystemParam_GetAlarmParam(self, index)
    syncParam = property(_WMX3ApiPython.Config_SystemParam_syncParam_get, _WMX3ApiPython.Config_SystemParam_syncParam_set)

    def SetSyncParam(self, index, value):
        return _WMX3ApiPython.Config_SystemParam_SetSyncParam(self, index, value)

    def GetSyncParam(self, index):
        return _WMX3ApiPython.Config_SystemParam_GetSyncParam(self, index)
    flightRecorderParam = property(_WMX3ApiPython.Config_SystemParam_flightRecorderParam_get, _WMX3ApiPython.Config_SystemParam_flightRecorderParam_set)
    emergencyStopParam = property(_WMX3ApiPython.Config_SystemParam_emergencyStopParam_get, _WMX3ApiPython.Config_SystemParam_emergencyStopParam_set)

    def __init__(self):
        _WMX3ApiPython.Config_SystemParam_swiginit(self, _WMX3ApiPython.new_Config_SystemParam())
    __swig_destroy__ = _WMX3ApiPython.delete_Config_SystemParam

# Register Config_SystemParam in _WMX3ApiPython:
_WMX3ApiPython.Config_SystemParam_swigregister(Config_SystemParam)
class Config_AxisParam(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def GetData(self, param):
        return _WMX3ApiPython.Config_AxisParam_GetData(self, param)

    def SetData(self, param):
        return _WMX3ApiPython.Config_AxisParam_SetData(self, param)
    axisCommandMode = property(_WMX3ApiPython.Config_AxisParam_axisCommandMode_get, _WMX3ApiPython.Config_AxisParam_axisCommandMode_set)

    def SetAxisCommandMode(self, index, value):
        return _WMX3ApiPython.Config_AxisParam_SetAxisCommandMode(self, index, value)

    def GetAxisCommandMode(self, index):
        return _WMX3ApiPython.Config_AxisParam_GetAxisCommandMode(self, index)
    gearRatioNumerator = property(_WMX3ApiPython.Config_AxisParam_gearRatioNumerator_get, _WMX3ApiPython.Config_AxisParam_gearRatioNumerator_set)

    def SetGearRatioNumerator(self, index, value):
        return _WMX3ApiPython.Config_AxisParam_SetGearRatioNumerator(self, index, value)

    def GetGearRatioNumerator(self, index):
        return _WMX3ApiPython.Config_AxisParam_GetGearRatioNumerator(self, index)
    gearRatioDenominator = property(_WMX3ApiPython.Config_AxisParam_gearRatioDenominator_get, _WMX3ApiPython.Config_AxisParam_gearRatioDenominator_set)

    def SetGearRatioDenominator(self, index, value):
        return _WMX3ApiPython.Config_AxisParam_SetGearRatioDenominator(self, index, value)

    def GetGearRatioDenominator(self, index):
        return _WMX3ApiPython.Config_AxisParam_GetGearRatioDenominator(self, index)
    singleTurnMode = property(_WMX3ApiPython.Config_AxisParam_singleTurnMode_get, _WMX3ApiPython.Config_AxisParam_singleTurnMode_set)

    def SetSingleTurnMode(self, index, value):
        return _WMX3ApiPython.Config_AxisParam_SetSingleTurnMode(self, index, value)

    def GetSingleTurnMode(self, index):
        return _WMX3ApiPython.Config_AxisParam_GetSingleTurnMode(self, index)
    singleTurnEncoderCount = property(_WMX3ApiPython.Config_AxisParam_singleTurnEncoderCount_get, _WMX3ApiPython.Config_AxisParam_singleTurnEncoderCount_set)

    def SetSingleTurnEncoderCount(self, index, value):
        return _WMX3ApiPython.Config_AxisParam_SetSingleTurnEncoderCount(self, index, value)

    def GetSingleTurnEncoderCount(self, index):
        return _WMX3ApiPython.Config_AxisParam_GetSingleTurnEncoderCount(self, index)
    maxTrqLimit = property(_WMX3ApiPython.Config_AxisParam_maxTrqLimit_get, _WMX3ApiPython.Config_AxisParam_maxTrqLimit_set)

    def SetMaxTrqLimit(self, index, value):
        return _WMX3ApiPython.Config_AxisParam_SetMaxTrqLimit(self, index, value)

    def GetMaxTrqLimit(self, index):
        return _WMX3ApiPython.Config_AxisParam_GetMaxTrqLimit(self, index)
    negativeTrqLimit = property(_WMX3ApiPython.Config_AxisParam_negativeTrqLimit_get, _WMX3ApiPython.Config_AxisParam_negativeTrqLimit_set)

    def SetNegativeTrqLimit(self, index, value):
        return _WMX3ApiPython.Config_AxisParam_SetNegativeTrqLimit(self, index, value)

    def GetNegativeTrqLimit(self, index):
        return _WMX3ApiPython.Config_AxisParam_GetNegativeTrqLimit(self, index)
    positiveTrqLimit = property(_WMX3ApiPython.Config_AxisParam_positiveTrqLimit_get, _WMX3ApiPython.Config_AxisParam_positiveTrqLimit_set)

    def SetPositiveTrqLimit(self, index, value):
        return _WMX3ApiPython.Config_AxisParam_SetPositiveTrqLimit(self, index, value)

    def GetPositiveTrqLimit(self, index):
        return _WMX3ApiPython.Config_AxisParam_GetPositiveTrqLimit(self, index)
    axisUnit = property(_WMX3ApiPython.Config_AxisParam_axisUnit_get, _WMX3ApiPython.Config_AxisParam_axisUnit_set)

    def SetAxisUnit(self, index, value):
        return _WMX3ApiPython.Config_AxisParam_SetAxisUnit(self, index, value)

    def GetAxisUnit(self, index):
        return _WMX3ApiPython.Config_AxisParam_GetAxisUnit(self, index)
    velocityFeedforwardGain = property(_WMX3ApiPython.Config_AxisParam_velocityFeedforwardGain_get, _WMX3ApiPython.Config_AxisParam_velocityFeedforwardGain_set)

    def SetVelocityFeedforwardGain(self, index, value):
        return _WMX3ApiPython.Config_AxisParam_SetVelocityFeedforwardGain(self, index, value)

    def GetVelocityFeedforwardGain(self, index):
        return _WMX3ApiPython.Config_AxisParam_GetVelocityFeedforwardGain(self, index)
    axisPolarity = property(_WMX3ApiPython.Config_AxisParam_axisPolarity_get, _WMX3ApiPython.Config_AxisParam_axisPolarity_set)

    def SetAxisPolarity(self, index, value):
        return _WMX3ApiPython.Config_AxisParam_SetAxisPolarity(self, index, value)

    def GetAxisPolarity(self, index):
        return _WMX3ApiPython.Config_AxisParam_GetAxisPolarity(self, index)
    maxMotorSpeed = property(_WMX3ApiPython.Config_AxisParam_maxMotorSpeed_get, _WMX3ApiPython.Config_AxisParam_maxMotorSpeed_set)

    def SetMaxMotorSpeed(self, index, value):
        return _WMX3ApiPython.Config_AxisParam_SetMaxMotorSpeed(self, index, value)

    def GetMaxMotorSpeed(self, index):
        return _WMX3ApiPython.Config_AxisParam_GetMaxMotorSpeed(self, index)
    absoluteEncoderMode = property(_WMX3ApiPython.Config_AxisParam_absoluteEncoderMode_get, _WMX3ApiPython.Config_AxisParam_absoluteEncoderMode_set)

    def SetAbsoluteEncoderMode(self, index, value):
        return _WMX3ApiPython.Config_AxisParam_SetAbsoluteEncoderMode(self, index, value)

    def GetAbsoluteEncoderMode(self, index):
        return _WMX3ApiPython.Config_AxisParam_GetAbsoluteEncoderMode(self, index)
    absoluteEncoderHomeOffset = property(_WMX3ApiPython.Config_AxisParam_absoluteEncoderHomeOffset_get, _WMX3ApiPython.Config_AxisParam_absoluteEncoderHomeOffset_set)

    def SetAbsoluteEncoderHomeOffset(self, index, value):
        return _WMX3ApiPython.Config_AxisParam_SetAbsoluteEncoderHomeOffset(self, index, value)

    def GetAbsoluteEncoderHomeOffset(self, index):
        return _WMX3ApiPython.Config_AxisParam_GetAbsoluteEncoderHomeOffset(self, index)

    def __init__(self):
        _WMX3ApiPython.Config_AxisParam_swiginit(self, _WMX3ApiPython.new_Config_AxisParam())
    __swig_destroy__ = _WMX3ApiPython.delete_Config_AxisParam

# Register Config_AxisParam in _WMX3ApiPython:
_WMX3ApiPython.Config_AxisParam_swigregister(Config_AxisParam)
class Config(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, cm):
        _WMX3ApiPython.Config_swiginit(self, _WMX3ApiPython.new_Config(cm))
    __swig_destroy__ = _WMX3ApiPython.delete_Config

    def IsDeviceValid(self):
        return _WMX3ApiPython.Config_IsDeviceValid(self)

    def SetParam(self, pParam):
        pParamError = Config_SystemParam()
        ret = _WMX3ApiPython.Config_SetParam(self, pParam, pParamError)
        return ret, pParamError



    def GetParam(self):
        pParam = Config_SystemParam()
        ret = _WMX3ApiPython.Config_GetParam(self, pParam)
        return ret, pParam



    def SetParam_Axis(self, axis, pParam):
        pParamError = Config_SystemParam()
        ret = _WMX3ApiPython.Config_SetParam_Axis(self, axis, pParam, pParamError)
        return ret, pParamError



    def GetParam_Axis(self, axis):
        pParam = Config_SystemParam()
        ret = _WMX3ApiPython.Config_GetParam_Axis(self, axis, pParam)
        return ret, pParam



    def SetAxisParam(self, pParam):
        pParamError = Config_AxisParam()
        ret = _WMX3ApiPython.Config_SetAxisParam(self, pParam, pParamError)
        return ret, pParamError



    def GetAxisParam(self):
        pParam = Config_AxisParam()
        ret = _WMX3ApiPython.Config_GetAxisParam(self, pParam)
        return ret, pParam



    def SetAxisParam_Axis(self, axis, pParam):
        pParamError = Config_AxisParam()
        ret = _WMX3ApiPython.Config_SetAxisParam_Axis(self, axis, pParam, pParamError)
        return ret, pParamError



    def GetAxisParam_Axis(self, axis):
        pParam = Config_AxisParam()
        ret = _WMX3ApiPython.Config_GetAxisParam_Axis(self, axis, pParam)
        return ret, pParam



    def SetGearRatio(self, axis, numerator, denominator):
        return _WMX3ApiPython.Config_SetGearRatio(self, axis, numerator, denominator)

    def SetSingleTurn(self, axis, enable, encoderCount):
        return _WMX3ApiPython.Config_SetSingleTurn(self, axis, enable, encoderCount)

    def SetMovingAverageProfileTime(self, axis, milliseconds):
        return _WMX3ApiPython.Config_SetMovingAverageProfileTime(self, axis, milliseconds)

    def SetAxisUnit(self, axis, unit):
        return _WMX3ApiPython.Config_SetAxisUnit(self, axis, unit)

    def SetVelocityFeedforwardGain(self, axis, gain):
        return _WMX3ApiPython.Config_SetVelocityFeedforwardGain(self, axis, gain)

    def SetAxisPolarity(self, axis, polarity):
        return _WMX3ApiPython.Config_SetAxisPolarity(self, axis, polarity)

    def SetAbsoluteEncoderMode(self, axis, enable):
        return _WMX3ApiPython.Config_SetAbsoluteEncoderMode(self, axis, enable)

    def SetAbsoluteEncoderHomeOffset(self, axis, offset):
        return _WMX3ApiPython.Config_SetAbsoluteEncoderHomeOffset(self, axis, offset)

    def GetGearRatio(self, axis):
        pNumerator = doublep()
        pDenominator = doublep()
        ret = _WMX3ApiPython.Config_GetGearRatio(self, axis, pNumerator, pDenominator)
        return ret, pNumerator.value(), pDenominator.value()



    def GetSingleTurn(self, axis):
        pEnable = boolp()
        pEncoderCount = uintp()
        ret = _WMX3ApiPython.Config_GetSingleTurn(self, axis, pEnable, pEncoderCount)
        return ret, pEnable, pEncoderCount.value()



    def GetMovingAverageProfileTime(self, axis):
        pMilliseconds = doublep()
        ret = _WMX3ApiPython.Config_GetMovingAverageProfileTime(self, axis, pMilliseconds)
        return ret, pMilliseconds.value()



    def GetAxisUnit(self, axis):
        pUnit = doublep()
        ret = _WMX3ApiPython.Config_GetAxisUnit(self, axis, pUnit)
        return ret, pUnit.value()



    def GetVelocityFeedforwardGain(self, axis):
        pGain = doublep()
        ret = _WMX3ApiPython.Config_GetVelocityFeedforwardGain(self, axis, pGain)
        return ret, pGain.value()



    def GetAxisPolarity(self, axis):
        pPolarity = intp()
        ret = _WMX3ApiPython.Config_GetAxisPolarity(self, axis, pPolarity)
        return ret, pPolarity.value()



    def GetAbsoluteEncoderMode(self, axis):
        pEnable = boolp()
        ret = _WMX3ApiPython.Config_GetAbsoluteEncoderMode(self, axis, pEnable)
        return ret, pEnable



    def GetAbsoluteEncoderHomeOffset(self, axis):
        pOffset = doublep()
        ret = _WMX3ApiPython.Config_GetAbsoluteEncoderHomeOffset(self, axis, pOffset)
        return ret, pOffset.value()



    def SetFeedbackParam(self, axis, pParam):
        pParamError = Config_FeedbackParam()
        ret = _WMX3ApiPython.Config_SetFeedbackParam(self, axis, pParam, pParamError)
        return ret, pParamError



    def SetHomeParam(self, axis, pParam):
        pParamError = Config_HomeParam()
        ret = _WMX3ApiPython.Config_SetHomeParam(self, axis, pParam, pParamError)
        return ret, pParamError



    def SetLimitParam(self, axis, pParam):
        pParamError = Config_LimitParam()
        ret = _WMX3ApiPython.Config_SetLimitParam(self, axis, pParam, pParamError)
        return ret, pParamError



    def SetMotionParam(self, axis, pParam):
        pParamError = Config_HomeParam()
        ret = _WMX3ApiPython.Config_SetMotionParam(self, axis, pParam, pParamError)
        return ret, pParamError



    def SetAlarmParam(self, axis, pParam):
        pParamError = Config_AlarmParam()
        ret = _WMX3ApiPython.Config_SetAlarmParam(self, axis, pParam, pParamError)
        return ret, pParamError



    def SetSyncParam(self, axis, pParam):
        pParamError = Config_SyncParam()
        ret = _WMX3ApiPython.Config_SetSyncParam(self, axis, pParam, pParamError)
        return ret, pParamError



    def SetFlightRecorderParam(self, pParam):
        pParamError = Config_FlightRecorderParam()
        ret = _WMX3ApiPython.Config_SetFlightRecorderParam(self, pParam, pParamError)
        return ret, pParamError



    def SetFlightRecorderPath(self, pPath):
        return _WMX3ApiPython.Config_SetFlightRecorderPath(self, pPath)

    def SetEmergencyStopParam(self, pParam):
        pParamError = Config_EmergencyStopParam()
        ret = _WMX3ApiPython.Config_SetEmergencyStopParam(self, pParam, pParamError)
        return ret, pParamError



    def GetFeedbackParam(self, axis):
        pParam = Config_FeedbackParam()
        ret = _WMX3ApiPython.Config_GetFeedbackParam(self, axis, pParam)
        return ret, pParam



    def GetHomeParam(self, axis):
        pParam = Config_HomeParam()
        ret = _WMX3ApiPython.Config_GetHomeParam(self, axis, pParam)
        return ret, pParam



    def GetLimitParam(self, axis):
        pParam = Config_LimitParam()
        ret = _WMX3ApiPython.Config_GetLimitParam(self, axis, pParam)
        return ret, pParam



    def GetMotionParam(self, axis):
        pParam = Config_MotionParam()
        ret = _WMX3ApiPython.Config_GetMotionParam(self, axis, pParam)
        return ret, pParam



    def GetAlarmParam(self, axis):
        pParam = Config_AlarmParam()
        ret = _WMX3ApiPython.Config_GetAlarmParam(self, axis, pParam)
        return ret, pParam



    def GetSyncParam(self, axis):
        pParam = Config_SyncParam()
        ret = _WMX3ApiPython.Config_GetSyncParam(self, axis, pParam)
        return ret, pParam



    def GetFlightRecorderParam(self):
        pParam = Config_FlightRecorderParam()
        ret = _WMX3ApiPython.Config_GetFlightRecorderParam(self, pParam)
        return ret, pParam



    def GetEmergencyStopParam(self):
        pParam = EmergencyStopParam()
        ret = _WMX3ApiPython.Config_GetEmergencyStopParam(self, pParam)
        return ret, pParam



    def GetDefaultParam(self):
        pParam = Config_SystemParam()
        ret = _WMX3ApiPython.Config_GetDefaultParam(self, pParam)
        return ret, pParam



    def GetDefaultAxisParam(self):
        pAxisParam = Config_AxisParam()
        ret = _WMX3ApiPython.Config_GetDefaultAxisParam(self, pAxisParam)
        return ret, pAxisParam



    def Export_SysPrm(self, pPath, pParam):
        return _WMX3ApiPython.Config_Export_SysPrm(self, pPath, pParam)

    def Export_AxisPrm(self, pPath, pAxisParam):
        return _WMX3ApiPython.Config_Export_AxisPrm(self, pPath, pAxisParam)

    def Export_SysPrm_AxisPrm(self, pPath, pParam, pAxisParam):
        return _WMX3ApiPython.Config_Export_SysPrm_AxisPrm(self, pPath, pParam, pAxisParam)

    def Export_SysPrm_Axis(self, pPath, pParam, axis):
        return _WMX3ApiPython.Config_Export_SysPrm_Axis(self, pPath, pParam, axis)

    def Export_AxisPrm_Axis(self, pPath, pAxisParam, axis):
        return _WMX3ApiPython.Config_Export_AxisPrm_Axis(self, pPath, pAxisParam, axis)

    def Export_SysPrm_AxisPrm_Axis(self, pPath, pParam, pAxisParam, axis):
        return _WMX3ApiPython.Config_Export_SysPrm_AxisPrm_Axis(self, pPath, pParam, pAxisParam, axis)

    def Import_SysPrm(self, pPath):
        pParam = Config_SystemParam()
        ret = _WMX3ApiPython.Config_Import_SysPrm(self, pPath, pParam)
        return ret, pParam



    def Import_AxisPrm(self, pPath):
        pParam = Config_AxisParam()
        ret = _WMX3ApiPython.Config_Import_AxisPrm(self, pPath, pParam)
        return ret, pParam



    def Import_SysPrm_AxisPrm(self, pPath):
        pParam = Config_SystemParam()
        pAxisParam = Config_AxisParam()
        ret = _WMX3ApiPython.Config_Import_SysPrm_AxisPrm(self, pPath, pParam, pAxisParam)
        return ret, pParam, pAxisParam



    def Import_SysPrm_Axis(self, pPath, axis, copyParamToAxes):
        pParam = Config_SystemParam()
        ret = _WMX3ApiPython.Config_Import_SysPrm_Axis(self, pPath, pParam, axis, copyParamToAxes)
        return ret, pParam



    def Import_AxisPrm_Axis(self, pPath, axis, copyParamToAxes):
        pParam = Config_AxisParam()
        ret = _WMX3ApiPython.Config_Import_AxisPrm_Axis(self, pPath, pParam, axis, copyParamToAxes)
        return ret, pParam



    def Import_SysPrm_AxisPrm_Axis(self, pPath, pAxisPath, axis, copyParamToAxes):
        pParam = Config_SystemParam()
        pAxisParam = Config_AxisParam()
        ret = _WMX3ApiPython.Config_Import_SysPrm_AxisPrm_Axis(self, pPath, pParam, pAxisParam, axis, copyParamToAxes)
        return ret, pParam, pAxisParam



    def GetAndExportAll(self, pPath):
        return _WMX3ApiPython.Config_GetAndExportAll(self, pPath)

    def ImportAndSetAll(self, pPath):
        pParamError = Config_SystemParam()
        pParamError = Config_AxisParam()
        ret = _WMX3ApiPython.Config_ImportAndSetAll(self, pPath, pParamError, pParamError)
        return ret, pParamError, pParamError



# Register Config in _WMX3ApiPython:
_WMX3ApiPython.Config_swigregister(Config)
class CoreMotion(object):
    r"""CoreMotion.rtdll Ver.3.5.0.0 is required to use."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""CoreMotion.rtdll Ver.3.5.0.0 is required to use.CoreMotion.rtdll Ver.3.5.0.0 is required to use."""
        _WMX3ApiPython.CoreMotion_swiginit(self, _WMX3ApiPython.new_CoreMotion(*args))
    __swig_destroy__ = _WMX3ApiPython.delete_CoreMotion

    @staticmethod
    def ErrorToString(errCode):
        return _WMX3ApiPython.CoreMotion_ErrorToString(errCode)

    @staticmethod
    def ApiLogToString(pLogData, logDataSize):
        return _WMX3ApiPython.CoreMotion_ApiLogToString(pLogData, logDataSize)

    @staticmethod
    def GetLibVersion():
        return _WMX3ApiPython.CoreMotion_GetLibVersion()

    def IsDeviceValid(self):
        return _WMX3ApiPython.CoreMotion_IsDeviceValid(self)

    def GetVersion(self):
        return _WMX3ApiPython.CoreMotion_GetVersion(self)

    def GetStatus(self):
        status = CoreMotionStatus()
        ret = _WMX3ApiPython.CoreMotion_GetStatus(self, status)
        return ret, status



    def ClearVibrationStatus(self, axis):
        return _WMX3ApiPython.CoreMotion_ClearVibrationStatus(self, axis)

    def ClearVibrationStatus_AxisSel(self, pAxisSelection):
        return _WMX3ApiPython.CoreMotion_ClearVibrationStatus_AxisSel(self, pAxisSelection)

    def ExecEStop(self, level):
        return _WMX3ApiPython.CoreMotion_ExecEStop(self, level)

    def ReleaseEStop(self):
        return _WMX3ApiPython.CoreMotion_ReleaseEStop(self)

    def TriggerFlightRecorder(self):
        return _WMX3ApiPython.CoreMotion_TriggerFlightRecorder(self)

    def ResetFlightRecorder(self):
        return _WMX3ApiPython.CoreMotion_ResetFlightRecorder(self)
    axisControl = property(_WMX3ApiPython.CoreMotion_axisControl_get, _WMX3ApiPython.CoreMotion_axisControl_set)
    motion = property(_WMX3ApiPython.CoreMotion_motion_get, _WMX3ApiPython.CoreMotion_motion_set)
    home = property(_WMX3ApiPython.CoreMotion_home_get, _WMX3ApiPython.CoreMotion_home_set)
    velocity = property(_WMX3ApiPython.CoreMotion_velocity_get, _WMX3ApiPython.CoreMotion_velocity_set)
    torque = property(_WMX3ApiPython.CoreMotion_torque_get, _WMX3ApiPython.CoreMotion_torque_set)
    sync = property(_WMX3ApiPython.CoreMotion_sync_get, _WMX3ApiPython.CoreMotion_sync_set)
    config = property(_WMX3ApiPython.CoreMotion_config_get, _WMX3ApiPython.CoreMotion_config_set)

# Register CoreMotion in _WMX3ApiPython:
_WMX3ApiPython.CoreMotion_swigregister(CoreMotion)
class IOErrorCode(ErrorCode):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    SharedMemoryNull = _WMX3ApiPython.IOErrorCode_SharedMemoryNull
    IOCountOutOfRange = _WMX3ApiPython.IOErrorCode_IOCountOutOfRange

    def __init__(self):
        _WMX3ApiPython.IOErrorCode_swiginit(self, _WMX3ApiPython.new_IOErrorCode())
    __swig_destroy__ = _WMX3ApiPython.delete_IOErrorCode

# Register IOErrorCode in _WMX3ApiPython:
_WMX3ApiPython.IOErrorCode_swigregister(IOErrorCode)
class IoLogInput(LogInput):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def SetData(self, pIoLogInput):
        return _WMX3ApiPython.IoLogInput_SetData(self, pIoLogInput)

    def GetData(self, pIoLogInput):
        return _WMX3ApiPython.IoLogInput_GetData(self, pIoLogInput)

    def __init__(self):
        _WMX3ApiPython.IoLogInput_swiginit(self, _WMX3ApiPython.new_IoLogInput())

    def GetModuleId(self):
        return _WMX3ApiPython.IoLogInput_GetModuleId(self)

    def GetInputData(self, buff, buffSize, dataSize):
        return _WMX3ApiPython.IoLogInput_GetInputData(self, buff, buffSize, dataSize)

    def SetInputData(self, moduleId, data, dataSize):
        return _WMX3ApiPython.IoLogInput_SetInputData(self, moduleId, data, dataSize)

    def GetLogInput(self):
        return _WMX3ApiPython.IoLogInput_GetLogInput(self)
    inputIOAddress = property(_WMX3ApiPython.IoLogInput_inputIOAddress_get, _WMX3ApiPython.IoLogInput_inputIOAddress_set)

    def SetInputIOAddress(self, index, value):
        return _WMX3ApiPython.IoLogInput_SetInputIOAddress(self, index, value)

    def GetInputIOAddress(self, index):
        return _WMX3ApiPython.IoLogInput_GetInputIOAddress(self, index)
    inputSize = property(_WMX3ApiPython.IoLogInput_inputSize_get, _WMX3ApiPython.IoLogInput_inputSize_set)
    outputIOAddress = property(_WMX3ApiPython.IoLogInput_outputIOAddress_get, _WMX3ApiPython.IoLogInput_outputIOAddress_set)

    def SetOutputIOAddress(self, index, value):
        return _WMX3ApiPython.IoLogInput_SetOutputIOAddress(self, index, value)

    def GetOutputIOAddress(self, index):
        return _WMX3ApiPython.IoLogInput_GetOutputIOAddress(self, index)
    outputSize = property(_WMX3ApiPython.IoLogInput_outputSize_get, _WMX3ApiPython.IoLogInput_outputSize_set)
    inputIOLogFormat = property(_WMX3ApiPython.IoLogInput_inputIOLogFormat_get, _WMX3ApiPython.IoLogInput_inputIOLogFormat_set)

    def SetInputIOLogFormat(self, index, value):
        return _WMX3ApiPython.IoLogInput_SetInputIOLogFormat(self, index, value)

    def GetInputIOLogFormat(self, index):
        return _WMX3ApiPython.IoLogInput_GetInputIOLogFormat(self, index)
    inputIOFormatCount = property(_WMX3ApiPython.IoLogInput_inputIOFormatCount_get, _WMX3ApiPython.IoLogInput_inputIOFormatCount_set)
    outputIOLogFormat = property(_WMX3ApiPython.IoLogInput_outputIOLogFormat_get, _WMX3ApiPython.IoLogInput_outputIOLogFormat_set)

    def SetOutputIOLogFormat(self, index, value):
        return _WMX3ApiPython.IoLogInput_SetOutputIOLogFormat(self, index, value)

    def GetOutputIOLogFormat(self, index):
        return _WMX3ApiPython.IoLogInput_GetOutputIOLogFormat(self, index)
    outputIOFormatCount = property(_WMX3ApiPython.IoLogInput_outputIOFormatCount_get, _WMX3ApiPython.IoLogInput_outputIOFormatCount_set)
    __swig_destroy__ = _WMX3ApiPython.delete_IoLogInput

# Register IoLogInput in _WMX3ApiPython:
_WMX3ApiPython.IoLogInput_swigregister(IoLogInput)
class IoLogOutput(LogOutput):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _WMX3ApiPython.IoLogOutput_swiginit(self, _WMX3ApiPython.new_IoLogOutput())

    def GetModuleId(self):
        return _WMX3ApiPython.IoLogOutput_GetModuleId(self)

    def GetLogOutput(self):
        return _WMX3ApiPython.IoLogOutput_GetLogOutput(self)

    def SetLogOutput(self, src):
        return _WMX3ApiPython.IoLogOutput_SetLogOutput(self, src)
    input = property(_WMX3ApiPython.IoLogOutput_input_get, _WMX3ApiPython.IoLogOutput_input_set)

    def SetInput(self, index1, index2, value):
        return _WMX3ApiPython.IoLogOutput_SetInput(self, index1, index2, value)

    def GetInput(self, index1, index2):
        return _WMX3ApiPython.IoLogOutput_GetInput(self, index1, index2)
    output = property(_WMX3ApiPython.IoLogOutput_output_get, _WMX3ApiPython.IoLogOutput_output_set)

    def SetOutput(self, index1, index2, value):
        return _WMX3ApiPython.IoLogOutput_SetOutput(self, index1, index2, value)

    def GetOutput(self, index1, index2):
        return _WMX3ApiPython.IoLogOutput_GetOutput(self, index1, index2)
    __swig_destroy__ = _WMX3ApiPython.delete_IoLogOutput

# Register IoLogOutput in _WMX3ApiPython:
_WMX3ApiPython.IoLogOutput_swigregister(IoLogOutput)
class BaseIoEventInputFunctionArguments_IOSingle(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    byteAddress = property(_WMX3ApiPython.BaseIoEventInputFunctionArguments_IOSingle_byteAddress_get, _WMX3ApiPython.BaseIoEventInputFunctionArguments_IOSingle_byteAddress_set)
    bitAddress = property(_WMX3ApiPython.BaseIoEventInputFunctionArguments_IOSingle_bitAddress_get, _WMX3ApiPython.BaseIoEventInputFunctionArguments_IOSingle_bitAddress_set)
    invert = property(_WMX3ApiPython.BaseIoEventInputFunctionArguments_IOSingle_invert_get, _WMX3ApiPython.BaseIoEventInputFunctionArguments_IOSingle_invert_set)
    ioSourceType = property(_WMX3ApiPython.BaseIoEventInputFunctionArguments_IOSingle_ioSourceType_get, _WMX3ApiPython.BaseIoEventInputFunctionArguments_IOSingle_ioSourceType_set)

    def __init__(self):
        _WMX3ApiPython.BaseIoEventInputFunctionArguments_IOSingle_swiginit(self, _WMX3ApiPython.new_BaseIoEventInputFunctionArguments_IOSingle())
    __swig_destroy__ = _WMX3ApiPython.delete_BaseIoEventInputFunctionArguments_IOSingle

# Register BaseIoEventInputFunctionArguments_IOSingle in _WMX3ApiPython:
_WMX3ApiPython.BaseIoEventInputFunctionArguments_IOSingle_swigregister(BaseIoEventInputFunctionArguments_IOSingle)
class BaseIoEventInputFunctionArguments_IOMulti(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    byteAddress = property(_WMX3ApiPython.BaseIoEventInputFunctionArguments_IOMulti_byteAddress_get, _WMX3ApiPython.BaseIoEventInputFunctionArguments_IOMulti_byteAddress_set)
    bitAddress = property(_WMX3ApiPython.BaseIoEventInputFunctionArguments_IOMulti_bitAddress_get, _WMX3ApiPython.BaseIoEventInputFunctionArguments_IOMulti_bitAddress_set)
    ioSourceType = property(_WMX3ApiPython.BaseIoEventInputFunctionArguments_IOMulti_ioSourceType_get, _WMX3ApiPython.BaseIoEventInputFunctionArguments_IOMulti_ioSourceType_set)
    invert = property(_WMX3ApiPython.BaseIoEventInputFunctionArguments_IOMulti_invert_get, _WMX3ApiPython.BaseIoEventInputFunctionArguments_IOMulti_invert_set)

    def SetBitAddress(self, index, value):
        return _WMX3ApiPython.BaseIoEventInputFunctionArguments_IOMulti_SetBitAddress(self, index, value)

    def GetBitAddress(self, index):
        return _WMX3ApiPython.BaseIoEventInputFunctionArguments_IOMulti_GetBitAddress(self, index)

    def SetByteAddress(self, index, value):
        return _WMX3ApiPython.BaseIoEventInputFunctionArguments_IOMulti_SetByteAddress(self, index, value)

    def GetByteAddress(self, index):
        return _WMX3ApiPython.BaseIoEventInputFunctionArguments_IOMulti_GetByteAddress(self, index)

    def SetIOSourceType(self, index, value):
        return _WMX3ApiPython.BaseIoEventInputFunctionArguments_IOMulti_SetIOSourceType(self, index, value)

    def GetIOSourceType(self, index):
        return _WMX3ApiPython.BaseIoEventInputFunctionArguments_IOMulti_GetIOSourceType(self, index)

    def SetInvert(self, index, value):
        return _WMX3ApiPython.BaseIoEventInputFunctionArguments_IOMulti_SetInvert(self, index, value)

    def GetInvert(self, index):
        return _WMX3ApiPython.BaseIoEventInputFunctionArguments_IOMulti_GetInvert(self, index)

    def __init__(self):
        _WMX3ApiPython.BaseIoEventInputFunctionArguments_IOMulti_swiginit(self, _WMX3ApiPython.new_BaseIoEventInputFunctionArguments_IOMulti())
    __swig_destroy__ = _WMX3ApiPython.delete_BaseIoEventInputFunctionArguments_IOMulti

# Register BaseIoEventInputFunctionArguments_IOMulti in _WMX3ApiPython:
_WMX3ApiPython.BaseIoEventInputFunctionArguments_IOMulti_swigregister(BaseIoEventInputFunctionArguments_IOMulti)
class BaseIoEventInputFunctionArguments_IOBytes(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    byteAddress = property(_WMX3ApiPython.BaseIoEventInputFunctionArguments_IOBytes_byteAddress_get, _WMX3ApiPython.BaseIoEventInputFunctionArguments_IOBytes_byteAddress_set)
    size = property(_WMX3ApiPython.BaseIoEventInputFunctionArguments_IOBytes_size_get, _WMX3ApiPython.BaseIoEventInputFunctionArguments_IOBytes_size_set)
    value = property(_WMX3ApiPython.BaseIoEventInputFunctionArguments_IOBytes_value_get, _WMX3ApiPython.BaseIoEventInputFunctionArguments_IOBytes_value_set)
    invert = property(_WMX3ApiPython.BaseIoEventInputFunctionArguments_IOBytes_invert_get, _WMX3ApiPython.BaseIoEventInputFunctionArguments_IOBytes_invert_set)
    ioSourceType = property(_WMX3ApiPython.BaseIoEventInputFunctionArguments_IOBytes_ioSourceType_get, _WMX3ApiPython.BaseIoEventInputFunctionArguments_IOBytes_ioSourceType_set)

    def __init__(self):
        _WMX3ApiPython.BaseIoEventInputFunctionArguments_IOBytes_swiginit(self, _WMX3ApiPython.new_BaseIoEventInputFunctionArguments_IOBytes())
    __swig_destroy__ = _WMX3ApiPython.delete_BaseIoEventInputFunctionArguments_IOBytes

# Register BaseIoEventInputFunctionArguments_IOBytes in _WMX3ApiPython:
_WMX3ApiPython.BaseIoEventInputFunctionArguments_IOBytes_swigregister(BaseIoEventInputFunctionArguments_IOBytes)
class IoEventInputFunctionArguments_IOBit(BaseIoEventInputFunctionArguments_IOSingle):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _WMX3ApiPython.IoEventInputFunctionArguments_IOBit_swiginit(self, _WMX3ApiPython.new_IoEventInputFunctionArguments_IOBit())
    __swig_destroy__ = _WMX3ApiPython.delete_IoEventInputFunctionArguments_IOBit

# Register IoEventInputFunctionArguments_IOBit in _WMX3ApiPython:
_WMX3ApiPython.IoEventInputFunctionArguments_IOBit_swigregister(IoEventInputFunctionArguments_IOBit)
class IoEventInputFunctionArguments_NotIOBit(BaseIoEventInputFunctionArguments_IOSingle):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _WMX3ApiPython.IoEventInputFunctionArguments_NotIOBit_swiginit(self, _WMX3ApiPython.new_IoEventInputFunctionArguments_NotIOBit())
    __swig_destroy__ = _WMX3ApiPython.delete_IoEventInputFunctionArguments_NotIOBit

# Register IoEventInputFunctionArguments_NotIOBit in _WMX3ApiPython:
_WMX3ApiPython.IoEventInputFunctionArguments_NotIOBit_swigregister(IoEventInputFunctionArguments_NotIOBit)
class IoEventInputFunctionArguments_OrIOBit(BaseIoEventInputFunctionArguments_IOMulti):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _WMX3ApiPython.IoEventInputFunctionArguments_OrIOBit_swiginit(self, _WMX3ApiPython.new_IoEventInputFunctionArguments_OrIOBit())
    __swig_destroy__ = _WMX3ApiPython.delete_IoEventInputFunctionArguments_OrIOBit

# Register IoEventInputFunctionArguments_OrIOBit in _WMX3ApiPython:
_WMX3ApiPython.IoEventInputFunctionArguments_OrIOBit_swigregister(IoEventInputFunctionArguments_OrIOBit)
class IoEventInputFunctionArguments_AndIOBit(BaseIoEventInputFunctionArguments_IOMulti):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _WMX3ApiPython.IoEventInputFunctionArguments_AndIOBit_swiginit(self, _WMX3ApiPython.new_IoEventInputFunctionArguments_AndIOBit())
    __swig_destroy__ = _WMX3ApiPython.delete_IoEventInputFunctionArguments_AndIOBit

# Register IoEventInputFunctionArguments_AndIOBit in _WMX3ApiPython:
_WMX3ApiPython.IoEventInputFunctionArguments_AndIOBit_swigregister(IoEventInputFunctionArguments_AndIOBit)
class IoEventInputFunctionArguments_XorIOBit(BaseIoEventInputFunctionArguments_IOMulti):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _WMX3ApiPython.IoEventInputFunctionArguments_XorIOBit_swiginit(self, _WMX3ApiPython.new_IoEventInputFunctionArguments_XorIOBit())
    __swig_destroy__ = _WMX3ApiPython.delete_IoEventInputFunctionArguments_XorIOBit

# Register IoEventInputFunctionArguments_XorIOBit in _WMX3ApiPython:
_WMX3ApiPython.IoEventInputFunctionArguments_XorIOBit_swigregister(IoEventInputFunctionArguments_XorIOBit)
class IoEventInputFunctionArguments_NandIOBit(BaseIoEventInputFunctionArguments_IOMulti):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _WMX3ApiPython.IoEventInputFunctionArguments_NandIOBit_swiginit(self, _WMX3ApiPython.new_IoEventInputFunctionArguments_NandIOBit())
    __swig_destroy__ = _WMX3ApiPython.delete_IoEventInputFunctionArguments_NandIOBit

# Register IoEventInputFunctionArguments_NandIOBit in _WMX3ApiPython:
_WMX3ApiPython.IoEventInputFunctionArguments_NandIOBit_swigregister(IoEventInputFunctionArguments_NandIOBit)
class IoEventInputFunctionArguments_NorIOBit(BaseIoEventInputFunctionArguments_IOMulti):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _WMX3ApiPython.IoEventInputFunctionArguments_NorIOBit_swiginit(self, _WMX3ApiPython.new_IoEventInputFunctionArguments_NorIOBit())
    __swig_destroy__ = _WMX3ApiPython.delete_IoEventInputFunctionArguments_NorIOBit

# Register IoEventInputFunctionArguments_NorIOBit in _WMX3ApiPython:
_WMX3ApiPython.IoEventInputFunctionArguments_NorIOBit_swigregister(IoEventInputFunctionArguments_NorIOBit)
class IoEventInputFunctionArguments_XnorIOBit(BaseIoEventInputFunctionArguments_IOMulti):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _WMX3ApiPython.IoEventInputFunctionArguments_XnorIOBit_swiginit(self, _WMX3ApiPython.new_IoEventInputFunctionArguments_XnorIOBit())
    __swig_destroy__ = _WMX3ApiPython.delete_IoEventInputFunctionArguments_XnorIOBit

# Register IoEventInputFunctionArguments_XnorIOBit in _WMX3ApiPython:
_WMX3ApiPython.IoEventInputFunctionArguments_XnorIOBit_swigregister(IoEventInputFunctionArguments_XnorIOBit)
class IoEventInputFunctionArguments_DelayIOBit(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    byteAddress = property(_WMX3ApiPython.IoEventInputFunctionArguments_DelayIOBit_byteAddress_get, _WMX3ApiPython.IoEventInputFunctionArguments_DelayIOBit_byteAddress_set)
    bitAddress = property(_WMX3ApiPython.IoEventInputFunctionArguments_DelayIOBit_bitAddress_get, _WMX3ApiPython.IoEventInputFunctionArguments_DelayIOBit_bitAddress_set)
    invert = property(_WMX3ApiPython.IoEventInputFunctionArguments_DelayIOBit_invert_get, _WMX3ApiPython.IoEventInputFunctionArguments_DelayIOBit_invert_set)
    ioSourceType = property(_WMX3ApiPython.IoEventInputFunctionArguments_DelayIOBit_ioSourceType_get, _WMX3ApiPython.IoEventInputFunctionArguments_DelayIOBit_ioSourceType_set)
    delayTime = property(_WMX3ApiPython.IoEventInputFunctionArguments_DelayIOBit_delayTime_get, _WMX3ApiPython.IoEventInputFunctionArguments_DelayIOBit_delayTime_set)

    def __init__(self):
        _WMX3ApiPython.IoEventInputFunctionArguments_DelayIOBit_swiginit(self, _WMX3ApiPython.new_IoEventInputFunctionArguments_DelayIOBit())
    __swig_destroy__ = _WMX3ApiPython.delete_IoEventInputFunctionArguments_DelayIOBit

# Register IoEventInputFunctionArguments_DelayIOBit in _WMX3ApiPython:
_WMX3ApiPython.IoEventInputFunctionArguments_DelayIOBit_swigregister(IoEventInputFunctionArguments_DelayIOBit)
class IoEventInputFunctionArguments_EqualIOBytes(BaseIoEventInputFunctionArguments_IOBytes):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _WMX3ApiPython.IoEventInputFunctionArguments_EqualIOBytes_swiginit(self, _WMX3ApiPython.new_IoEventInputFunctionArguments_EqualIOBytes())
    __swig_destroy__ = _WMX3ApiPython.delete_IoEventInputFunctionArguments_EqualIOBytes

# Register IoEventInputFunctionArguments_EqualIOBytes in _WMX3ApiPython:
_WMX3ApiPython.IoEventInputFunctionArguments_EqualIOBytes_swigregister(IoEventInputFunctionArguments_EqualIOBytes)
class IoEventInputFunctionArguments_GreaterIOBytes(BaseIoEventInputFunctionArguments_IOBytes):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    isSigned = property(_WMX3ApiPython.IoEventInputFunctionArguments_GreaterIOBytes_isSigned_get, _WMX3ApiPython.IoEventInputFunctionArguments_GreaterIOBytes_isSigned_set)

    def __init__(self):
        _WMX3ApiPython.IoEventInputFunctionArguments_GreaterIOBytes_swiginit(self, _WMX3ApiPython.new_IoEventInputFunctionArguments_GreaterIOBytes())
    __swig_destroy__ = _WMX3ApiPython.delete_IoEventInputFunctionArguments_GreaterIOBytes

# Register IoEventInputFunctionArguments_GreaterIOBytes in _WMX3ApiPython:
_WMX3ApiPython.IoEventInputFunctionArguments_GreaterIOBytes_swigregister(IoEventInputFunctionArguments_GreaterIOBytes)
class IoEventInputFunctionArguments_LessIOBytes(BaseIoEventInputFunctionArguments_IOBytes):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    isSigned = property(_WMX3ApiPython.IoEventInputFunctionArguments_LessIOBytes_isSigned_get, _WMX3ApiPython.IoEventInputFunctionArguments_LessIOBytes_isSigned_set)

    def __init__(self):
        _WMX3ApiPython.IoEventInputFunctionArguments_LessIOBytes_swiginit(self, _WMX3ApiPython.new_IoEventInputFunctionArguments_LessIOBytes())
    __swig_destroy__ = _WMX3ApiPython.delete_IoEventInputFunctionArguments_LessIOBytes

# Register IoEventInputFunctionArguments_LessIOBytes in _WMX3ApiPython:
_WMX3ApiPython.IoEventInputFunctionArguments_LessIOBytes_swigregister(IoEventInputFunctionArguments_LessIOBytes)
class IoEventInputType(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    IOBit = _WMX3ApiPython.IoEventInputType_IOBit
    NotIOBit = _WMX3ApiPython.IoEventInputType_NotIOBit
    OrIOBit = _WMX3ApiPython.IoEventInputType_OrIOBit
    AndIOBit = _WMX3ApiPython.IoEventInputType_AndIOBit
    XorIOBit = _WMX3ApiPython.IoEventInputType_XorIOBit
    NandIOBit = _WMX3ApiPython.IoEventInputType_NandIOBit
    NorIOBit = _WMX3ApiPython.IoEventInputType_NorIOBit
    XnorIOBit = _WMX3ApiPython.IoEventInputType_XnorIOBit
    DelayIOBit = _WMX3ApiPython.IoEventInputType_DelayIOBit
    EqualIOBytes = _WMX3ApiPython.IoEventInputType_EqualIOBytes
    GreaterIOBytes = _WMX3ApiPython.IoEventInputType_GreaterIOBytes
    LessIOBytes = _WMX3ApiPython.IoEventInputType_LessIOBytes

    def __init__(self):
        _WMX3ApiPython.IoEventInputType_swiginit(self, _WMX3ApiPython.new_IoEventInputType())
    __swig_destroy__ = _WMX3ApiPython.delete_IoEventInputType

# Register IoEventInputType in _WMX3ApiPython:
_WMX3ApiPython.IoEventInputType_swigregister(IoEventInputType)
class IoEventInput(EventInput):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _WMX3ApiPython.IoEventInput_swiginit(self, _WMX3ApiPython.new_IoEventInput())

    def GetInputModuleId(self):
        return _WMX3ApiPython.IoEventInput_GetInputModuleId(self)

    def GetInputData(self, buff, buffSize, dataSize, initialState):
        return _WMX3ApiPython.IoEventInput_GetInputData(self, buff, buffSize, dataSize, initialState)

    def SetInputData(self, moduleId, data, dataSize):
        return _WMX3ApiPython.IoEventInput_SetInputData(self, moduleId, data, dataSize)
    type = property(_WMX3ApiPython.IoEventInput_type_get, _WMX3ApiPython.IoEventInput_type_set)
    ioBit = property(_WMX3ApiPython.IoEventInput_ioBit_get, _WMX3ApiPython.IoEventInput_ioBit_set)
    notIOBit = property(_WMX3ApiPython.IoEventInput_notIOBit_get, _WMX3ApiPython.IoEventInput_notIOBit_set)
    orIOBit = property(_WMX3ApiPython.IoEventInput_orIOBit_get, _WMX3ApiPython.IoEventInput_orIOBit_set)
    andIOBit = property(_WMX3ApiPython.IoEventInput_andIOBit_get, _WMX3ApiPython.IoEventInput_andIOBit_set)
    xorIOBit = property(_WMX3ApiPython.IoEventInput_xorIOBit_get, _WMX3ApiPython.IoEventInput_xorIOBit_set)
    nandIOBit = property(_WMX3ApiPython.IoEventInput_nandIOBit_get, _WMX3ApiPython.IoEventInput_nandIOBit_set)
    norIOBit = property(_WMX3ApiPython.IoEventInput_norIOBit_get, _WMX3ApiPython.IoEventInput_norIOBit_set)
    xnorIOBit = property(_WMX3ApiPython.IoEventInput_xnorIOBit_get, _WMX3ApiPython.IoEventInput_xnorIOBit_set)
    delayIOBit = property(_WMX3ApiPython.IoEventInput_delayIOBit_get, _WMX3ApiPython.IoEventInput_delayIOBit_set)
    equalIOBytes = property(_WMX3ApiPython.IoEventInput_equalIOBytes_get, _WMX3ApiPython.IoEventInput_equalIOBytes_set)
    greaterIOBytes = property(_WMX3ApiPython.IoEventInput_greaterIOBytes_get, _WMX3ApiPython.IoEventInput_greaterIOBytes_set)
    lessIOBytes = property(_WMX3ApiPython.IoEventInput_lessIOBytes_get, _WMX3ApiPython.IoEventInput_lessIOBytes_set)
    __swig_destroy__ = _WMX3ApiPython.delete_IoEventInput

# Register IoEventInput in _WMX3ApiPython:
_WMX3ApiPython.IoEventInput_swigregister(IoEventInput)
class IoEventOutputFunctionArguments_SetIOOutBit(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    byteAddress = property(_WMX3ApiPython.IoEventOutputFunctionArguments_SetIOOutBit_byteAddress_get, _WMX3ApiPython.IoEventOutputFunctionArguments_SetIOOutBit_byteAddress_set)
    bitAddress = property(_WMX3ApiPython.IoEventOutputFunctionArguments_SetIOOutBit_bitAddress_get, _WMX3ApiPython.IoEventOutputFunctionArguments_SetIOOutBit_bitAddress_set)
    invert = property(_WMX3ApiPython.IoEventOutputFunctionArguments_SetIOOutBit_invert_get, _WMX3ApiPython.IoEventOutputFunctionArguments_SetIOOutBit_invert_set)
    setOffState = property(_WMX3ApiPython.IoEventOutputFunctionArguments_SetIOOutBit_setOffState_get, _WMX3ApiPython.IoEventOutputFunctionArguments_SetIOOutBit_setOffState_set)

    def __init__(self):
        _WMX3ApiPython.IoEventOutputFunctionArguments_SetIOOutBit_swiginit(self, _WMX3ApiPython.new_IoEventOutputFunctionArguments_SetIOOutBit())
    __swig_destroy__ = _WMX3ApiPython.delete_IoEventOutputFunctionArguments_SetIOOutBit

# Register IoEventOutputFunctionArguments_SetIOOutBit in _WMX3ApiPython:
_WMX3ApiPython.IoEventOutputFunctionArguments_SetIOOutBit_swigregister(IoEventOutputFunctionArguments_SetIOOutBit)
class IoEventOutputType(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    SetIOOutBit = _WMX3ApiPython.IoEventOutputType_SetIOOutBit

    def __init__(self):
        _WMX3ApiPython.IoEventOutputType_swiginit(self, _WMX3ApiPython.new_IoEventOutputType())
    __swig_destroy__ = _WMX3ApiPython.delete_IoEventOutputType

# Register IoEventOutputType in _WMX3ApiPython:
_WMX3ApiPython.IoEventOutputType_swigregister(IoEventOutputType)
class IoEventOutput(EventOutput):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _WMX3ApiPython.IoEventOutput_swiginit(self, _WMX3ApiPython.new_IoEventOutput())

    def GetOutputModuleId(self):
        return _WMX3ApiPython.IoEventOutput_GetOutputModuleId(self)

    def GetOutputData(self, buff, buffSize, dataSize):
        return _WMX3ApiPython.IoEventOutput_GetOutputData(self, buff, buffSize, dataSize)

    def SetOutputData(self, moduleId, data, dataSize):
        return _WMX3ApiPython.IoEventOutput_SetOutputData(self, moduleId, data, dataSize)
    type = property(_WMX3ApiPython.IoEventOutput_type_get, _WMX3ApiPython.IoEventOutput_type_set)
    setIOOutBit = property(_WMX3ApiPython.IoEventOutput_setIOOutBit_get, _WMX3ApiPython.IoEventOutput_setIOOutBit_set)
    __swig_destroy__ = _WMX3ApiPython.delete_IoEventOutput

# Register IoEventOutput in _WMX3ApiPython:
_WMX3ApiPython.IoEventOutput_swigregister(IoEventOutput)
class Io(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _WMX3ApiPython.Io_swiginit(self, _WMX3ApiPython.new_Io(*args))
    __swig_destroy__ = _WMX3ApiPython.delete_Io

    @staticmethod
    def ErrorToString(errCode):
        return _WMX3ApiPython.Io_ErrorToString(errCode)

    @staticmethod
    def ApiLogToString(pLogData, logDataSize):
        return _WMX3ApiPython.Io_ApiLogToString(pLogData, logDataSize)

    @staticmethod
    def GetLibVersion():
        return _WMX3ApiPython.Io_GetLibVersion()

    def IsDeviceValid(self):
        return _WMX3ApiPython.Io_IsDeviceValid(self)

    def GetVersion(self):
        return _WMX3ApiPython.Io_GetVersion(self)

    def SetOutBit(self, addr, bit, data):
        return _WMX3ApiPython.Io_SetOutBit(self, addr, bit, data)

    def SetOutByte(self, addr, data):
        return _WMX3ApiPython.Io_SetOutByte(self, addr, data)

    def SetOutBytes(self, addr, size, pData):
        return _WMX3ApiPython.Io_SetOutBytes(self, addr, size, pData)

    def SetOutBits(self, pByte, pBit, pData, count):
        return _WMX3ApiPython.Io_SetOutBits(self, pByte, pBit, pData, count)

    def SetOutAnalogDataChar(self, addr, analogData):
        return _WMX3ApiPython.Io_SetOutAnalogDataChar(self, addr, analogData)

    def SetOutAnalogDataUChar(self, addr, analogData):
        return _WMX3ApiPython.Io_SetOutAnalogDataUChar(self, addr, analogData)

    def SetOutAnalogDataShort(self, addr, analogData):
        return _WMX3ApiPython.Io_SetOutAnalogDataShort(self, addr, analogData)

    def SetOutAnalogDataUShort(self, addr, analogData):
        return _WMX3ApiPython.Io_SetOutAnalogDataUShort(self, addr, analogData)

    def SetOutAnalogDataInt(self, addr, analogData):
        return _WMX3ApiPython.Io_SetOutAnalogDataInt(self, addr, analogData)

    def SetOutAnalogDataUInt(self, addr, analogData):
        return _WMX3ApiPython.Io_SetOutAnalogDataUInt(self, addr, analogData)

    def GetInBit(self, addr, bit):
        dataPtr = intp()
        ret = _WMX3ApiPython.Io_GetInBit(self, addr, bit, dataPtr)
        if ret == 0:
            return ret, dataPtr.value()
        else:
            return ret, 0



    def GetInByte(self, addr):
        dataPtr = intp()
        ret = _WMX3ApiPython.Io_GetInByte(self, addr, dataPtr)
        if ret == 0:
            return ret, dataPtr.value()
        else:
            return ret, 0



    def GetInBytes(self, addr, size):
        dataList = []
        dataArray = intArray(size)
        ret = _WMX3ApiPython.Io_GetInBytes(self, addr, size, dataArray)
        if ret == 0:
            for i in range(size):
                dataList.append(dataArray[i])
            return ret, dataList
        else:
            return ret, []



    def GetInAnalogDataChar(self, addr):
        dataPtr = intp()
        ret = _WMX3ApiPython.Io_GetInAnalogDataChar(self, addr, dataPtr)
        if ret == 0:
            return ret, dataPtr.value()
        else:
            return ret, 0



    def GetInAnalogDataUChar(self, addr):
        dataPtr = uintp()
        ret = _WMX3ApiPython.Io_GetInAnalogDataUChar(self, addr, dataPtr)
        if ret == 0:
            return ret, dataPtr.value()
        else:
            return ret, 0



    def GetInAnalogDataShort(self, addr):
        dataPtr = intp()
        ret = _WMX3ApiPython.Io_GetInAnalogDataShort(self, addr, dataPtr)
        if ret == 0:
            return ret, dataPtr.value()
        else:
            return ret, 0



    def GetInAnalogDataUShort(self, addr):
        dataPtr = uintp()
        ret = _WMX3ApiPython.Io_GetInAnalogDataUShort(self, addr, dataPtr)
        if ret == 0:
            return ret, dataPtr.value()
        else:
            return ret, 0



    def GetInAnalogDataInt(self, addr):
        dataPtr = intp()
        ret = _WMX3ApiPython.Io_GetInAnalogDataInt(self, addr, dataPtr)
        if ret == 0:
            return ret, dataPtr.value()
        else:
            return ret, 0



    def GetInAnalogDataInt(self, addr):
        dataPtr = uintp()
        ret = _WMX3ApiPython.Io_GetInAnalogDataUInt(self, addr, dataPtr)
        if ret == 0:
            return ret, dataPtr.value()
        else:
            return ret, 0



    def GetOutBit(self, addr, bit):
        dataPtr = intp()
        ret = _WMX3ApiPython.Io_GetOutBit(self, addr, bit, dataPtr)
        if ret == 0:
            return ret, dataPtr.value()
        else:
            return ret, 0



    def GetOutByte(self, addr):
        dataPtr = intp()
        ret = _WMX3ApiPython.Io_GetOutByte(self, addr, dataPtr)
        if ret == 0:
            return ret, dataPtr.value()
        else:
            return ret, 0



    def GetOutBytes(self, addr, size):
        dataList = []
        dataArray = intArray(size)
        ret = _WMX3ApiPython.Io_GetOutBytes(self, addr, size, dataArray)
        if ret == 0:
            for i in range(size):
                dataList.append(dataArray[i])
            return ret, dataList
        else:
            return ret, []



    def GetOutAnalogDataChar(self, addr):
        dataPtr = intp()
        ret = _WMX3ApiPython.Io_GetOutAnalogDataChar(self, addr, dataPtr)
        if ret == 0:
            return ret, dataPtr.value()
        else:
            return ret, 0



    def GetOutAnalogDataUChar(self, addr):
        dataPtr = uintp()
        ret = _WMX3ApiPython.Io_GetOutAnalogDataUChar(self, addr, dataPtr)
        if ret == 0:
            return ret, dataPtr.value()
        else:
            return ret, 0



    def GetOutAnalogDataShort(self, addr):
        dataPtr = intp()
        ret = _WMX3ApiPython.Io_GetOutAnalogDataShort(self, addr, dataPtr)
        if ret == 0:
            return ret, dataPtr.value()
        else:
            return ret, 0



    def GetOutAnalogDataUShort(self, addr):
        dataPtr = uintp()
        ret = _WMX3ApiPython.Io_GetOutAnalogDataUShort(self, addr, dataPtr)
        if ret == 0:
            return ret, dataPtr.value()
        else:
            return ret, 0



    def GetOutAnalogDataInt(self, addr):
        dataPtr = intp()
        ret = _WMX3ApiPython.Io_GetOutAnalogDataInt(self, addr, dataPtr)
        if ret == 0:
            return ret, dataPtr.value()
        else:
            return ret, 0



    def GetOutAnalogDataInt(self, addr):
        dataPtr = uintp()
        ret = _WMX3ApiPython.Io_GetOutAnalogDataUInt(self, addr, dataPtr)
        if ret == 0:
            return ret, dataPtr.value()
        else:
            return ret, 0



    def SetOutBitEx(self, addr, bit, data):
        return _WMX3ApiPython.Io_SetOutBitEx(self, addr, bit, data)

    def SetOutByteEx(self, addr, data):
        return _WMX3ApiPython.Io_SetOutByteEx(self, addr, data)

    def SetOutBytesEx(self, addr, size, pData):
        return _WMX3ApiPython.Io_SetOutBytesEx(self, addr, size, pData)

    def SetOutBitsEx(self, pByte, pBit, pData, count):
        return _WMX3ApiPython.Io_SetOutBitsEx(self, pByte, pBit, pData, count)

    def SetOutAnalogDataCharEx(self, addr, analogData):
        return _WMX3ApiPython.Io_SetOutAnalogDataCharEx(self, addr, analogData)

    def SetOutAnalogDataUCharEx(self, addr, analogData):
        return _WMX3ApiPython.Io_SetOutAnalogDataUCharEx(self, addr, analogData)

    def SetOutAnalogDataShortEx(self, addr, analogData):
        return _WMX3ApiPython.Io_SetOutAnalogDataShortEx(self, addr, analogData)

    def SetOutAnalogDataUShortEx(self, addr, analogData):
        return _WMX3ApiPython.Io_SetOutAnalogDataUShortEx(self, addr, analogData)

    def SetOutAnalogDataIntEx(self, addr, analogData):
        return _WMX3ApiPython.Io_SetOutAnalogDataIntEx(self, addr, analogData)

    def SetOutAnalogDataUIntEx(self, addr, analogData):
        return _WMX3ApiPython.Io_SetOutAnalogDataUIntEx(self, addr, analogData)

    def GetInBitEx(self, addr, bit):
        dataPtr = intp()
        ret = _WMX3ApiPython.Io_GetInBitEx(self, addr, bit, dataPtr)
        if ret == 0:
            return ret, dataPtr.value()
        else:
            return ret, 0



    def GetInByteEx(self, addr):
        dataPtr = intp()
        ret = _WMX3ApiPython.Io_GetInByteEx(self, addr, dataPtr)
        if ret == 0:
            return ret, dataPtr.value()
        else:
            return ret, 0



    def GetInBytesEx(self, addr, size):
        dataList = []
        dataArray = intArray(size)
        ret = _WMX3ApiPython.Io_GetInBytesEx(self, addr, size, dataArray)
        if ret == 0:
            for i in range(size):
                dataList.append(dataArray[i])
            return ret, dataList
        else:
            return ret, []



    def GetInAnalogDataCharEx(self, addr):
        dataPtr = intp()
        ret = _WMX3ApiPython.Io_GetInAnalogDataCharEx(self, addr, dataPtr)
        if ret == 0:
            return ret, dataPtr.value()
        else:
            return ret, 0



    def GetInAnalogDataUCharEx(self, addr):
        dataPtr = uintp()
        ret = _WMX3ApiPython.Io_GetInAnalogDataUCharEx(self, addr, dataPtr)
        if ret == 0:
            return ret, dataPtr.value()
        else:
            return ret, 0



    def GetInAnalogDataShortEx(self, addr):
        dataPtr = intp()
        ret = _WMX3ApiPython.Io_GetInAnalogDataShortEx(self, addr, dataPtr)
        if ret == 0:
            return ret, dataPtr.value()
        else:
            return ret, 0



    def GetInAnalogDataUShortEx(self, addr):
        dataPtr = uintp()
        ret = _WMX3ApiPython.Io_GetInAnalogDataUShortEx(self, addr, dataPtr)
        if ret == 0:
            return ret, dataPtr.value()
        else:
            return ret, 0



    def GetInAnalogDataIntEx(self, addr):
        dataPtr = intp()
        ret = _WMX3ApiPython.Io_GetInAnalogDataIntEx(self, addr, dataPtr)
        if ret == 0:
            return ret, dataPtr.value()
        else:
            return ret, 0



    def GetInAnalogDataIntEx(self, addr):
        dataPtr = uintp()
        ret = _WMX3ApiPython.Io_GetInAnalogDataUIntEx(self, addr, dataPtr)
        if ret == 0:
            return ret, dataPtr.value()
        else:
            return ret, 0



    def GetOutBitEx(self, addr, bit):
        dataPtr = intp()
        ret = _WMX3ApiPython.Io_GetOutBitEx(self, addr, bit, dataPtr)
        if ret == 0:
            return ret, dataPtr.value()
        else:
            return ret, 0



    def GetOutByteEx(self, addr):
        dataPtr = intp()
        ret = _WMX3ApiPython.Io_GetOutByteEx(self, addr, dataPtr)
        if ret == 0:
            return ret, dataPtr.value()
        else:
            return ret, 0



    def GetOutBytesEx(self, addr, size):
        dataList = []
        dataArray = intArray(size)
        ret = _WMX3ApiPython.Io_GetOutBytesEx(self, addr, size, dataArray)
        if ret == 0:
            for i in range(size):
                dataList.append(dataArray[i])
            return ret, dataList
        else:
            return ret, []



    def GetOutAnalogDataCharEx(self, addr):
        dataPtr = intp()
        ret = _WMX3ApiPython.Io_GetOutAnalogDataCharEx(self, addr, dataPtr)
        if ret == 0:
            return ret, dataPtr.value()
        else:
            return ret, 0



    def GetOutAnalogDataUCharEx(self, addr):
        dataPtr = uintp()
        ret = _WMX3ApiPython.Io_GetOutAnalogDataUCharEx(self, addr, dataPtr)
        if ret == 0:
            return ret, dataPtr.value()
        else:
            return ret, 0



    def GetOutAnalogDataShortEx(self, addr):
        dataPtr = intp()
        ret = _WMX3ApiPython.Io_GetOutAnalogDataShortEx(self, addr, dataPtr)
        if ret == 0:
            return ret, dataPtr.value()
        else:
            return ret, 0



    def GetOutAnalogDataUShortEx(self, addr):
        dataPtr = uintp()
        ret = _WMX3ApiPython.Io_GetOutAnalogDataUShortEx(self, addr, dataPtr)
        if ret == 0:
            return ret, dataPtr.value()
        else:
            return ret, 0



    def GetOutAnalogDataIntEx(self, addr):
        dataPtr = intp()
        ret = _WMX3ApiPython.Io_GetOutAnalogDataIntEx(self, addr, dataPtr)
        if ret == 0:
            return ret, dataPtr.value()
        else:
            return ret, 0



    def GetOutAnalogDataIntEx(self, addr):
        dataPtr = uintp()
        ret = _WMX3ApiPython.Io_GetOutAnalogDataUIntEx(self, addr, dataPtr)
        if ret == 0:
            return ret, dataPtr.value()
        else:
            return ret, 0



    def SetInitialOutByte(self, addr, data, enable):
        return _WMX3ApiPython.Io_SetInitialOutByte(self, addr, data, enable)

    def SetInitialOutBytes(self, addr, size, pData, pEnable):
        return _WMX3ApiPython.Io_SetInitialOutBytes(self, addr, size, pData, pEnable)

    def GetInitialOutByte(self, addr):
        dataPtr = intp()
        enablePtr = intp()
        ret = _WMX3ApiPython.Io_GetInitialOutByte(self, addr, dataPtr, enablePtr)
        if ret == 0:
            return ret, dataPtr.value(), enablePtr.value()
        else:
            return ret, 0, 0



    def GetInitialOutBytes(self, addr, size):
        dataList = []
        dataArray = intArray(size)
        enableList = []
        enableArray = intArray(size)
        ret = _WMX3ApiPython.Io_GetInitialOutBytes(self, addr, size, dataArray, enableArray)
        if ret == 0:
            for i in range(size):
                dataList.append(dataArray[i])
                enableList.append(enableArray[i])
            return ret, dataList, enableList
        else:
            return ret, [], []



    def GetInitialOutByteInterruptId(self, addr):
        interruptIdPtr = intp()
        ret = _WMX3ApiPython.Io_GetInitialOutByteInterruptId(self, addr, interruptIdPtr)
        if ret == 0:
            return ret, interruptIdPtr.value()
        else:
            return ret, 0



    def GetInitialOutBytesInterruptId(self, addr, size):
        interruptIdList = []
        interruptIdArray = intArray(size)
        ret = _WMX3ApiPython.Io_GetInitialOutBytesInterruptId(self, addr, size, interruptIdArray)
        if ret == 0:
            for i in range(size):
                interruptIdList.append(interruptIdArray[i])
            return ret, interruptIdList
        else:
            return ret, []



# Register Io in _WMX3ApiPython:
_WMX3ApiPython.Io_swigregister(Io)
class LogErrorCodeArray(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, nelements):
        _WMX3ApiPython.LogErrorCodeArray_swiginit(self, _WMX3ApiPython.new_LogErrorCodeArray(nelements))
    __swig_destroy__ = _WMX3ApiPython.delete_LogErrorCodeArray

    def __getitem__(self, index):
        return _WMX3ApiPython.LogErrorCodeArray___getitem__(self, index)

    def __setitem__(self, index, value):
        return _WMX3ApiPython.LogErrorCodeArray___setitem__(self, index, value)

    def cast(self):
        return _WMX3ApiPython.LogErrorCodeArray_cast(self)

    @staticmethod
    def frompointer(t):
        return _WMX3ApiPython.LogErrorCodeArray_frompointer(t)

# Register LogErrorCodeArray in _WMX3ApiPython:
_WMX3ApiPython.LogErrorCodeArray_swigregister(LogErrorCodeArray)
class LogStateArray(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, nelements):
        _WMX3ApiPython.LogStateArray_swiginit(self, _WMX3ApiPython.new_LogStateArray(nelements))
    __swig_destroy__ = _WMX3ApiPython.delete_LogStateArray

    def __getitem__(self, index):
        return _WMX3ApiPython.LogStateArray___getitem__(self, index)

    def __setitem__(self, index, value):
        return _WMX3ApiPython.LogStateArray___setitem__(self, index, value)

    def cast(self):
        return _WMX3ApiPython.LogStateArray_cast(self)

    @staticmethod
    def frompointer(t):
        return _WMX3ApiPython.LogStateArray_frompointer(t)

# Register LogStateArray in _WMX3ApiPython:
_WMX3ApiPython.LogStateArray_swigregister(LogStateArray)
class LogStatusArray(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, nelements):
        _WMX3ApiPython.LogStatusArray_swiginit(self, _WMX3ApiPython.new_LogStatusArray(nelements))
    __swig_destroy__ = _WMX3ApiPython.delete_LogStatusArray

    def __getitem__(self, index):
        return _WMX3ApiPython.LogStatusArray___getitem__(self, index)

    def __setitem__(self, index, value):
        return _WMX3ApiPython.LogStatusArray___setitem__(self, index, value)

    def cast(self):
        return _WMX3ApiPython.LogStatusArray_cast(self)

    @staticmethod
    def frompointer(t):
        return _WMX3ApiPython.LogStatusArray_frompointer(t)

# Register LogStatusArray in _WMX3ApiPython:
_WMX3ApiPython.LogStatusArray_swigregister(LogStatusArray)
class LogOptionsArray(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, nelements):
        _WMX3ApiPython.LogOptionsArray_swiginit(self, _WMX3ApiPython.new_LogOptionsArray(nelements))
    __swig_destroy__ = _WMX3ApiPython.delete_LogOptionsArray

    def __getitem__(self, index):
        return _WMX3ApiPython.LogOptionsArray___getitem__(self, index)

    def __setitem__(self, index, value):
        return _WMX3ApiPython.LogOptionsArray___setitem__(self, index, value)

    def cast(self):
        return _WMX3ApiPython.LogOptionsArray_cast(self)

    @staticmethod
    def frompointer(t):
        return _WMX3ApiPython.LogOptionsArray_frompointer(t)

# Register LogOptionsArray in _WMX3ApiPython:
_WMX3ApiPython.LogOptionsArray_swigregister(LogOptionsArray)
class IOLogFormatArray(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, nelements):
        _WMX3ApiPython.IOLogFormatArray_swiginit(self, _WMX3ApiPython.new_IOLogFormatArray(nelements))
    __swig_destroy__ = _WMX3ApiPython.delete_IOLogFormatArray

    def __getitem__(self, index):
        return _WMX3ApiPython.IOLogFormatArray___getitem__(self, index)

    def __setitem__(self, index, value):
        return _WMX3ApiPython.IOLogFormatArray___setitem__(self, index, value)

    def cast(self):
        return _WMX3ApiPython.IOLogFormatArray_cast(self)

    @staticmethod
    def frompointer(t):
        return _WMX3ApiPython.IOLogFormatArray_frompointer(t)

# Register IOLogFormatArray in _WMX3ApiPython:
_WMX3ApiPython.IOLogFormatArray_swigregister(IOLogFormatArray)
class MLogFormatArray(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, nelements):
        _WMX3ApiPython.MLogFormatArray_swiginit(self, _WMX3ApiPython.new_MLogFormatArray(nelements))
    __swig_destroy__ = _WMX3ApiPython.delete_MLogFormatArray

    def __getitem__(self, index):
        return _WMX3ApiPython.MLogFormatArray___getitem__(self, index)

    def __setitem__(self, index, value):
        return _WMX3ApiPython.MLogFormatArray___setitem__(self, index, value)

    def cast(self):
        return _WMX3ApiPython.MLogFormatArray_cast(self)

    @staticmethod
    def frompointer(t):
        return _WMX3ApiPython.MLogFormatArray_frompointer(t)

# Register MLogFormatArray in _WMX3ApiPython:
_WMX3ApiPython.MLogFormatArray_swigregister(MLogFormatArray)
class MemoryLogStatusArray(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, nelements):
        _WMX3ApiPython.MemoryLogStatusArray_swiginit(self, _WMX3ApiPython.new_MemoryLogStatusArray(nelements))
    __swig_destroy__ = _WMX3ApiPython.delete_MemoryLogStatusArray

    def __getitem__(self, index):
        return _WMX3ApiPython.MemoryLogStatusArray___getitem__(self, index)

    def __setitem__(self, index, value):
        return _WMX3ApiPython.MemoryLogStatusArray___setitem__(self, index, value)

    def cast(self):
        return _WMX3ApiPython.MemoryLogStatusArray_cast(self)

    @staticmethod
    def frompointer(t):
        return _WMX3ApiPython.MemoryLogStatusArray_frompointer(t)

# Register MemoryLogStatusArray in _WMX3ApiPython:
_WMX3ApiPython.MemoryLogStatusArray_swigregister(MemoryLogStatusArray)
class MemoryLogAxisDataArray(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, nelements):
        _WMX3ApiPython.MemoryLogAxisDataArray_swiginit(self, _WMX3ApiPython.new_MemoryLogAxisDataArray(nelements))
    __swig_destroy__ = _WMX3ApiPython.delete_MemoryLogAxisDataArray

    def __getitem__(self, index):
        return _WMX3ApiPython.MemoryLogAxisDataArray___getitem__(self, index)

    def __setitem__(self, index, value):
        return _WMX3ApiPython.MemoryLogAxisDataArray___setitem__(self, index, value)

    def cast(self):
        return _WMX3ApiPython.MemoryLogAxisDataArray_cast(self)

    @staticmethod
    def frompointer(t):
        return _WMX3ApiPython.MemoryLogAxisDataArray_frompointer(t)

# Register MemoryLogAxisDataArray in _WMX3ApiPython:
_WMX3ApiPython.MemoryLogAxisDataArray_swigregister(MemoryLogAxisDataArray)
class MemoryLogIODataArray(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, nelements):
        _WMX3ApiPython.MemoryLogIODataArray_swiginit(self, _WMX3ApiPython.new_MemoryLogIODataArray(nelements))
    __swig_destroy__ = _WMX3ApiPython.delete_MemoryLogIODataArray

    def __getitem__(self, index):
        return _WMX3ApiPython.MemoryLogIODataArray___getitem__(self, index)

    def __setitem__(self, index, value):
        return _WMX3ApiPython.MemoryLogIODataArray___setitem__(self, index, value)

    def cast(self):
        return _WMX3ApiPython.MemoryLogIODataArray_cast(self)

    @staticmethod
    def frompointer(t):
        return _WMX3ApiPython.MemoryLogIODataArray_frompointer(t)

# Register MemoryLogIODataArray in _WMX3ApiPython:
_WMX3ApiPython.MemoryLogIODataArray_swigregister(MemoryLogIODataArray)
class MemoryLogMDataArray(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, nelements):
        _WMX3ApiPython.MemoryLogMDataArray_swiginit(self, _WMX3ApiPython.new_MemoryLogMDataArray(nelements))
    __swig_destroy__ = _WMX3ApiPython.delete_MemoryLogMDataArray

    def __getitem__(self, index):
        return _WMX3ApiPython.MemoryLogMDataArray___getitem__(self, index)

    def __setitem__(self, index, value):
        return _WMX3ApiPython.MemoryLogMDataArray___setitem__(self, index, value)

    def cast(self):
        return _WMX3ApiPython.MemoryLogMDataArray_cast(self)

    @staticmethod
    def frompointer(t):
        return _WMX3ApiPython.MemoryLogMDataArray_frompointer(t)

# Register MemoryLogMDataArray in _WMX3ApiPython:
_WMX3ApiPython.MemoryLogMDataArray_swigregister(MemoryLogMDataArray)
class MemoryLogOptionsArray(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, nelements):
        _WMX3ApiPython.MemoryLogOptionsArray_swiginit(self, _WMX3ApiPython.new_MemoryLogOptionsArray(nelements))
    __swig_destroy__ = _WMX3ApiPython.delete_MemoryLogOptionsArray

    def __getitem__(self, index):
        return _WMX3ApiPython.MemoryLogOptionsArray___getitem__(self, index)

    def __setitem__(self, index, value):
        return _WMX3ApiPython.MemoryLogOptionsArray___setitem__(self, index, value)

    def cast(self):
        return _WMX3ApiPython.MemoryLogOptionsArray_cast(self)

    @staticmethod
    def frompointer(t):
        return _WMX3ApiPython.MemoryLogOptionsArray_frompointer(t)

# Register MemoryLogOptionsArray in _WMX3ApiPython:
_WMX3ApiPython.MemoryLogOptionsArray_swigregister(MemoryLogOptionsArray)
class MemoryLogDatasArray(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, nelements):
        _WMX3ApiPython.MemoryLogDatasArray_swiginit(self, _WMX3ApiPython.new_MemoryLogDatasArray(nelements))
    __swig_destroy__ = _WMX3ApiPython.delete_MemoryLogDatasArray

    def __getitem__(self, index):
        return _WMX3ApiPython.MemoryLogDatasArray___getitem__(self, index)

    def __setitem__(self, index, value):
        return _WMX3ApiPython.MemoryLogDatasArray___setitem__(self, index, value)

    def cast(self):
        return _WMX3ApiPython.MemoryLogDatasArray_cast(self)

    @staticmethod
    def frompointer(t):
        return _WMX3ApiPython.MemoryLogDatasArray_frompointer(t)

# Register MemoryLogDatasArray in _WMX3ApiPython:
_WMX3ApiPython.MemoryLogDatasArray_swigregister(MemoryLogDatasArray)
class MemoryLogDataArray(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, nelements):
        _WMX3ApiPython.MemoryLogDataArray_swiginit(self, _WMX3ApiPython.new_MemoryLogDataArray(nelements))
    __swig_destroy__ = _WMX3ApiPython.delete_MemoryLogDataArray

    def __getitem__(self, index):
        return _WMX3ApiPython.MemoryLogDataArray___getitem__(self, index)

    def __setitem__(self, index, value):
        return _WMX3ApiPython.MemoryLogDataArray___setitem__(self, index, value)

    def cast(self):
        return _WMX3ApiPython.MemoryLogDataArray_cast(self)

    @staticmethod
    def frompointer(t):
        return _WMX3ApiPython.MemoryLogDataArray_frompointer(t)

# Register MemoryLogDataArray in _WMX3ApiPython:
_WMX3ApiPython.MemoryLogDataArray_swigregister(MemoryLogDataArray)
class LogErrorCode(ErrorCode):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    LogTimeIsZero = _WMX3ApiPython.LogErrorCode_LogTimeIsZero
    LogBufferIsNotOpened = _WMX3ApiPython.LogErrorCode_LogBufferIsNotOpened
    LogBufferAlreadyOpened = _WMX3ApiPython.LogErrorCode_LogBufferAlreadyOpened
    LogBufferAlreadyClosed = _WMX3ApiPython.LogErrorCode_LogBufferAlreadyClosed
    LogBufferOpenFailed = _WMX3ApiPython.LogErrorCode_LogBufferOpenFailed
    LogBufferIsNull = _WMX3ApiPython.LogErrorCode_LogBufferIsNull
    LockLogBufferFailed = _WMX3ApiPython.LogErrorCode_LockLogBufferFailed
    SetLogIsNotFinished = _WMX3ApiPython.LogErrorCode_SetLogIsNotFinished
    LogBufferDataNotFound = _WMX3ApiPython.LogErrorCode_LogBufferDataNotFound
    CurrentlyCollectingLogData = _WMX3ApiPython.LogErrorCode_CurrentlyCollectingLogData
    CurrentlyNotCollectingLogData = _WMX3ApiPython.LogErrorCode_CurrentlyNotCollectingLogData
    LengthOutOfRange = _WMX3ApiPython.LogErrorCode_LengthOutOfRange
    FilePathStringTooLarge = _WMX3ApiPython.LogErrorCode_FilePathStringTooLarge
    FileNameNotSpecified = _WMX3ApiPython.LogErrorCode_FileNameNotSpecified
    FileDirectoryNotSpecified = _WMX3ApiPython.LogErrorCode_FileDirectoryNotSpecified
    PrecisionOutOfRange = _WMX3ApiPython.LogErrorCode_PrecisionOutOfRange
    InvalidFilePath = _WMX3ApiPython.LogErrorCode_InvalidFilePath
    TriggerEventCountOutOfRange = _WMX3ApiPython.LogErrorCode_TriggerEventCountOutOfRange
    TriggerEventIDOutOfRange = _WMX3ApiPython.LogErrorCode_TriggerEventIDOutOfRange
    SamplingPeriodOutOfRange = _WMX3ApiPython.LogErrorCode_SamplingPeriodOutOfRange
    MaxLogFileCountSetButNotMaxLogFileSize = _WMX3ApiPython.LogErrorCode_MaxLogFileCountSetButNotMaxLogFileSize
    IOFormatCountOutOfRange = _WMX3ApiPython.LogErrorCode_IOFormatCountOutOfRange
    UserMemoryFormatCountOutOfRange = _WMX3ApiPython.LogErrorCode_UserMemoryFormatCountOutOfRange
    DataSourceModuleNotLoaded = _WMX3ApiPython.LogErrorCode_DataSourceModuleNotLoaded
    NoMoreLogData = _WMX3ApiPython.LogErrorCode_NoMoreLogData

    def __init__(self):
        _WMX3ApiPython.LogErrorCode_swiginit(self, _WMX3ApiPython.new_LogErrorCode())
    __swig_destroy__ = _WMX3ApiPython.delete_LogErrorCode

# Register LogErrorCode in _WMX3ApiPython:
_WMX3ApiPython.LogErrorCode_swigregister(LogErrorCode)
class LogState(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Idle = _WMX3ApiPython.LogState_Idle
    Running = _WMX3ApiPython.LogState_Running
    WriteFail = _WMX3ApiPython.LogState_WriteFail
    BufferOverflow = _WMX3ApiPython.LogState_BufferOverflow
    Finished = _WMX3ApiPython.LogState_Finished

    def __init__(self):
        _WMX3ApiPython.LogState_swiginit(self, _WMX3ApiPython.new_LogState())
    __swig_destroy__ = _WMX3ApiPython.delete_LogState

# Register LogState in _WMX3ApiPython:
_WMX3ApiPython.LogState_swigregister(LogState)
class LogStatus(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def GetData(self, logStatus):
        return _WMX3ApiPython.LogStatus_GetData(self, logStatus)

    def SetData(self, logStatus):
        return _WMX3ApiPython.LogStatus_SetData(self, logStatus)
    bufferOpened = property(_WMX3ApiPython.LogStatus_bufferOpened_get, _WMX3ApiPython.LogStatus_bufferOpened_set)
    logState = property(_WMX3ApiPython.LogStatus_logState_get, _WMX3ApiPython.LogStatus_logState_set)
    samplesToCollect = property(_WMX3ApiPython.LogStatus_samplesToCollect_get, _WMX3ApiPython.LogStatus_samplesToCollect_set)
    samplesCollected = property(_WMX3ApiPython.LogStatus_samplesCollected_get, _WMX3ApiPython.LogStatus_samplesCollected_set)
    samplesWritten = property(_WMX3ApiPython.LogStatus_samplesWritten_get, _WMX3ApiPython.LogStatus_samplesWritten_set)
    millisecondsToCollect = property(_WMX3ApiPython.LogStatus_millisecondsToCollect_get, _WMX3ApiPython.LogStatus_millisecondsToCollect_set)
    millisecondsCollected = property(_WMX3ApiPython.LogStatus_millisecondsCollected_get, _WMX3ApiPython.LogStatus_millisecondsCollected_set)
    millisecondsWritten = property(_WMX3ApiPython.LogStatus_millisecondsWritten_get, _WMX3ApiPython.LogStatus_millisecondsWritten_set)

    def __init__(self):
        _WMX3ApiPython.LogStatus_swiginit(self, _WMX3ApiPython.new_LogStatus())
    __swig_destroy__ = _WMX3ApiPython.delete_LogStatus

# Register LogStatus in _WMX3ApiPython:
_WMX3ApiPython.LogStatus_swigregister(LogStatus)
class LogOptions(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def GetData(self, logOptions):
        return _WMX3ApiPython.LogOptions_GetData(self, logOptions)

    def SetData(self, logOptions):
        return _WMX3ApiPython.LogOptions_SetData(self, logOptions)
    commandPos = property(_WMX3ApiPython.LogOptions_commandPos_get, _WMX3ApiPython.LogOptions_commandPos_set)
    feedbackPos = property(_WMX3ApiPython.LogOptions_feedbackPos_get, _WMX3ApiPython.LogOptions_feedbackPos_set)
    compCommandPos = property(_WMX3ApiPython.LogOptions_compCommandPos_get, _WMX3ApiPython.LogOptions_compCommandPos_set)
    compFeedbackPos = property(_WMX3ApiPython.LogOptions_compFeedbackPos_get, _WMX3ApiPython.LogOptions_compFeedbackPos_set)
    encoderCommandPos = property(_WMX3ApiPython.LogOptions_encoderCommandPos_get, _WMX3ApiPython.LogOptions_encoderCommandPos_set)
    encoderFeedbackPos = property(_WMX3ApiPython.LogOptions_encoderFeedbackPos_get, _WMX3ApiPython.LogOptions_encoderFeedbackPos_set)
    commandVelocity = property(_WMX3ApiPython.LogOptions_commandVelocity_get, _WMX3ApiPython.LogOptions_commandVelocity_set)
    feedbackVelocity = property(_WMX3ApiPython.LogOptions_feedbackVelocity_get, _WMX3ApiPython.LogOptions_feedbackVelocity_set)
    encoderCommandVelocity = property(_WMX3ApiPython.LogOptions_encoderCommandVelocity_get, _WMX3ApiPython.LogOptions_encoderCommandVelocity_set)
    encoderFeedbackVelocity = property(_WMX3ApiPython.LogOptions_encoderFeedbackVelocity_get, _WMX3ApiPython.LogOptions_encoderFeedbackVelocity_set)
    commandTrq = property(_WMX3ApiPython.LogOptions_commandTrq_get, _WMX3ApiPython.LogOptions_commandTrq_set)
    feedbackTrq = property(_WMX3ApiPython.LogOptions_feedbackTrq_get, _WMX3ApiPython.LogOptions_feedbackTrq_set)
    encoderCommandTrq = property(_WMX3ApiPython.LogOptions_encoderCommandTrq_get, _WMX3ApiPython.LogOptions_encoderCommandTrq_set)
    encoderFeedbackTrq = property(_WMX3ApiPython.LogOptions_encoderFeedbackTrq_get, _WMX3ApiPython.LogOptions_encoderFeedbackTrq_set)
    followingError = property(_WMX3ApiPython.LogOptions_followingError_get, _WMX3ApiPython.LogOptions_followingError_set)
    homeOffset = property(_WMX3ApiPython.LogOptions_homeOffset_get, _WMX3ApiPython.LogOptions_homeOffset_set)
    inPosFlag = property(_WMX3ApiPython.LogOptions_inPosFlag_get, _WMX3ApiPython.LogOptions_inPosFlag_set)
    inPosFlag2 = property(_WMX3ApiPython.LogOptions_inPosFlag2_get, _WMX3ApiPython.LogOptions_inPosFlag2_set)
    inPosFlag3 = property(_WMX3ApiPython.LogOptions_inPosFlag3_get, _WMX3ApiPython.LogOptions_inPosFlag3_set)
    inPosFlag4 = property(_WMX3ApiPython.LogOptions_inPosFlag4_get, _WMX3ApiPython.LogOptions_inPosFlag4_set)
    inPosFlag5 = property(_WMX3ApiPython.LogOptions_inPosFlag5_get, _WMX3ApiPython.LogOptions_inPosFlag5_set)
    commandDistributionEndFlag = property(_WMX3ApiPython.LogOptions_commandDistributionEndFlag_get, _WMX3ApiPython.LogOptions_commandDistributionEndFlag_set)
    posSetFlag = property(_WMX3ApiPython.LogOptions_posSetFlag_get, _WMX3ApiPython.LogOptions_posSetFlag_set)
    delayedPosSetFlag = property(_WMX3ApiPython.LogOptions_delayedPosSetFlag_get, _WMX3ApiPython.LogOptions_delayedPosSetFlag_set)
    opState = property(_WMX3ApiPython.LogOptions_opState_get, _WMX3ApiPython.LogOptions_opState_set)
    detailOpState = property(_WMX3ApiPython.LogOptions_detailOpState_get, _WMX3ApiPython.LogOptions_detailOpState_set)
    userOffsetCommandPos = property(_WMX3ApiPython.LogOptions_userOffsetCommandPos_get, _WMX3ApiPython.LogOptions_userOffsetCommandPos_set)
    userOffsetFeedbackPos = property(_WMX3ApiPython.LogOptions_userOffsetFeedbackPos_get, _WMX3ApiPython.LogOptions_userOffsetFeedbackPos_set)
    axisCommandMode = property(_WMX3ApiPython.LogOptions_axisCommandMode_get, _WMX3ApiPython.LogOptions_axisCommandMode_set)
    axisCommandModeFeedback = property(_WMX3ApiPython.LogOptions_axisCommandModeFeedback_get, _WMX3ApiPython.LogOptions_axisCommandModeFeedback_set)
    triggerOnCommandChange = property(_WMX3ApiPython.LogOptions_triggerOnCommandChange_get, _WMX3ApiPython.LogOptions_triggerOnCommandChange_set)
    triggerOnEvent = property(_WMX3ApiPython.LogOptions_triggerOnEvent_get, _WMX3ApiPython.LogOptions_triggerOnEvent_set)
    triggerEventID = property(_WMX3ApiPython.LogOptions_triggerEventID_get, _WMX3ApiPython.LogOptions_triggerEventID_set)

    def __init__(self):
        _WMX3ApiPython.LogOptions_swiginit(self, _WMX3ApiPython.new_LogOptions())
    __swig_destroy__ = _WMX3ApiPython.delete_LogOptions

# Register LogOptions in _WMX3ApiPython:
_WMX3ApiPython.LogOptions_swigregister(LogOptions)
class IOLogFormat(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def GetData(self, ioLogFormat):
        return _WMX3ApiPython.IOLogFormat_GetData(self, ioLogFormat)
    byte = property(_WMX3ApiPython.IOLogFormat_byte_get, _WMX3ApiPython.IOLogFormat_byte_set)
    bit = property(_WMX3ApiPython.IOLogFormat_bit_get, _WMX3ApiPython.IOLogFormat_bit_set)
    ioFormatType = property(_WMX3ApiPython.IOLogFormat_ioFormatType_get, _WMX3ApiPython.IOLogFormat_ioFormatType_set)

    def __init__(self):
        _WMX3ApiPython.IOLogFormat_swiginit(self, _WMX3ApiPython.new_IOLogFormat())
    __swig_destroy__ = _WMX3ApiPython.delete_IOLogFormat

# Register IOLogFormat in _WMX3ApiPython:
_WMX3ApiPython.IOLogFormat_swigregister(IOLogFormat)
class MLogFormat(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def GetData(self, mLogFormat):
        return _WMX3ApiPython.MLogFormat_GetData(self, mLogFormat)
    byte = property(_WMX3ApiPython.MLogFormat_byte_get, _WMX3ApiPython.MLogFormat_byte_set)
    bit = property(_WMX3ApiPython.MLogFormat_bit_get, _WMX3ApiPython.MLogFormat_bit_set)
    mFormatType = property(_WMX3ApiPython.MLogFormat_mFormatType_get, _WMX3ApiPython.MLogFormat_mFormatType_set)

    def __init__(self):
        _WMX3ApiPython.MLogFormat_swiginit(self, _WMX3ApiPython.new_MLogFormat())
    __swig_destroy__ = _WMX3ApiPython.delete_MLogFormat

# Register MLogFormat in _WMX3ApiPython:
_WMX3ApiPython.MLogFormat_swigregister(MLogFormat)
class MemoryLogStatus(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def GetData(self, memoryLogStatus):
        return _WMX3ApiPython.MemoryLogStatus_GetData(self, memoryLogStatus)

    def SetData(self, memoryLogStatus):
        return _WMX3ApiPython.MemoryLogStatus_SetData(self, memoryLogStatus)
    bufferOpened = property(_WMX3ApiPython.MemoryLogStatus_bufferOpened_get, _WMX3ApiPython.MemoryLogStatus_bufferOpened_set)
    logState = property(_WMX3ApiPython.MemoryLogStatus_logState_get, _WMX3ApiPython.MemoryLogStatus_logState_set)
    samplesToCollect = property(_WMX3ApiPython.MemoryLogStatus_samplesToCollect_get, _WMX3ApiPython.MemoryLogStatus_samplesToCollect_set)
    samplesCollected = property(_WMX3ApiPython.MemoryLogStatus_samplesCollected_get, _WMX3ApiPython.MemoryLogStatus_samplesCollected_set)
    usageRate = property(_WMX3ApiPython.MemoryLogStatus_usageRate_get, _WMX3ApiPython.MemoryLogStatus_usageRate_set)
    overflowFlag = property(_WMX3ApiPython.MemoryLogStatus_overflowFlag_get, _WMX3ApiPython.MemoryLogStatus_overflowFlag_set)
    interruptPeriod = property(_WMX3ApiPython.MemoryLogStatus_interruptPeriod_get, _WMX3ApiPython.MemoryLogStatus_interruptPeriod_set)

    def __init__(self):
        _WMX3ApiPython.MemoryLogStatus_swiginit(self, _WMX3ApiPython.new_MemoryLogStatus())
    __swig_destroy__ = _WMX3ApiPython.delete_MemoryLogStatus

# Register MemoryLogStatus in _WMX3ApiPython:
_WMX3ApiPython.MemoryLogStatus_swigregister(MemoryLogStatus)
class MemoryLogAxisData(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def GetData(self, memoryLogAxisData):
        return _WMX3ApiPython.MemoryLogAxisData_GetData(self, memoryLogAxisData)

    def SetData(self, memoryLogAxisData):
        return _WMX3ApiPython.MemoryLogAxisData_SetData(self, memoryLogAxisData)
    commandPos = property(_WMX3ApiPython.MemoryLogAxisData_commandPos_get, _WMX3ApiPython.MemoryLogAxisData_commandPos_set)
    feedbackPos = property(_WMX3ApiPython.MemoryLogAxisData_feedbackPos_get, _WMX3ApiPython.MemoryLogAxisData_feedbackPos_set)
    compCommandPos = property(_WMX3ApiPython.MemoryLogAxisData_compCommandPos_get, _WMX3ApiPython.MemoryLogAxisData_compCommandPos_set)
    compFeedbackPos = property(_WMX3ApiPython.MemoryLogAxisData_compFeedbackPos_get, _WMX3ApiPython.MemoryLogAxisData_compFeedbackPos_set)
    encoderCommandPos = property(_WMX3ApiPython.MemoryLogAxisData_encoderCommandPos_get, _WMX3ApiPython.MemoryLogAxisData_encoderCommandPos_set)
    encoderFeedbackPos = property(_WMX3ApiPython.MemoryLogAxisData_encoderFeedbackPos_get, _WMX3ApiPython.MemoryLogAxisData_encoderFeedbackPos_set)
    commandVelocity = property(_WMX3ApiPython.MemoryLogAxisData_commandVelocity_get, _WMX3ApiPython.MemoryLogAxisData_commandVelocity_set)
    feedbackVelocity = property(_WMX3ApiPython.MemoryLogAxisData_feedbackVelocity_get, _WMX3ApiPython.MemoryLogAxisData_feedbackVelocity_set)
    encoderCommandVelocity = property(_WMX3ApiPython.MemoryLogAxisData_encoderCommandVelocity_get, _WMX3ApiPython.MemoryLogAxisData_encoderCommandVelocity_set)
    encoderFeedbackVelocity = property(_WMX3ApiPython.MemoryLogAxisData_encoderFeedbackVelocity_get, _WMX3ApiPython.MemoryLogAxisData_encoderFeedbackVelocity_set)
    commandTrq = property(_WMX3ApiPython.MemoryLogAxisData_commandTrq_get, _WMX3ApiPython.MemoryLogAxisData_commandTrq_set)
    feedbackTrq = property(_WMX3ApiPython.MemoryLogAxisData_feedbackTrq_get, _WMX3ApiPython.MemoryLogAxisData_feedbackTrq_set)
    encoderCommandTrq = property(_WMX3ApiPython.MemoryLogAxisData_encoderCommandTrq_get, _WMX3ApiPython.MemoryLogAxisData_encoderCommandTrq_set)
    encoderFeedbackTrq = property(_WMX3ApiPython.MemoryLogAxisData_encoderFeedbackTrq_get, _WMX3ApiPython.MemoryLogAxisData_encoderFeedbackTrq_set)
    followingError = property(_WMX3ApiPython.MemoryLogAxisData_followingError_get, _WMX3ApiPython.MemoryLogAxisData_followingError_set)
    homeOffset = property(_WMX3ApiPython.MemoryLogAxisData_homeOffset_get, _WMX3ApiPython.MemoryLogAxisData_homeOffset_set)
    inPosFlag = property(_WMX3ApiPython.MemoryLogAxisData_inPosFlag_get, _WMX3ApiPython.MemoryLogAxisData_inPosFlag_set)
    inPosFlag2 = property(_WMX3ApiPython.MemoryLogAxisData_inPosFlag2_get, _WMX3ApiPython.MemoryLogAxisData_inPosFlag2_set)
    inPosFlag3 = property(_WMX3ApiPython.MemoryLogAxisData_inPosFlag3_get, _WMX3ApiPython.MemoryLogAxisData_inPosFlag3_set)
    inPosFlag4 = property(_WMX3ApiPython.MemoryLogAxisData_inPosFlag4_get, _WMX3ApiPython.MemoryLogAxisData_inPosFlag4_set)
    inPosFlag5 = property(_WMX3ApiPython.MemoryLogAxisData_inPosFlag5_get, _WMX3ApiPython.MemoryLogAxisData_inPosFlag5_set)
    commandDistributionEndFlag = property(_WMX3ApiPython.MemoryLogAxisData_commandDistributionEndFlag_get, _WMX3ApiPython.MemoryLogAxisData_commandDistributionEndFlag_set)
    posSetFlag = property(_WMX3ApiPython.MemoryLogAxisData_posSetFlag_get, _WMX3ApiPython.MemoryLogAxisData_posSetFlag_set)
    delayedPosSetFlag = property(_WMX3ApiPython.MemoryLogAxisData_delayedPosSetFlag_get, _WMX3ApiPython.MemoryLogAxisData_delayedPosSetFlag_set)
    opState = property(_WMX3ApiPython.MemoryLogAxisData_opState_get, _WMX3ApiPython.MemoryLogAxisData_opState_set)
    detailOpState = property(_WMX3ApiPython.MemoryLogAxisData_detailOpState_get, _WMX3ApiPython.MemoryLogAxisData_detailOpState_set)
    userOffsetCommandPos = property(_WMX3ApiPython.MemoryLogAxisData_userOffsetCommandPos_get, _WMX3ApiPython.MemoryLogAxisData_userOffsetCommandPos_set)
    userOffsetFeedbackPos = property(_WMX3ApiPython.MemoryLogAxisData_userOffsetFeedbackPos_get, _WMX3ApiPython.MemoryLogAxisData_userOffsetFeedbackPos_set)
    axisCommandMode = property(_WMX3ApiPython.MemoryLogAxisData_axisCommandMode_get, _WMX3ApiPython.MemoryLogAxisData_axisCommandMode_set)
    axisCommandModeFeedback = property(_WMX3ApiPython.MemoryLogAxisData_axisCommandModeFeedback_get, _WMX3ApiPython.MemoryLogAxisData_axisCommandModeFeedback_set)

    def __init__(self):
        _WMX3ApiPython.MemoryLogAxisData_swiginit(self, _WMX3ApiPython.new_MemoryLogAxisData())
    __swig_destroy__ = _WMX3ApiPython.delete_MemoryLogAxisData

# Register MemoryLogAxisData in _WMX3ApiPython:
_WMX3ApiPython.MemoryLogAxisData_swigregister(MemoryLogAxisData)
class MemoryLogIOData(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def GetData(self, memoryLogIOData):
        return _WMX3ApiPython.MemoryLogIOData_GetData(self, memoryLogIOData)

    def SetData(self, memoryLogIOData):
        return _WMX3ApiPython.MemoryLogIOData_SetData(self, memoryLogIOData)
    input = property(_WMX3ApiPython.MemoryLogIOData_input_get, _WMX3ApiPython.MemoryLogIOData_input_set)

    def SetInput(self, index, value):
        return _WMX3ApiPython.MemoryLogIOData_SetInput(self, index, value)

    def GetInput(self, index):
        return _WMX3ApiPython.MemoryLogIOData_GetInput(self, index)
    output = property(_WMX3ApiPython.MemoryLogIOData_output_get, _WMX3ApiPython.MemoryLogIOData_output_set)

    def SetOutput(self, index, value):
        return _WMX3ApiPython.MemoryLogIOData_SetOutput(self, index, value)

    def GetOutput(self, index):
        return _WMX3ApiPython.MemoryLogIOData_GetOutput(self, index)

    def __init__(self):
        _WMX3ApiPython.MemoryLogIOData_swiginit(self, _WMX3ApiPython.new_MemoryLogIOData())
    __swig_destroy__ = _WMX3ApiPython.delete_MemoryLogIOData

# Register MemoryLogIOData in _WMX3ApiPython:
_WMX3ApiPython.MemoryLogIOData_swigregister(MemoryLogIOData)
class MemoryLogMData(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def GetData(self, memoryLogMData):
        return _WMX3ApiPython.MemoryLogMData_GetData(self, memoryLogMData)

    def SetData(self, memoryLogMData):
        return _WMX3ApiPython.MemoryLogMData_SetData(self, memoryLogMData)
    data = property(_WMX3ApiPython.MemoryLogMData_data_get, _WMX3ApiPython.MemoryLogMData_data_set)

    def SetMData(self, index, value):
        return _WMX3ApiPython.MemoryLogMData_SetMData(self, index, value)

    def GetMData(self, index):
        return _WMX3ApiPython.MemoryLogMData_GetMData(self, index)

    def __init__(self):
        _WMX3ApiPython.MemoryLogMData_swiginit(self, _WMX3ApiPython.new_MemoryLogMData())
    __swig_destroy__ = _WMX3ApiPython.delete_MemoryLogMData

# Register MemoryLogMData in _WMX3ApiPython:
_WMX3ApiPython.MemoryLogMData_swigregister(MemoryLogMData)
class MemoryLogOptions(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def GetData(self, memoryLogOptions):
        return _WMX3ApiPython.MemoryLogOptions_GetData(self, memoryLogOptions)

    def SetData(self, memoryLogOptions):
        return _WMX3ApiPython.MemoryLogOptions_SetData(self, memoryLogOptions)
    triggerEventCount = property(_WMX3ApiPython.MemoryLogOptions_triggerEventCount_get, _WMX3ApiPython.MemoryLogOptions_triggerEventCount_set)
    triggerEventID = property(_WMX3ApiPython.MemoryLogOptions_triggerEventID_get, _WMX3ApiPython.MemoryLogOptions_triggerEventID_set)

    def SetTriggerEventID(self, index, value):
        return _WMX3ApiPython.MemoryLogOptions_SetTriggerEventID(self, index, value)

    def GetTriggerEventID(self, index):
        return _WMX3ApiPython.MemoryLogOptions_GetTriggerEventID(self, index)

    def __init__(self):
        _WMX3ApiPython.MemoryLogOptions_swiginit(self, _WMX3ApiPython.new_MemoryLogOptions())
    __swig_destroy__ = _WMX3ApiPython.delete_MemoryLogOptions

# Register MemoryLogOptions in _WMX3ApiPython:
_WMX3ApiPython.MemoryLogOptions_swigregister(MemoryLogOptions)
class MemoryLogDatas(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def GetData(self, memoryLogDatas):
        return _WMX3ApiPython.MemoryLogDatas_GetData(self, memoryLogDatas)

    def SetData(self, memoryLogDatas):
        return _WMX3ApiPython.MemoryLogDatas_SetData(self, memoryLogDatas)
    cycleCounter = property(_WMX3ApiPython.MemoryLogDatas_cycleCounter_get, _WMX3ApiPython.MemoryLogDatas_cycleCounter_set)
    logAxisData = property(_WMX3ApiPython.MemoryLogDatas_logAxisData_get, _WMX3ApiPython.MemoryLogDatas_logAxisData_set)

    def SetLogAxisData(self, index, value):
        return _WMX3ApiPython.MemoryLogDatas_SetLogAxisData(self, index, value)

    def GetLogAxisData(self, index):
        return _WMX3ApiPython.MemoryLogDatas_GetLogAxisData(self, index)
    logIOData = property(_WMX3ApiPython.MemoryLogDatas_logIOData_get, _WMX3ApiPython.MemoryLogDatas_logIOData_set)
    logMData = property(_WMX3ApiPython.MemoryLogDatas_logMData_get, _WMX3ApiPython.MemoryLogDatas_logMData_set)

    def __init__(self):
        _WMX3ApiPython.MemoryLogDatas_swiginit(self, _WMX3ApiPython.new_MemoryLogDatas())
    __swig_destroy__ = _WMX3ApiPython.delete_MemoryLogDatas

# Register MemoryLogDatas in _WMX3ApiPython:
_WMX3ApiPython.MemoryLogDatas_swigregister(MemoryLogDatas)
class MemoryLogData(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def GetData(self, memoryLogData):
        return _WMX3ApiPython.MemoryLogData_GetData(self, memoryLogData)

    def SetData(self, memoryLogData):
        return _WMX3ApiPython.MemoryLogData_SetData(self, memoryLogData)
    count = property(_WMX3ApiPython.MemoryLogData_count_get, _WMX3ApiPython.MemoryLogData_count_set)
    overflowFlag = property(_WMX3ApiPython.MemoryLogData_overflowFlag_get, _WMX3ApiPython.MemoryLogData_overflowFlag_set)
    logData = property(_WMX3ApiPython.MemoryLogData_logData_get, _WMX3ApiPython.MemoryLogData_logData_set)

    def SetLogData(self, index, value):
        return _WMX3ApiPython.MemoryLogData_SetLogData(self, index, value)

    def GetLogData(self, index):
        return _WMX3ApiPython.MemoryLogData_GetLogData(self, index)

    def __init__(self):
        _WMX3ApiPython.MemoryLogData_swiginit(self, _WMX3ApiPython.new_MemoryLogData())
    __swig_destroy__ = _WMX3ApiPython.delete_MemoryLogData

# Register MemoryLogData in _WMX3ApiPython:
_WMX3ApiPython.MemoryLogData_swigregister(MemoryLogData)
class LogChannelOptions(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def SetData(self, logChannelOptions):
        return _WMX3ApiPython.LogChannelOptions_SetData(self, logChannelOptions)

    def GetData(self, logChannelOptions):
        return _WMX3ApiPython.LogChannelOptions_GetData(self, logChannelOptions)
    maxLogFileSize = property(_WMX3ApiPython.LogChannelOptions_maxLogFileSize_get, _WMX3ApiPython.LogChannelOptions_maxLogFileSize_set)
    maxLogFileCount = property(_WMX3ApiPython.LogChannelOptions_maxLogFileCount_get, _WMX3ApiPython.LogChannelOptions_maxLogFileCount_set)
    samplingTimeMilliseconds = property(_WMX3ApiPython.LogChannelOptions_samplingTimeMilliseconds_get, _WMX3ApiPython.LogChannelOptions_samplingTimeMilliseconds_set)
    isRotateFile = property(_WMX3ApiPython.LogChannelOptions_isRotateFile_get, _WMX3ApiPython.LogChannelOptions_isRotateFile_set)
    stopLoggingOnBufferOverflow = property(_WMX3ApiPython.LogChannelOptions_stopLoggingOnBufferOverflow_get, _WMX3ApiPython.LogChannelOptions_stopLoggingOnBufferOverflow_set)
    samplingPeriodInCycles = property(_WMX3ApiPython.LogChannelOptions_samplingPeriodInCycles_get, _WMX3ApiPython.LogChannelOptions_samplingPeriodInCycles_set)
    precision = property(_WMX3ApiPython.LogChannelOptions_precision_get, _WMX3ApiPython.LogChannelOptions_precision_set)
    isDelimInLastCol = property(_WMX3ApiPython.LogChannelOptions_isDelimInLastCol_get, _WMX3ApiPython.LogChannelOptions_isDelimInLastCol_set)
    delimiter = property(_WMX3ApiPython.LogChannelOptions_delimiter_get, _WMX3ApiPython.LogChannelOptions_delimiter_set)

    def SetDelimiter(self, index, value):
        return _WMX3ApiPython.LogChannelOptions_SetDelimiter(self, index, value)

    def GetDelimiter(self, index):
        return _WMX3ApiPython.LogChannelOptions_GetDelimiter(self, index)
    triggerOnCondition = property(_WMX3ApiPython.LogChannelOptions_triggerOnCondition_get, _WMX3ApiPython.LogChannelOptions_triggerOnCondition_set)
    triggerOnEvent = property(_WMX3ApiPython.LogChannelOptions_triggerOnEvent_get, _WMX3ApiPython.LogChannelOptions_triggerOnEvent_set)
    triggerEventID = property(_WMX3ApiPython.LogChannelOptions_triggerEventID_get, _WMX3ApiPython.LogChannelOptions_triggerEventID_set)

    def __init__(self):
        _WMX3ApiPython.LogChannelOptions_swiginit(self, _WMX3ApiPython.new_LogChannelOptions())
    __swig_destroy__ = _WMX3ApiPython.delete_LogChannelOptions

# Register LogChannelOptions in _WMX3ApiPython:
_WMX3ApiPython.LogChannelOptions_swigregister(LogChannelOptions)
class LogFilePath(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def SetData(self, logFilePath):
        return _WMX3ApiPython.LogFilePath_SetData(self, logFilePath)

    def GetData(self, logFilePath):
        return _WMX3ApiPython.LogFilePath_GetData(self, logFilePath)
    dirPath = property(_WMX3ApiPython.LogFilePath_dirPath_get, _WMX3ApiPython.LogFilePath_dirPath_set)

    def SetDirPath(self, index, value):
        return _WMX3ApiPython.LogFilePath_SetDirPath(self, index, value)

    def GetDirPath(self, index):
        return _WMX3ApiPython.LogFilePath_GetDirPath(self, index)
    fileName = property(_WMX3ApiPython.LogFilePath_fileName_get, _WMX3ApiPython.LogFilePath_fileName_set)

    def SetFileName(self, index, value):
        return _WMX3ApiPython.LogFilePath_SetFileName(self, index, value)

    def GetFileName(self, index):
        return _WMX3ApiPython.LogFilePath_GetFileName(self, index)

    def __init__(self):
        _WMX3ApiPython.LogFilePath_swiginit(self, _WMX3ApiPython.new_LogFilePath())
    __swig_destroy__ = _WMX3ApiPython.delete_LogFilePath

# Register LogFilePath in _WMX3ApiPython:
_WMX3ApiPython.LogFilePath_swigregister(LogFilePath)
class DetailLogState(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Idle = _WMX3ApiPython.DetailLogState_Idle
    WaitingForTrigger = _WMX3ApiPython.DetailLogState_WaitingForTrigger
    Running = _WMX3ApiPython.DetailLogState_Running
    Pause = _WMX3ApiPython.DetailLogState_Pause
    Stop = _WMX3ApiPython.DetailLogState_Stop
    WriteFail = _WMX3ApiPython.DetailLogState_WriteFail
    BufferOverflow = _WMX3ApiPython.DetailLogState_BufferOverflow
    Finished = _WMX3ApiPython.DetailLogState_Finished

    def __init__(self):
        _WMX3ApiPython.DetailLogState_swiginit(self, _WMX3ApiPython.new_DetailLogState())
    __swig_destroy__ = _WMX3ApiPython.delete_DetailLogState

# Register DetailLogState in _WMX3ApiPython:
_WMX3ApiPython.DetailLogState_swigregister(DetailLogState)
class DetailLogBufferStatus(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def SetData(self, detailLogBufferStatus):
        return _WMX3ApiPython.DetailLogBufferStatus_SetData(self, detailLogBufferStatus)

    def GetData(self, detailLogBufferStatus):
        return _WMX3ApiPython.DetailLogBufferStatus_GetData(self, detailLogBufferStatus)
    opened = property(_WMX3ApiPython.DetailLogBufferStatus_opened_get, _WMX3ApiPython.DetailLogBufferStatus_opened_set)
    samplesToCollect = property(_WMX3ApiPython.DetailLogBufferStatus_samplesToCollect_get, _WMX3ApiPython.DetailLogBufferStatus_samplesToCollect_set)
    samplesCollected = property(_WMX3ApiPython.DetailLogBufferStatus_samplesCollected_get, _WMX3ApiPython.DetailLogBufferStatus_samplesCollected_set)
    millisecondsToCollect = property(_WMX3ApiPython.DetailLogBufferStatus_millisecondsToCollect_get, _WMX3ApiPython.DetailLogBufferStatus_millisecondsToCollect_set)
    millisecondsCollected = property(_WMX3ApiPython.DetailLogBufferStatus_millisecondsCollected_get, _WMX3ApiPython.DetailLogBufferStatus_millisecondsCollected_set)

    def __init__(self):
        _WMX3ApiPython.DetailLogBufferStatus_swiginit(self, _WMX3ApiPython.new_DetailLogBufferStatus())
    __swig_destroy__ = _WMX3ApiPython.delete_DetailLogBufferStatus

# Register DetailLogBufferStatus in _WMX3ApiPython:
_WMX3ApiPython.DetailLogBufferStatus_swigregister(DetailLogBufferStatus)
class DetailLogStatus(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def SetData(self, detailLogStatus):
        return _WMX3ApiPython.DetailLogStatus_SetData(self, detailLogStatus)

    def GetData(self, detailLogStatus):
        return _WMX3ApiPython.DetailLogStatus_GetData(self, detailLogStatus)
    state = property(_WMX3ApiPython.DetailLogStatus_state_get, _WMX3ApiPython.DetailLogStatus_state_set)
    buffer = property(_WMX3ApiPython.DetailLogStatus_buffer_get, _WMX3ApiPython.DetailLogStatus_buffer_set)
    interruptPeriod = property(_WMX3ApiPython.DetailLogStatus_interruptPeriod_get, _WMX3ApiPython.DetailLogStatus_interruptPeriod_set)
    logFileCount = property(_WMX3ApiPython.DetailLogStatus_logFileCount_get, _WMX3ApiPython.DetailLogStatus_logFileCount_set)
    samplesWrittenSize = property(_WMX3ApiPython.DetailLogStatus_samplesWrittenSize_get, _WMX3ApiPython.DetailLogStatus_samplesWrittenSize_set)
    samplesWritten = property(_WMX3ApiPython.DetailLogStatus_samplesWritten_get, _WMX3ApiPython.DetailLogStatus_samplesWritten_set)
    millisecondsWritten = property(_WMX3ApiPython.DetailLogStatus_millisecondsWritten_get, _WMX3ApiPython.DetailLogStatus_millisecondsWritten_set)

    def __init__(self):
        _WMX3ApiPython.DetailLogStatus_swiginit(self, _WMX3ApiPython.new_DetailLogStatus())
    __swig_destroy__ = _WMX3ApiPython.delete_DetailLogStatus

# Register DetailLogStatus in _WMX3ApiPython:
_WMX3ApiPython.DetailLogStatus_swigregister(DetailLogStatus)
class DetailLogMemoryStatus(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def SetData(self, detailLogMemoryStatus):
        return _WMX3ApiPython.DetailLogMemoryStatus_SetData(self, detailLogMemoryStatus)

    def GetData(self, detailLogMemoryStatus):
        return _WMX3ApiPython.DetailLogMemoryStatus_GetData(self, detailLogMemoryStatus)
    state = property(_WMX3ApiPython.DetailLogMemoryStatus_state_get, _WMX3ApiPython.DetailLogMemoryStatus_state_set)
    buffer = property(_WMX3ApiPython.DetailLogMemoryStatus_buffer_get, _WMX3ApiPython.DetailLogMemoryStatus_buffer_set)
    usageRate = property(_WMX3ApiPython.DetailLogMemoryStatus_usageRate_get, _WMX3ApiPython.DetailLogMemoryStatus_usageRate_set)
    overflowFlag = property(_WMX3ApiPython.DetailLogMemoryStatus_overflowFlag_get, _WMX3ApiPython.DetailLogMemoryStatus_overflowFlag_set)

    def __init__(self):
        _WMX3ApiPython.DetailLogMemoryStatus_swiginit(self, _WMX3ApiPython.new_DetailLogMemoryStatus())
    __swig_destroy__ = _WMX3ApiPython.delete_DetailLogMemoryStatus

# Register DetailLogMemoryStatus in _WMX3ApiPython:
_WMX3ApiPython.DetailLogMemoryStatus_swigregister(DetailLogMemoryStatus)
class LogHeader(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, numLines):
        _WMX3ApiPython.LogHeader_swiginit(self, _WMX3ApiPython.new_LogHeader(numLines))
    __swig_destroy__ = _WMX3ApiPython.delete_LogHeader
    ppLine = property(_WMX3ApiPython.LogHeader_ppLine_get, _WMX3ApiPython.LogHeader_ppLine_set)

    def GetNumLines(self):
        return _WMX3ApiPython.LogHeader_GetNumLines(self)

    def SetPpLine(self, index, value):
        return _WMX3ApiPython.LogHeader_SetPpLine(self, index, value)

    def GetPpLine(self, index):
        return _WMX3ApiPython.LogHeader_GetPpLine(self, index)

# Register LogHeader in _WMX3ApiPython:
_WMX3ApiPython.LogHeader_swigregister(LogHeader)
class LogInputType(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    CycleCounter = _WMX3ApiPython.LogInputType_CycleCounter
    Time = _WMX3ApiPython.LogInputType_Time

    def __init__(self):
        _WMX3ApiPython.LogInputType_swiginit(self, _WMX3ApiPython.new_LogInputType())
    __swig_destroy__ = _WMX3ApiPython.delete_LogInputType

# Register LogInputType in _WMX3ApiPython:
_WMX3ApiPython.LogInputType_swigregister(LogInputType)
class LogApiLogInput(LogInput):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def SetData(self, pLogApiLogInput):
        return _WMX3ApiPython.LogApiLogInput_SetData(self, pLogApiLogInput)

    def GetData(self, pLogApiLogInput):
        return _WMX3ApiPython.LogApiLogInput_GetData(self, pLogApiLogInput)

    def __init__(self, *args):
        _WMX3ApiPython.LogApiLogInput_swiginit(self, _WMX3ApiPython.new_LogApiLogInput(*args))
    type = property(_WMX3ApiPython.LogApiLogInput_type_get, _WMX3ApiPython.LogApiLogInput_type_set)

    def GetModuleId(self):
        return _WMX3ApiPython.LogApiLogInput_GetModuleId(self)

    def GetInputData(self, buff, buffSize, dataSize):
        return _WMX3ApiPython.LogApiLogInput_GetInputData(self, buff, buffSize, dataSize)

    def SetInputData(self, moduleId, data, dataSize):
        return _WMX3ApiPython.LogApiLogInput_SetInputData(self, moduleId, data, dataSize)

    def GetLogInput(self):
        return _WMX3ApiPython.LogApiLogInput_GetLogInput(self)
    __swig_destroy__ = _WMX3ApiPython.delete_LogApiLogInput

# Register LogApiLogInput in _WMX3ApiPython:
_WMX3ApiPython.LogApiLogInput_swigregister(LogApiLogInput)
class LogApiLogOutput(LogOutput):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _WMX3ApiPython.LogApiLogOutput_swiginit(self, _WMX3ApiPython.new_LogApiLogOutput())

    def GetModuleId(self):
        return _WMX3ApiPython.LogApiLogOutput_GetModuleId(self)

    def GetLogOutput(self):
        return _WMX3ApiPython.LogApiLogOutput_GetLogOutput(self)

    def SetLogOutput(self, src):
        return _WMX3ApiPython.LogApiLogOutput_SetLogOutput(self, src)
    __swig_destroy__ = _WMX3ApiPython.delete_LogApiLogOutput

# Register LogApiLogOutput in _WMX3ApiPython:
_WMX3ApiPython.LogApiLogOutput_swigregister(LogApiLogOutput)
class LogOutputs(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, size):
        _WMX3ApiPython.LogOutputs_swiginit(self, _WMX3ApiPython.new_LogOutputs(size))
    __swig_destroy__ = _WMX3ApiPython.delete_LogOutputs
    ppOutput = property(_WMX3ApiPython.LogOutputs_ppOutput_get, _WMX3ApiPython.LogOutputs_ppOutput_set)

    def GetSize(self):
        return _WMX3ApiPython.LogOutputs_GetSize(self)

    def SetPpOutput(self, index, pOutput):
        return _WMX3ApiPython.LogOutputs_SetPpOutput(self, index, pOutput)

    def GetPpOutput(self, index):
        return _WMX3ApiPython.LogOutputs_GetPpOutput(self, index)

# Register LogOutputs in _WMX3ApiPython:
_WMX3ApiPython.LogOutputs_swigregister(LogOutputs)
class LogType(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Log = _WMX3ApiPython.LogType_Log
    r"""Log.rtdll Ver.3.5.0.0 is required to use."""
    MemoryLog = _WMX3ApiPython.LogType_MemoryLog

    def __init__(self):
        _WMX3ApiPython.LogType_swiginit(self, _WMX3ApiPython.new_LogType())
    __swig_destroy__ = _WMX3ApiPython.delete_LogType

# Register LogType in _WMX3ApiPython:
_WMX3ApiPython.LogType_swigregister(LogType)
class ApiLogType(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Command = _WMX3ApiPython.ApiLogType_Command
    Response = _WMX3ApiPython.ApiLogType_Response

    def __init__(self):
        _WMX3ApiPython.ApiLogType_swiginit(self, _WMX3ApiPython.new_ApiLogType())
    __swig_destroy__ = _WMX3ApiPython.delete_ApiLogType

# Register ApiLogType in _WMX3ApiPython:
_WMX3ApiPython.ApiLogType_swigregister(ApiLogType)
class ApiLogInfo(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def SetData(self, apiLogInfo):
        return _WMX3ApiPython.ApiLogInfo_SetData(self, apiLogInfo)

    def GetData(self, apiLogInfo):
        return _WMX3ApiPython.ApiLogInfo_GetData(self, apiLogInfo)
    majorVer = property(_WMX3ApiPython.ApiLogInfo_majorVer_get, _WMX3ApiPython.ApiLogInfo_majorVer_set)
    minorVer = property(_WMX3ApiPython.ApiLogInfo_minorVer_get, _WMX3ApiPython.ApiLogInfo_minorVer_set)
    revision = property(_WMX3ApiPython.ApiLogInfo_revision_get, _WMX3ApiPython.ApiLogInfo_revision_set)
    devId = property(_WMX3ApiPython.ApiLogInfo_devId_get, _WMX3ApiPython.ApiLogInfo_devId_set)
    moduleId = property(_WMX3ApiPython.ApiLogInfo_moduleId_get, _WMX3ApiPython.ApiLogInfo_moduleId_set)
    mode = property(_WMX3ApiPython.ApiLogInfo_mode_get, _WMX3ApiPython.ApiLogInfo_mode_set)
    type = property(_WMX3ApiPython.ApiLogInfo_type_get, _WMX3ApiPython.ApiLogInfo_type_set)
    dataLen = property(_WMX3ApiPython.ApiLogInfo_dataLen_get, _WMX3ApiPython.ApiLogInfo_dataLen_set)
    logId = property(_WMX3ApiPython.ApiLogInfo_logId_get, _WMX3ApiPython.ApiLogInfo_logId_set)
    timestamp = property(_WMX3ApiPython.ApiLogInfo_timestamp_get, _WMX3ApiPython.ApiLogInfo_timestamp_set)

    def __init__(self):
        _WMX3ApiPython.ApiLogInfo_swiginit(self, _WMX3ApiPython.new_ApiLogInfo())
    __swig_destroy__ = _WMX3ApiPython.delete_ApiLogInfo

# Register ApiLogInfo in _WMX3ApiPython:
_WMX3ApiPython.ApiLogInfo_swigregister(ApiLogInfo)
class ApiLogOptions(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def SetData(self, apiLogOptions):
        return _WMX3ApiPython.ApiLogOptions_SetData(self, apiLogOptions)

    def GetData(self, apiLogOptions):
        return _WMX3ApiPython.ApiLogOptions_GetData(self, apiLogOptions)
    sizePerFile = property(_WMX3ApiPython.ApiLogOptions_sizePerFile_get, _WMX3ApiPython.ApiLogOptions_sizePerFile_set)
    deviceExcluded = property(_WMX3ApiPython.ApiLogOptions_deviceExcluded_get, _WMX3ApiPython.ApiLogOptions_deviceExcluded_set)

    def SetDeviceExcluded(self, index, value):
        return _WMX3ApiPython.ApiLogOptions_SetDeviceExcluded(self, index, value)

    def GetDeviceExcluded(self, index):
        return _WMX3ApiPython.ApiLogOptions_GetDeviceExcluded(self, index)
    moduleExcluded = property(_WMX3ApiPython.ApiLogOptions_moduleExcluded_get, _WMX3ApiPython.ApiLogOptions_moduleExcluded_set)

    def SetModuleExcluded(self, index, value):
        return _WMX3ApiPython.ApiLogOptions_SetModuleExcluded(self, index, value)

    def GetModuleExcluded(self, index):
        return _WMX3ApiPython.ApiLogOptions_GetModuleExcluded(self, index)
    moduleResp = property(_WMX3ApiPython.ApiLogOptions_moduleResp_get, _WMX3ApiPython.ApiLogOptions_moduleResp_set)

    def SetModuleResp(self, index, value):
        return _WMX3ApiPython.ApiLogOptions_SetModuleResp(self, index, value)

    def GetModuleResp(self, index):
        return _WMX3ApiPython.ApiLogOptions_GetModuleResp(self, index)

    def __init__(self):
        _WMX3ApiPython.ApiLogOptions_swiginit(self, _WMX3ApiPython.new_ApiLogOptions())
    __swig_destroy__ = _WMX3ApiPython.delete_ApiLogOptions

# Register ApiLogOptions in _WMX3ApiPython:
_WMX3ApiPython.ApiLogOptions_swigregister(ApiLogOptions)
class ApiLogState(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Stopped = _WMX3ApiPython.ApiLogState_Stopped
    Stopping = _WMX3ApiPython.ApiLogState_Stopping
    Running = _WMX3ApiPython.ApiLogState_Running
    Error = _WMX3ApiPython.ApiLogState_Error
    Unknown = _WMX3ApiPython.ApiLogState_Unknown

    def __init__(self):
        _WMX3ApiPython.ApiLogState_swiginit(self, _WMX3ApiPython.new_ApiLogState())
    __swig_destroy__ = _WMX3ApiPython.delete_ApiLogState

# Register ApiLogState in _WMX3ApiPython:
_WMX3ApiPython.ApiLogState_swigregister(ApiLogState)
class ApiLogStatus(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def SetData(self, apiLogStatus):
        return _WMX3ApiPython.ApiLogStatus_SetData(self, apiLogStatus)

    def GetData(self, apiLogStatus):
        return _WMX3ApiPython.ApiLogStatus_GetData(self, apiLogStatus)
    state = property(_WMX3ApiPython.ApiLogStatus_state_get, _WMX3ApiPython.ApiLogStatus_state_set)
    queueSize = property(_WMX3ApiPython.ApiLogStatus_queueSize_get, _WMX3ApiPython.ApiLogStatus_queueSize_set)
    dataSize = property(_WMX3ApiPython.ApiLogStatus_dataSize_get, _WMX3ApiPython.ApiLogStatus_dataSize_set)
    errorCode = property(_WMX3ApiPython.ApiLogStatus_errorCode_get, _WMX3ApiPython.ApiLogStatus_errorCode_set)

    def __init__(self):
        _WMX3ApiPython.ApiLogStatus_swiginit(self, _WMX3ApiPython.new_ApiLogStatus())
    __swig_destroy__ = _WMX3ApiPython.delete_ApiLogStatus

# Register ApiLogStatus in _WMX3ApiPython:
_WMX3ApiPython.ApiLogStatus_swigregister(ApiLogStatus)
class Log(object):
    r"""Log.rtdll Ver.3.5.0.0 is required to use."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""Log.rtdll Ver.3.5.0.0 is required to use.Log.rtdll Ver.3.5.0.0 is required to use."""
        _WMX3ApiPython.Log_swiginit(self, _WMX3ApiPython.new_Log(*args))
    __swig_destroy__ = _WMX3ApiPython.delete_Log

    @staticmethod
    def ErrorToString(errCode):
        return _WMX3ApiPython.Log_ErrorToString(errCode)

    @staticmethod
    def ApiLogToString(pLogData, logDataSize):
        return _WMX3ApiPython.Log_ApiLogToString(pLogData, logDataSize)

    @staticmethod
    def TimestampToString(timestamp):
        return _WMX3ApiPython.Log_TimestampToString(timestamp)

    @staticmethod
    def GetLibVersion():
        return _WMX3ApiPython.Log_GetLibVersion()

    def IsDeviceValid(self):
        return _WMX3ApiPython.Log_IsDeviceValid(self)

    def GetVersion(self):
        return _WMX3ApiPython.Log_GetVersion(self)

    def StartLog(self, channel):
        return _WMX3ApiPython.Log_StartLog(self, channel)

    def StopLog(self, channel):
        return _WMX3ApiPython.Log_StopLog(self, channel)

    def ResetLog(self, channel):
        return _WMX3ApiPython.Log_ResetLog(self, channel)

    def SetLogHeader(self, channel, pLogHeader):
        return _WMX3ApiPython.Log_SetLogHeader(self, channel, pLogHeader)

    def SetCustomLog(self, channel, input):
        return _WMX3ApiPython.Log_SetCustomLog(self, channel, input)

    def SetLogOption(self, channel, pOption):
        return _WMX3ApiPython.Log_SetLogOption(self, channel, pOption)

    def GetLogOption(self, channel):
        dataPtr = LogChannelOptions()
        ret = _WMX3ApiPython.Log_GetLogOption(self, channel, dataPtr)
        return ret, dataPtr



    def SetLogFilePath(self, channel, pPath):
        return _WMX3ApiPython.Log_SetLogFilePath(self, channel, pPath)

    def GetLogFilePath(self, channel):
        dataPtr = LogFilePath()
        ret = _WMX3ApiPython.Log_GetLogFilePath(self, channel, dataPtr)
        return ret, dataPtr



    def GetLogStatus(self, channel):
        dataPtr = LogStatus()
        ret = _WMX3ApiPython.Log_GetLogStatus(self, channel, dataPtr)
        return ret, dataPtr



    def GetDetailLogStatus(self, channel):
        dataPtr = DetailLogStatus()
        ret = _WMX3ApiPython.Log_GetDetailLogStatus(self, channel, dataPtr)
        return ret, dataPtr



    def SetLog(self, *args):
        return _WMX3ApiPython.Log_SetLog(self, *args)

    def SetIOLog(self, channel, pInputIOAddress, inputSize, pOutputIOAddress, outputSize):
        return _WMX3ApiPython.Log_SetIOLog(self, channel, pInputIOAddress, inputSize, pOutputIOAddress, outputSize)

    def SetIOLogFormat(self, channel, pInputIOLogFormat, inputIOFormatCount, pOutputIOLogFormat, outputIOFormatCount):
        return _WMX3ApiPython.Log_SetIOLogFormat(self, channel, pInputIOLogFormat, inputIOFormatCount, pOutputIOLogFormat, outputIOFormatCount)

    def SetMLog(self, channel, pMAddress, size):
        return _WMX3ApiPython.Log_SetMLog(self, channel, pMAddress, size)

    def SetMLogFormat(self, channel, pMLogFormat, mFormatCount):
        return _WMX3ApiPython.Log_SetMLogFormat(self, channel, pMLogFormat, mFormatCount)

    def OpenMemoryLogBuffer(self, channel):
        return _WMX3ApiPython.Log_OpenMemoryLogBuffer(self, channel)

    def CloseMemoryLogBuffer(self, channel):
        return _WMX3ApiPython.Log_CloseMemoryLogBuffer(self, channel)

    def SetMemoryLog_LogInput(self, channel, input):
        return _WMX3ApiPython.Log_SetMemoryLog_LogInput(self, channel, input)

    def SetMemoryLogOption(self, channel, pOption):
        return _WMX3ApiPython.Log_SetMemoryLogOption(self, channel, pOption)

    def GetMemoryLogOption(self, channel):
        dataPtr = MemoryLogOptions()
        ret = _WMX3ApiPython.Log_GetMemoryLogOption(self, channel, dataPtr)
        return ret, dataPtr



    def StartMemoryLog(self, channel):
        return _WMX3ApiPython.Log_StartMemoryLog(self, channel)

    def StopMemoryLog(self, channel):
        return _WMX3ApiPython.Log_StopMemoryLog(self, channel)

    def ResetMemoryLog(self, channel):
        return _WMX3ApiPython.Log_ResetMemoryLog(self, channel)

    def GetMemoryLogStatus(self, channel):
        dataPtr = MemoryLogStatus()
        ret = _WMX3ApiPython.Log_GetMemoryLogStatus(self, channel, dataPtr)
        return ret, dataPtr



    def GetMemoryLogData_LogOutput(self, channel, pOutput):
        return _WMX3ApiPython.Log_GetMemoryLogData_LogOutput(self, channel, pOutput)

    def GetMemoryLogData_LogOutputs(self, channel, pOutputs):
        return _WMX3ApiPython.Log_GetMemoryLogData_LogOutputs(self, channel, pOutputs)

    def SetMemoryLog(self, channel, pAxisSelection, pOption):
        return _WMX3ApiPython.Log_SetMemoryLog(self, channel, pAxisSelection, pOption)

    def SetMemoryIOLog(self, channel, pInputIOAddress, inputSize, pOutputIOAddress, outputSize):
        return _WMX3ApiPython.Log_SetMemoryIOLog(self, channel, pInputIOAddress, inputSize, pOutputIOAddress, outputSize)

    def SetMemoryMLog(self, channel, pMAddress, size):
        return _WMX3ApiPython.Log_SetMemoryMLog(self, channel, pMAddress, size)

    def GetMemoryLogData(self, channel):
        dataPtr = MemoryLogData()
        ret = _WMX3ApiPython.Log_GetMemoryLogData(self, channel, dataPtr)
        return ret, dataPtr



    def SetApiLog(self, *args):
        return _WMX3ApiPython.Log_SetApiLog(self, *args)

    def StartApiLog(self):
        return _WMX3ApiPython.Log_StartApiLog(self)

    def StopApiLog(self):
        return _WMX3ApiPython.Log_StopApiLog(self)

    def GetApiLogStatus(self):
        pStatus = ApiLogStatus()
        ret = _WMX3ApiPython.Log_GetApiLogStatus(self, pStatus)
        return ret, pStatus



    def OpenApiLogFile(self, pPath):
        return _WMX3ApiPython.Log_OpenApiLogFile(self, pPath)

    def GetApiLogData(self, pFile, buffSize) :
        dataList = []
        pDataBuff = intArray(buffSize)
        ret = _WMX3ApiPython.Log_GetApiLogData(self, pFile, pDataBuff, buffSize)
        if ret == 0:
            for i in range(buffSize):
                dataList.append(pDataBuff[i])
            return ret, dataList
        else:
            return ret, []



    def GetApiLogData_ApiLogInfo(self, pFile, buffSize):
        dataList = []
        pDataBuff = intArray(buffSize)
        pApiLogInfo = ApiLogInfo()

        ret = _WMX3ApiPython.Log_GetApiLogData_ApiLogInfo(self, pFile, pDataBuff, buffSize, pApiLogInfo)

        if ret == 0:
            for i in range(buffSize):
                dataList.append(pDataBuff[i])
            return ret, dataList, pApiLogInfo
        else:
            return ret, [], pApiLogInfo



    def CloseApiLogFile(self, pFile):
        ret = _WMX3ApiPython.Log_CloseApiLogFile(self, pFile)
        pFile.close()
        return ret



# Register Log in _WMX3ApiPython:
_WMX3ApiPython.Log_swigregister(Log)
class ApiBufferErrorCode(ErrorCode):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    OverMaxLevel = _WMX3ApiPython.ApiBufferErrorCode_OverMaxLevel
    InvalidLevel = _WMX3ApiPython.ApiBufferErrorCode_InvalidLevel
    InvalidBuffControl = _WMX3ApiPython.ApiBufferErrorCode_InvalidBuffControl
    InvalidWatchTriggerRoutineChannel = _WMX3ApiPython.ApiBufferErrorCode_InvalidWatchTriggerRoutineChannel
    WatchTriggerRoutineChannelSameAsExecChannel = _WMX3ApiPython.ApiBufferErrorCode_WatchTriggerRoutineChannelSameAsExecChannel
    RewindFailedFirstCommandOverwritten = _WMX3ApiPython.ApiBufferErrorCode_RewindFailedFirstCommandOverwritten
    AleadyRecordingForSpecifiedChannel = _WMX3ApiPython.ApiBufferErrorCode_AleadyRecordingForSpecifiedChannel
    NotRecording = _WMX3ApiPython.ApiBufferErrorCode_NotRecording

    def __init__(self):
        _WMX3ApiPython.ApiBufferErrorCode_swiginit(self, _WMX3ApiPython.new_ApiBufferErrorCode())
    __swig_destroy__ = _WMX3ApiPython.delete_ApiBufferErrorCode

# Register ApiBufferErrorCode in _WMX3ApiPython:
_WMX3ApiPython.ApiBufferErrorCode_swigregister(ApiBufferErrorCode)
class ApiBufferConditionType(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    NeverTrue = _WMX3ApiPython.ApiBufferConditionType_NeverTrue
    AlwaysTrue = _WMX3ApiPython.ApiBufferConditionType_AlwaysTrue
    IOInput = _WMX3ApiPython.ApiBufferConditionType_IOInput
    IOOutput = _WMX3ApiPython.ApiBufferConditionType_IOOutput
    UserMemory = _WMX3ApiPython.ApiBufferConditionType_UserMemory
    Event = _WMX3ApiPython.ApiBufferConditionType_Event
    MinimumTrq = _WMX3ApiPython.ApiBufferConditionType_MinimumTrq
    OpState = _WMX3ApiPython.ApiBufferConditionType_OpState
    AxisCmdMode = _WMX3ApiPython.ApiBufferConditionType_AxisCmdMode
    InPos = _WMX3ApiPython.ApiBufferConditionType_InPos
    PosSET = _WMX3ApiPython.ApiBufferConditionType_PosSET
    DelayedPosSET = _WMX3ApiPython.ApiBufferConditionType_DelayedPosSET
    CommandDistributedEnd = _WMX3ApiPython.ApiBufferConditionType_CommandDistributedEnd
    RemainingTime = _WMX3ApiPython.ApiBufferConditionType_RemainingTime
    RemainingDistance = _WMX3ApiPython.ApiBufferConditionType_RemainingDistance
    CompletedTime = _WMX3ApiPython.ApiBufferConditionType_CompletedTime
    CompletedDistance = _WMX3ApiPython.ApiBufferConditionType_CompletedDistance
    DecelerationStarted = _WMX3ApiPython.ApiBufferConditionType_DecelerationStarted
    DistanceToTarget = _WMX3ApiPython.ApiBufferConditionType_DistanceToTarget
    AxisIdle = _WMX3ApiPython.ApiBufferConditionType_AxisIdle
    MotionStarted = _WMX3ApiPython.ApiBufferConditionType_MotionStarted
    MotionStartedOverrideReady = _WMX3ApiPython.ApiBufferConditionType_MotionStartedOverrideReady

    def __init__(self):
        _WMX3ApiPython.ApiBufferConditionType_swiginit(self, _WMX3ApiPython.new_ApiBufferConditionType())
    __swig_destroy__ = _WMX3ApiPython.delete_ApiBufferConditionType

# Register ApiBufferConditionType in _WMX3ApiPython:
_WMX3ApiPython.ApiBufferConditionType_swigregister(ApiBufferConditionType)
class ApiBufferState(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Idle = _WMX3ApiPython.ApiBufferState_Idle
    Active = _WMX3ApiPython.ApiBufferState_Active
    Stop = _WMX3ApiPython.ApiBufferState_Stop
    Delay = _WMX3ApiPython.ApiBufferState_Delay

    def __init__(self):
        _WMX3ApiPython.ApiBufferState_swiginit(self, _WMX3ApiPython.new_ApiBufferState())
    __swig_destroy__ = _WMX3ApiPython.delete_ApiBufferState

# Register ApiBufferState in _WMX3ApiPython:
_WMX3ApiPython.ApiBufferState_swigregister(ApiBufferState)
class ApiBufferConditionArguments_NeverTrue(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    reserved = property(_WMX3ApiPython.ApiBufferConditionArguments_NeverTrue_reserved_get, _WMX3ApiPython.ApiBufferConditionArguments_NeverTrue_reserved_set)

    def __init__(self):
        _WMX3ApiPython.ApiBufferConditionArguments_NeverTrue_swiginit(self, _WMX3ApiPython.new_ApiBufferConditionArguments_NeverTrue())
    __swig_destroy__ = _WMX3ApiPython.delete_ApiBufferConditionArguments_NeverTrue

# Register ApiBufferConditionArguments_NeverTrue in _WMX3ApiPython:
_WMX3ApiPython.ApiBufferConditionArguments_NeverTrue_swigregister(ApiBufferConditionArguments_NeverTrue)
class ApiBufferConditionArguments_AlwaysTrue(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    reserved = property(_WMX3ApiPython.ApiBufferConditionArguments_AlwaysTrue_reserved_get, _WMX3ApiPython.ApiBufferConditionArguments_AlwaysTrue_reserved_set)

    def __init__(self):
        _WMX3ApiPython.ApiBufferConditionArguments_AlwaysTrue_swiginit(self, _WMX3ApiPython.new_ApiBufferConditionArguments_AlwaysTrue())
    __swig_destroy__ = _WMX3ApiPython.delete_ApiBufferConditionArguments_AlwaysTrue

# Register ApiBufferConditionArguments_AlwaysTrue in _WMX3ApiPython:
_WMX3ApiPython.ApiBufferConditionArguments_AlwaysTrue_swigregister(ApiBufferConditionArguments_AlwaysTrue)
class ApiBufferConditionArguments_IOInput(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    byteAddress = property(_WMX3ApiPython.ApiBufferConditionArguments_IOInput_byteAddress_get, _WMX3ApiPython.ApiBufferConditionArguments_IOInput_byteAddress_set)
    bitAddress = property(_WMX3ApiPython.ApiBufferConditionArguments_IOInput_bitAddress_get, _WMX3ApiPython.ApiBufferConditionArguments_IOInput_bitAddress_set)
    invert = property(_WMX3ApiPython.ApiBufferConditionArguments_IOInput_invert_get, _WMX3ApiPython.ApiBufferConditionArguments_IOInput_invert_set)

    def __init__(self):
        _WMX3ApiPython.ApiBufferConditionArguments_IOInput_swiginit(self, _WMX3ApiPython.new_ApiBufferConditionArguments_IOInput())
    __swig_destroy__ = _WMX3ApiPython.delete_ApiBufferConditionArguments_IOInput

# Register ApiBufferConditionArguments_IOInput in _WMX3ApiPython:
_WMX3ApiPython.ApiBufferConditionArguments_IOInput_swigregister(ApiBufferConditionArguments_IOInput)
class ApiBufferConditionArguments_IOOutput(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    byteAddress = property(_WMX3ApiPython.ApiBufferConditionArguments_IOOutput_byteAddress_get, _WMX3ApiPython.ApiBufferConditionArguments_IOOutput_byteAddress_set)
    bitAddress = property(_WMX3ApiPython.ApiBufferConditionArguments_IOOutput_bitAddress_get, _WMX3ApiPython.ApiBufferConditionArguments_IOOutput_bitAddress_set)
    invert = property(_WMX3ApiPython.ApiBufferConditionArguments_IOOutput_invert_get, _WMX3ApiPython.ApiBufferConditionArguments_IOOutput_invert_set)

    def __init__(self):
        _WMX3ApiPython.ApiBufferConditionArguments_IOOutput_swiginit(self, _WMX3ApiPython.new_ApiBufferConditionArguments_IOOutput())
    __swig_destroy__ = _WMX3ApiPython.delete_ApiBufferConditionArguments_IOOutput

# Register ApiBufferConditionArguments_IOOutput in _WMX3ApiPython:
_WMX3ApiPython.ApiBufferConditionArguments_IOOutput_swigregister(ApiBufferConditionArguments_IOOutput)
class ApiBufferConditionArguments_UserMemory(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    byteAddress = property(_WMX3ApiPython.ApiBufferConditionArguments_UserMemory_byteAddress_get, _WMX3ApiPython.ApiBufferConditionArguments_UserMemory_byteAddress_set)
    bitAddress = property(_WMX3ApiPython.ApiBufferConditionArguments_UserMemory_bitAddress_get, _WMX3ApiPython.ApiBufferConditionArguments_UserMemory_bitAddress_set)
    invert = property(_WMX3ApiPython.ApiBufferConditionArguments_UserMemory_invert_get, _WMX3ApiPython.ApiBufferConditionArguments_UserMemory_invert_set)

    def __init__(self):
        _WMX3ApiPython.ApiBufferConditionArguments_UserMemory_swiginit(self, _WMX3ApiPython.new_ApiBufferConditionArguments_UserMemory())
    __swig_destroy__ = _WMX3ApiPython.delete_ApiBufferConditionArguments_UserMemory

# Register ApiBufferConditionArguments_UserMemory in _WMX3ApiPython:
_WMX3ApiPython.ApiBufferConditionArguments_UserMemory_swigregister(ApiBufferConditionArguments_UserMemory)
class ApiBufferConditionArguments_MinimumTrq(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    axis = property(_WMX3ApiPython.ApiBufferConditionArguments_MinimumTrq_axis_get, _WMX3ApiPython.ApiBufferConditionArguments_MinimumTrq_axis_set)
    torque = property(_WMX3ApiPython.ApiBufferConditionArguments_MinimumTrq_torque_get, _WMX3ApiPython.ApiBufferConditionArguments_MinimumTrq_torque_set)

    def __init__(self):
        _WMX3ApiPython.ApiBufferConditionArguments_MinimumTrq_swiginit(self, _WMX3ApiPython.new_ApiBufferConditionArguments_MinimumTrq())
    __swig_destroy__ = _WMX3ApiPython.delete_ApiBufferConditionArguments_MinimumTrq

# Register ApiBufferConditionArguments_MinimumTrq in _WMX3ApiPython:
_WMX3ApiPython.ApiBufferConditionArguments_MinimumTrq_swigregister(ApiBufferConditionArguments_MinimumTrq)
class ApiBufferConditionArguments_OpState(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    axis = property(_WMX3ApiPython.ApiBufferConditionArguments_OpState_axis_get, _WMX3ApiPython.ApiBufferConditionArguments_OpState_axis_set)
    opState = property(_WMX3ApiPython.ApiBufferConditionArguments_OpState_opState_get, _WMX3ApiPython.ApiBufferConditionArguments_OpState_opState_set)

    def __init__(self):
        _WMX3ApiPython.ApiBufferConditionArguments_OpState_swiginit(self, _WMX3ApiPython.new_ApiBufferConditionArguments_OpState())
    __swig_destroy__ = _WMX3ApiPython.delete_ApiBufferConditionArguments_OpState

# Register ApiBufferConditionArguments_OpState in _WMX3ApiPython:
_WMX3ApiPython.ApiBufferConditionArguments_OpState_swigregister(ApiBufferConditionArguments_OpState)
class ApiBufferConditionArguments_AxisCmdMode(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    axis = property(_WMX3ApiPython.ApiBufferConditionArguments_AxisCmdMode_axis_get, _WMX3ApiPython.ApiBufferConditionArguments_AxisCmdMode_axis_set)
    axisCommandMode = property(_WMX3ApiPython.ApiBufferConditionArguments_AxisCmdMode_axisCommandMode_get, _WMX3ApiPython.ApiBufferConditionArguments_AxisCmdMode_axisCommandMode_set)
    useFeedback = property(_WMX3ApiPython.ApiBufferConditionArguments_AxisCmdMode_useFeedback_get, _WMX3ApiPython.ApiBufferConditionArguments_AxisCmdMode_useFeedback_set)

    def __init__(self):
        _WMX3ApiPython.ApiBufferConditionArguments_AxisCmdMode_swiginit(self, _WMX3ApiPython.new_ApiBufferConditionArguments_AxisCmdMode())
    __swig_destroy__ = _WMX3ApiPython.delete_ApiBufferConditionArguments_AxisCmdMode

# Register ApiBufferConditionArguments_AxisCmdMode in _WMX3ApiPython:
_WMX3ApiPython.ApiBufferConditionArguments_AxisCmdMode_swigregister(ApiBufferConditionArguments_AxisCmdMode)
class ApiBufferConditionArguments_InPos(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    axis = property(_WMX3ApiPython.ApiBufferConditionArguments_InPos_axis_get, _WMX3ApiPython.ApiBufferConditionArguments_InPos_axis_set)
    channel = property(_WMX3ApiPython.ApiBufferConditionArguments_InPos_channel_get, _WMX3ApiPython.ApiBufferConditionArguments_InPos_channel_set)

    def __init__(self):
        _WMX3ApiPython.ApiBufferConditionArguments_InPos_swiginit(self, _WMX3ApiPython.new_ApiBufferConditionArguments_InPos())
    __swig_destroy__ = _WMX3ApiPython.delete_ApiBufferConditionArguments_InPos

# Register ApiBufferConditionArguments_InPos in _WMX3ApiPython:
_WMX3ApiPython.ApiBufferConditionArguments_InPos_swigregister(ApiBufferConditionArguments_InPos)
class ApiBufferConditionArguments_PosSET(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    axis = property(_WMX3ApiPython.ApiBufferConditionArguments_PosSET_axis_get, _WMX3ApiPython.ApiBufferConditionArguments_PosSET_axis_set)

    def __init__(self):
        _WMX3ApiPython.ApiBufferConditionArguments_PosSET_swiginit(self, _WMX3ApiPython.new_ApiBufferConditionArguments_PosSET())
    __swig_destroy__ = _WMX3ApiPython.delete_ApiBufferConditionArguments_PosSET

# Register ApiBufferConditionArguments_PosSET in _WMX3ApiPython:
_WMX3ApiPython.ApiBufferConditionArguments_PosSET_swigregister(ApiBufferConditionArguments_PosSET)
class ApiBufferConditionArguments_DelayedPosSET(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    axis = property(_WMX3ApiPython.ApiBufferConditionArguments_DelayedPosSET_axis_get, _WMX3ApiPython.ApiBufferConditionArguments_DelayedPosSET_axis_set)

    def __init__(self):
        _WMX3ApiPython.ApiBufferConditionArguments_DelayedPosSET_swiginit(self, _WMX3ApiPython.new_ApiBufferConditionArguments_DelayedPosSET())
    __swig_destroy__ = _WMX3ApiPython.delete_ApiBufferConditionArguments_DelayedPosSET

# Register ApiBufferConditionArguments_DelayedPosSET in _WMX3ApiPython:
_WMX3ApiPython.ApiBufferConditionArguments_DelayedPosSET_swigregister(ApiBufferConditionArguments_DelayedPosSET)
class ApiBufferConditionArguments_CommandDistributedEnd(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    axis = property(_WMX3ApiPython.ApiBufferConditionArguments_CommandDistributedEnd_axis_get, _WMX3ApiPython.ApiBufferConditionArguments_CommandDistributedEnd_axis_set)

    def __init__(self):
        _WMX3ApiPython.ApiBufferConditionArguments_CommandDistributedEnd_swiginit(self, _WMX3ApiPython.new_ApiBufferConditionArguments_CommandDistributedEnd())
    __swig_destroy__ = _WMX3ApiPython.delete_ApiBufferConditionArguments_CommandDistributedEnd

# Register ApiBufferConditionArguments_CommandDistributedEnd in _WMX3ApiPython:
_WMX3ApiPython.ApiBufferConditionArguments_CommandDistributedEnd_swigregister(ApiBufferConditionArguments_CommandDistributedEnd)
class ApiBufferConditionArguments_RemainingTime(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    axis = property(_WMX3ApiPython.ApiBufferConditionArguments_RemainingTime_axis_get, _WMX3ApiPython.ApiBufferConditionArguments_RemainingTime_axis_set)
    timeMilliseconds = property(_WMX3ApiPython.ApiBufferConditionArguments_RemainingTime_timeMilliseconds_get, _WMX3ApiPython.ApiBufferConditionArguments_RemainingTime_timeMilliseconds_set)

    def __init__(self):
        _WMX3ApiPython.ApiBufferConditionArguments_RemainingTime_swiginit(self, _WMX3ApiPython.new_ApiBufferConditionArguments_RemainingTime())
    __swig_destroy__ = _WMX3ApiPython.delete_ApiBufferConditionArguments_RemainingTime

# Register ApiBufferConditionArguments_RemainingTime in _WMX3ApiPython:
_WMX3ApiPython.ApiBufferConditionArguments_RemainingTime_swigregister(ApiBufferConditionArguments_RemainingTime)
class ApiBufferConditionArguments_RemainingDistance(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    axis = property(_WMX3ApiPython.ApiBufferConditionArguments_RemainingDistance_axis_get, _WMX3ApiPython.ApiBufferConditionArguments_RemainingDistance_axis_set)
    distance = property(_WMX3ApiPython.ApiBufferConditionArguments_RemainingDistance_distance_get, _WMX3ApiPython.ApiBufferConditionArguments_RemainingDistance_distance_set)

    def __init__(self):
        _WMX3ApiPython.ApiBufferConditionArguments_RemainingDistance_swiginit(self, _WMX3ApiPython.new_ApiBufferConditionArguments_RemainingDistance())
    __swig_destroy__ = _WMX3ApiPython.delete_ApiBufferConditionArguments_RemainingDistance

# Register ApiBufferConditionArguments_RemainingDistance in _WMX3ApiPython:
_WMX3ApiPython.ApiBufferConditionArguments_RemainingDistance_swigregister(ApiBufferConditionArguments_RemainingDistance)
class ApiBufferConditionArguments_CompletedTime(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    axis = property(_WMX3ApiPython.ApiBufferConditionArguments_CompletedTime_axis_get, _WMX3ApiPython.ApiBufferConditionArguments_CompletedTime_axis_set)
    timeMilliseconds = property(_WMX3ApiPython.ApiBufferConditionArguments_CompletedTime_timeMilliseconds_get, _WMX3ApiPython.ApiBufferConditionArguments_CompletedTime_timeMilliseconds_set)

    def __init__(self):
        _WMX3ApiPython.ApiBufferConditionArguments_CompletedTime_swiginit(self, _WMX3ApiPython.new_ApiBufferConditionArguments_CompletedTime())
    __swig_destroy__ = _WMX3ApiPython.delete_ApiBufferConditionArguments_CompletedTime

# Register ApiBufferConditionArguments_CompletedTime in _WMX3ApiPython:
_WMX3ApiPython.ApiBufferConditionArguments_CompletedTime_swigregister(ApiBufferConditionArguments_CompletedTime)
class ApiBufferConditionArguments_CompletedDistance(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    axis = property(_WMX3ApiPython.ApiBufferConditionArguments_CompletedDistance_axis_get, _WMX3ApiPython.ApiBufferConditionArguments_CompletedDistance_axis_set)
    distance = property(_WMX3ApiPython.ApiBufferConditionArguments_CompletedDistance_distance_get, _WMX3ApiPython.ApiBufferConditionArguments_CompletedDistance_distance_set)

    def __init__(self):
        _WMX3ApiPython.ApiBufferConditionArguments_CompletedDistance_swiginit(self, _WMX3ApiPython.new_ApiBufferConditionArguments_CompletedDistance())
    __swig_destroy__ = _WMX3ApiPython.delete_ApiBufferConditionArguments_CompletedDistance

# Register ApiBufferConditionArguments_CompletedDistance in _WMX3ApiPython:
_WMX3ApiPython.ApiBufferConditionArguments_CompletedDistance_swigregister(ApiBufferConditionArguments_CompletedDistance)
class ApiBufferConditionArguments_DistanceToTarget(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    axis = property(_WMX3ApiPython.ApiBufferConditionArguments_DistanceToTarget_axis_get, _WMX3ApiPython.ApiBufferConditionArguments_DistanceToTarget_axis_set)
    distance = property(_WMX3ApiPython.ApiBufferConditionArguments_DistanceToTarget_distance_get, _WMX3ApiPython.ApiBufferConditionArguments_DistanceToTarget_distance_set)

    def __init__(self):
        _WMX3ApiPython.ApiBufferConditionArguments_DistanceToTarget_swiginit(self, _WMX3ApiPython.new_ApiBufferConditionArguments_DistanceToTarget())
    __swig_destroy__ = _WMX3ApiPython.delete_ApiBufferConditionArguments_DistanceToTarget

# Register ApiBufferConditionArguments_DistanceToTarget in _WMX3ApiPython:
_WMX3ApiPython.ApiBufferConditionArguments_DistanceToTarget_swigregister(ApiBufferConditionArguments_DistanceToTarget)
class ApiBufferConditionArguments_DecelerationStarted(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    axis = property(_WMX3ApiPython.ApiBufferConditionArguments_DecelerationStarted_axis_get, _WMX3ApiPython.ApiBufferConditionArguments_DecelerationStarted_axis_set)

    def __init__(self):
        _WMX3ApiPython.ApiBufferConditionArguments_DecelerationStarted_swiginit(self, _WMX3ApiPython.new_ApiBufferConditionArguments_DecelerationStarted())
    __swig_destroy__ = _WMX3ApiPython.delete_ApiBufferConditionArguments_DecelerationStarted

# Register ApiBufferConditionArguments_DecelerationStarted in _WMX3ApiPython:
_WMX3ApiPython.ApiBufferConditionArguments_DecelerationStarted_swigregister(ApiBufferConditionArguments_DecelerationStarted)
class ApiBufferConditionArguments_AxisIdle(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    axisCount = property(_WMX3ApiPython.ApiBufferConditionArguments_AxisIdle_axisCount_get, _WMX3ApiPython.ApiBufferConditionArguments_AxisIdle_axisCount_set)
    axis = property(_WMX3ApiPython.ApiBufferConditionArguments_AxisIdle_axis_get, _WMX3ApiPython.ApiBufferConditionArguments_AxisIdle_axis_set)

    def SetAxis(self, index, value):
        return _WMX3ApiPython.ApiBufferConditionArguments_AxisIdle_SetAxis(self, index, value)

    def GetAxis(self, index):
        return _WMX3ApiPython.ApiBufferConditionArguments_AxisIdle_GetAxis(self, index)

    def __init__(self):
        _WMX3ApiPython.ApiBufferConditionArguments_AxisIdle_swiginit(self, _WMX3ApiPython.new_ApiBufferConditionArguments_AxisIdle())
    __swig_destroy__ = _WMX3ApiPython.delete_ApiBufferConditionArguments_AxisIdle

# Register ApiBufferConditionArguments_AxisIdle in _WMX3ApiPython:
_WMX3ApiPython.ApiBufferConditionArguments_AxisIdle_swigregister(ApiBufferConditionArguments_AxisIdle)
class ApiBufferConditionArguments_MotionStarted(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    axis = property(_WMX3ApiPython.ApiBufferConditionArguments_MotionStarted_axis_get, _WMX3ApiPython.ApiBufferConditionArguments_MotionStarted_axis_set)

    def __init__(self):
        _WMX3ApiPython.ApiBufferConditionArguments_MotionStarted_swiginit(self, _WMX3ApiPython.new_ApiBufferConditionArguments_MotionStarted())
    __swig_destroy__ = _WMX3ApiPython.delete_ApiBufferConditionArguments_MotionStarted

# Register ApiBufferConditionArguments_MotionStarted in _WMX3ApiPython:
_WMX3ApiPython.ApiBufferConditionArguments_MotionStarted_swigregister(ApiBufferConditionArguments_MotionStarted)
class ApiBufferConditionArguments_MotionStartedOverrideReady(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    axis = property(_WMX3ApiPython.ApiBufferConditionArguments_MotionStartedOverrideReady_axis_get, _WMX3ApiPython.ApiBufferConditionArguments_MotionStartedOverrideReady_axis_set)

    def __init__(self):
        _WMX3ApiPython.ApiBufferConditionArguments_MotionStartedOverrideReady_swiginit(self, _WMX3ApiPython.new_ApiBufferConditionArguments_MotionStartedOverrideReady())
    __swig_destroy__ = _WMX3ApiPython.delete_ApiBufferConditionArguments_MotionStartedOverrideReady

# Register ApiBufferConditionArguments_MotionStartedOverrideReady in _WMX3ApiPython:
_WMX3ApiPython.ApiBufferConditionArguments_MotionStartedOverrideReady_swigregister(ApiBufferConditionArguments_MotionStartedOverrideReady)
class ApiBufferConditionArguments_Event(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    eventID = property(_WMX3ApiPython.ApiBufferConditionArguments_Event_eventID_get, _WMX3ApiPython.ApiBufferConditionArguments_Event_eventID_set)

    def __init__(self):
        _WMX3ApiPython.ApiBufferConditionArguments_Event_swiginit(self, _WMX3ApiPython.new_ApiBufferConditionArguments_Event())
    __swig_destroy__ = _WMX3ApiPython.delete_ApiBufferConditionArguments_Event

# Register ApiBufferConditionArguments_Event in _WMX3ApiPython:
_WMX3ApiPython.ApiBufferConditionArguments_Event_swigregister(ApiBufferConditionArguments_Event)
class ApiBufferCondition(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def GetData(self, apiBufferCondition):
        return _WMX3ApiPython.ApiBufferCondition_GetData(self, apiBufferCondition)

    def SetData(self, apiBufferCondition):
        return _WMX3ApiPython.ApiBufferCondition_SetData(self, apiBufferCondition)
    bufferConditionType = property(_WMX3ApiPython.ApiBufferCondition_bufferConditionType_get, _WMX3ApiPython.ApiBufferCondition_bufferConditionType_set)
    arg_neverTrue = property(_WMX3ApiPython.ApiBufferCondition_arg_neverTrue_get, _WMX3ApiPython.ApiBufferCondition_arg_neverTrue_set)
    arg_alwaysTrue = property(_WMX3ApiPython.ApiBufferCondition_arg_alwaysTrue_get, _WMX3ApiPython.ApiBufferCondition_arg_alwaysTrue_set)
    arg_ioInput = property(_WMX3ApiPython.ApiBufferCondition_arg_ioInput_get, _WMX3ApiPython.ApiBufferCondition_arg_ioInput_set)
    arg_ioOutput = property(_WMX3ApiPython.ApiBufferCondition_arg_ioOutput_get, _WMX3ApiPython.ApiBufferCondition_arg_ioOutput_set)
    arg_userMemory = property(_WMX3ApiPython.ApiBufferCondition_arg_userMemory_get, _WMX3ApiPython.ApiBufferCondition_arg_userMemory_set)
    arg_minimumTrq = property(_WMX3ApiPython.ApiBufferCondition_arg_minimumTrq_get, _WMX3ApiPython.ApiBufferCondition_arg_minimumTrq_set)
    arg_opState = property(_WMX3ApiPython.ApiBufferCondition_arg_opState_get, _WMX3ApiPython.ApiBufferCondition_arg_opState_set)
    arg_axisCmdMode = property(_WMX3ApiPython.ApiBufferCondition_arg_axisCmdMode_get, _WMX3ApiPython.ApiBufferCondition_arg_axisCmdMode_set)
    arg_inPos = property(_WMX3ApiPython.ApiBufferCondition_arg_inPos_get, _WMX3ApiPython.ApiBufferCondition_arg_inPos_set)
    arg_posSET = property(_WMX3ApiPython.ApiBufferCondition_arg_posSET_get, _WMX3ApiPython.ApiBufferCondition_arg_posSET_set)
    arg_delayedPosSET = property(_WMX3ApiPython.ApiBufferCondition_arg_delayedPosSET_get, _WMX3ApiPython.ApiBufferCondition_arg_delayedPosSET_set)
    arg_commandDistributedEnd = property(_WMX3ApiPython.ApiBufferCondition_arg_commandDistributedEnd_get, _WMX3ApiPython.ApiBufferCondition_arg_commandDistributedEnd_set)
    arg_remainingTime = property(_WMX3ApiPython.ApiBufferCondition_arg_remainingTime_get, _WMX3ApiPython.ApiBufferCondition_arg_remainingTime_set)
    arg_remainingDistance = property(_WMX3ApiPython.ApiBufferCondition_arg_remainingDistance_get, _WMX3ApiPython.ApiBufferCondition_arg_remainingDistance_set)
    arg_completedTime = property(_WMX3ApiPython.ApiBufferCondition_arg_completedTime_get, _WMX3ApiPython.ApiBufferCondition_arg_completedTime_set)
    arg_completedDistance = property(_WMX3ApiPython.ApiBufferCondition_arg_completedDistance_get, _WMX3ApiPython.ApiBufferCondition_arg_completedDistance_set)
    arg_distanceToTarget = property(_WMX3ApiPython.ApiBufferCondition_arg_distanceToTarget_get, _WMX3ApiPython.ApiBufferCondition_arg_distanceToTarget_set)
    arg_decelerationStarted = property(_WMX3ApiPython.ApiBufferCondition_arg_decelerationStarted_get, _WMX3ApiPython.ApiBufferCondition_arg_decelerationStarted_set)
    arg_axisIdle = property(_WMX3ApiPython.ApiBufferCondition_arg_axisIdle_get, _WMX3ApiPython.ApiBufferCondition_arg_axisIdle_set)
    arg_motionStarted = property(_WMX3ApiPython.ApiBufferCondition_arg_motionStarted_get, _WMX3ApiPython.ApiBufferCondition_arg_motionStarted_set)
    arg_motionStartedOverrideReady = property(_WMX3ApiPython.ApiBufferCondition_arg_motionStartedOverrideReady_get, _WMX3ApiPython.ApiBufferCondition_arg_motionStartedOverrideReady_set)
    arg_event = property(_WMX3ApiPython.ApiBufferCondition_arg_event_get, _WMX3ApiPython.ApiBufferCondition_arg_event_set)

    def __init__(self):
        _WMX3ApiPython.ApiBufferCondition_swiginit(self, _WMX3ApiPython.new_ApiBufferCondition())
    __swig_destroy__ = _WMX3ApiPython.delete_ApiBufferCondition

# Register ApiBufferCondition in _WMX3ApiPython:
_WMX3ApiPython.ApiBufferCondition_swigregister(ApiBufferCondition)
class ApiBufferErrorLog(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def GetData(self, apiBufferErrorLog):
        return _WMX3ApiPython.ApiBufferErrorLog_GetData(self, apiBufferErrorLog)

    def SetData(self, apiBufferErrorLog):
        return _WMX3ApiPython.ApiBufferErrorLog_SetData(self, apiBufferErrorLog)
    execBlockNumber = property(_WMX3ApiPython.ApiBufferErrorLog_execBlockNumber_get, _WMX3ApiPython.ApiBufferErrorLog_execBlockNumber_set)
    errorCode = property(_WMX3ApiPython.ApiBufferErrorLog_errorCode_get, _WMX3ApiPython.ApiBufferErrorLog_errorCode_set)

    def __init__(self):
        _WMX3ApiPython.ApiBufferErrorLog_swiginit(self, _WMX3ApiPython.new_ApiBufferErrorLog())
    __swig_destroy__ = _WMX3ApiPython.delete_ApiBufferErrorLog

# Register ApiBufferErrorLog in _WMX3ApiPython:
_WMX3ApiPython.ApiBufferErrorLog_swigregister(ApiBufferErrorLog)
class ApiBufferStatus(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def GetData(self, apiBufferStatus):
        return _WMX3ApiPython.ApiBufferStatus_GetData(self, apiBufferStatus)

    def SetData(self, apiBufferStatus):
        return _WMX3ApiPython.ApiBufferStatus_SetData(self, apiBufferStatus)
    state = property(_WMX3ApiPython.ApiBufferStatus_state_get, _WMX3ApiPython.ApiBufferStatus_state_set)
    blockCount = property(_WMX3ApiPython.ApiBufferStatus_blockCount_get, _WMX3ApiPython.ApiBufferStatus_blockCount_set)
    remainingBlockCount = property(_WMX3ApiPython.ApiBufferStatus_remainingBlockCount_get, _WMX3ApiPython.ApiBufferStatus_remainingBlockCount_set)
    bufferSize = property(_WMX3ApiPython.ApiBufferStatus_bufferSize_get, _WMX3ApiPython.ApiBufferStatus_bufferSize_set)
    freeSize = property(_WMX3ApiPython.ApiBufferStatus_freeSize_get, _WMX3ApiPython.ApiBufferStatus_freeSize_set)
    execBlockCount = property(_WMX3ApiPython.ApiBufferStatus_execBlockCount_get, _WMX3ApiPython.ApiBufferStatus_execBlockCount_set)
    errorCount = property(_WMX3ApiPython.ApiBufferStatus_errorCount_get, _WMX3ApiPython.ApiBufferStatus_errorCount_set)
    errorLog = property(_WMX3ApiPython.ApiBufferStatus_errorLog_get, _WMX3ApiPython.ApiBufferStatus_errorLog_set)

    def SetErrorLog(self, index, value):
        return _WMX3ApiPython.ApiBufferStatus_SetErrorLog(self, index, value)

    def GetErrorLog(self, index):
        return _WMX3ApiPython.ApiBufferStatus_GetErrorLog(self, index)
    watchError = property(_WMX3ApiPython.ApiBufferStatus_watchError_get, _WMX3ApiPython.ApiBufferStatus_watchError_set)
    watchErrorCode = property(_WMX3ApiPython.ApiBufferStatus_watchErrorCode_get, _WMX3ApiPython.ApiBufferStatus_watchErrorCode_set)
    watchErrorAxis = property(_WMX3ApiPython.ApiBufferStatus_watchErrorAxis_get, _WMX3ApiPython.ApiBufferStatus_watchErrorAxis_set)

    def __init__(self):
        _WMX3ApiPython.ApiBufferStatus_swiginit(self, _WMX3ApiPython.new_ApiBufferStatus())
    __swig_destroy__ = _WMX3ApiPython.delete_ApiBufferStatus

# Register ApiBufferStatus in _WMX3ApiPython:
_WMX3ApiPython.ApiBufferStatus_swigregister(ApiBufferStatus)
class ApiBufferOptions(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def GetData(self, apiBufferOptions):
        return _WMX3ApiPython.ApiBufferOptions_GetData(self, apiBufferOptions)

    def SetData(self, apiBufferOptions):
        return _WMX3ApiPython.ApiBufferOptions_SetData(self, apiBufferOptions)
    stopOnError = property(_WMX3ApiPython.ApiBufferOptions_stopOnError_get, _WMX3ApiPython.ApiBufferOptions_stopOnError_set)
    autoRewind = property(_WMX3ApiPython.ApiBufferOptions_autoRewind_get, _WMX3ApiPython.ApiBufferOptions_autoRewind_set)
    stopOnLastBlock = property(_WMX3ApiPython.ApiBufferOptions_stopOnLastBlock_get, _WMX3ApiPython.ApiBufferOptions_stopOnLastBlock_set)

    def __init__(self):
        _WMX3ApiPython.ApiBufferOptions_swiginit(self, _WMX3ApiPython.new_ApiBufferOptions())
    __swig_destroy__ = _WMX3ApiPython.delete_ApiBufferOptions

# Register ApiBufferOptions in _WMX3ApiPython:
_WMX3ApiPython.ApiBufferOptions_swigregister(ApiBufferOptions)
class ApiBufferWatch(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def GetData(self, apiBufferWatch):
        return _WMX3ApiPython.ApiBufferWatch_GetData(self, apiBufferWatch)

    def SetData(self, apiBufferWatch):
        return _WMX3ApiPython.ApiBufferWatch_SetData(self, apiBufferWatch)
    enableWatch = property(_WMX3ApiPython.ApiBufferWatch_enableWatch_get, _WMX3ApiPython.ApiBufferWatch_enableWatch_set)
    watchAxes = property(_WMX3ApiPython.ApiBufferWatch_watchAxes_get, _WMX3ApiPython.ApiBufferWatch_watchAxes_set)
    enableWatchTriggerRoutine = property(_WMX3ApiPython.ApiBufferWatch_enableWatchTriggerRoutine_get, _WMX3ApiPython.ApiBufferWatch_enableWatchTriggerRoutine_set)
    watchTriggerRoutineChannel = property(_WMX3ApiPython.ApiBufferWatch_watchTriggerRoutineChannel_get, _WMX3ApiPython.ApiBufferWatch_watchTriggerRoutineChannel_set)

    def __init__(self):
        _WMX3ApiPython.ApiBufferWatch_swiginit(self, _WMX3ApiPython.new_ApiBufferWatch())
    __swig_destroy__ = _WMX3ApiPython.delete_ApiBufferWatch

# Register ApiBufferWatch in _WMX3ApiPython:
_WMX3ApiPython.ApiBufferWatch_swigregister(ApiBufferWatch)
class ApiBufferEventOutputFunctionArguments_StartAPIBuffer(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    channel = property(_WMX3ApiPython.ApiBufferEventOutputFunctionArguments_StartAPIBuffer_channel_get, _WMX3ApiPython.ApiBufferEventOutputFunctionArguments_StartAPIBuffer_channel_set)

    def __init__(self):
        _WMX3ApiPython.ApiBufferEventOutputFunctionArguments_StartAPIBuffer_swiginit(self, _WMX3ApiPython.new_ApiBufferEventOutputFunctionArguments_StartAPIBuffer())
    __swig_destroy__ = _WMX3ApiPython.delete_ApiBufferEventOutputFunctionArguments_StartAPIBuffer

# Register ApiBufferEventOutputFunctionArguments_StartAPIBuffer in _WMX3ApiPython:
_WMX3ApiPython.ApiBufferEventOutputFunctionArguments_StartAPIBuffer_swigregister(ApiBufferEventOutputFunctionArguments_StartAPIBuffer)
class ApiBufferEventOutputFunctionArguments_HaltAPIBuffer(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    channel = property(_WMX3ApiPython.ApiBufferEventOutputFunctionArguments_HaltAPIBuffer_channel_get, _WMX3ApiPython.ApiBufferEventOutputFunctionArguments_HaltAPIBuffer_channel_set)

    def __init__(self):
        _WMX3ApiPython.ApiBufferEventOutputFunctionArguments_HaltAPIBuffer_swiginit(self, _WMX3ApiPython.new_ApiBufferEventOutputFunctionArguments_HaltAPIBuffer())
    __swig_destroy__ = _WMX3ApiPython.delete_ApiBufferEventOutputFunctionArguments_HaltAPIBuffer

# Register ApiBufferEventOutputFunctionArguments_HaltAPIBuffer in _WMX3ApiPython:
_WMX3ApiPython.ApiBufferEventOutputFunctionArguments_HaltAPIBuffer_swigregister(ApiBufferEventOutputFunctionArguments_HaltAPIBuffer)
class ApiBufferEventOutputType(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    StartAPIBuffer = _WMX3ApiPython.ApiBufferEventOutputType_StartAPIBuffer
    HaltAPIBuffer = _WMX3ApiPython.ApiBufferEventOutputType_HaltAPIBuffer

    def __init__(self):
        _WMX3ApiPython.ApiBufferEventOutputType_swiginit(self, _WMX3ApiPython.new_ApiBufferEventOutputType())
    __swig_destroy__ = _WMX3ApiPython.delete_ApiBufferEventOutputType

# Register ApiBufferEventOutputType in _WMX3ApiPython:
_WMX3ApiPython.ApiBufferEventOutputType_swigregister(ApiBufferEventOutputType)
class ApiBufferEventOutput(EventOutput):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _WMX3ApiPython.ApiBufferEventOutput_swiginit(self, _WMX3ApiPython.new_ApiBufferEventOutput())
    type = property(_WMX3ApiPython.ApiBufferEventOutput_type_get, _WMX3ApiPython.ApiBufferEventOutput_type_set)

    def GetOutputModuleId(self):
        return _WMX3ApiPython.ApiBufferEventOutput_GetOutputModuleId(self)

    def GetOutputData(self, buff, buffSize, dataSize):
        return _WMX3ApiPython.ApiBufferEventOutput_GetOutputData(self, buff, buffSize, dataSize)

    def SetOutputData(self, moduleId, data, dataSize):
        return _WMX3ApiPython.ApiBufferEventOutput_SetOutputData(self, moduleId, data, dataSize)
    startAPIBuffer = property(_WMX3ApiPython.ApiBufferEventOutput_startAPIBuffer_get, _WMX3ApiPython.ApiBufferEventOutput_startAPIBuffer_set)
    haltAPIBuffer = property(_WMX3ApiPython.ApiBufferEventOutput_haltAPIBuffer_get, _WMX3ApiPython.ApiBufferEventOutput_haltAPIBuffer_set)
    __swig_destroy__ = _WMX3ApiPython.delete_ApiBufferEventOutput

# Register ApiBufferEventOutput in _WMX3ApiPython:
_WMX3ApiPython.ApiBufferEventOutput_swigregister(ApiBufferEventOutput)
class ApiBuffer(object):
    r"""ApiBuffer.rtdll Ver.3.5.0.0 is required to use."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""ApiBuffer.rtdll Ver.3.5.0.0 is required to use.ApiBuffer.rtdll Ver.3.5.0.0 is required to use."""
        _WMX3ApiPython.ApiBuffer_swiginit(self, _WMX3ApiPython.new_ApiBuffer(*args))
    __swig_destroy__ = _WMX3ApiPython.delete_ApiBuffer

    @staticmethod
    def ErrorToString(errCode):
        return _WMX3ApiPython.ApiBuffer_ErrorToString(errCode)

    @staticmethod
    def ApiLogToString(pLogData, logDataSize):
        return _WMX3ApiPython.ApiBuffer_ApiLogToString(pLogData, logDataSize)

    @staticmethod
    def GetLibVersion():
        return _WMX3ApiPython.ApiBuffer_GetLibVersion()

    def IsDeviceValid(self):
        return _WMX3ApiPython.ApiBuffer_IsDeviceValid(self)

    def GetVersion(self):
        return _WMX3ApiPython.ApiBuffer_GetVersion(self)

    def CreateApiBuffer(self, *args):
        return _WMX3ApiPython.ApiBuffer_CreateApiBuffer(self, *args)

    def FreeApiBuffer(self, channel):
        return _WMX3ApiPython.ApiBuffer_FreeApiBuffer(self, channel)

    def StartRecordBufferChannel(self, channel):
        return _WMX3ApiPython.ApiBuffer_StartRecordBufferChannel(self, channel)

    def EndRecordBufferChannel(self):
        return _WMX3ApiPython.ApiBuffer_EndRecordBufferChannel(self)

    def GetRecordingBufferChannel(self):
        channel = intp()
        enable = uintp()
        ret = _WMX3ApiPython.ApiBuffer_GetRecordingBufferChannel(self, channel, enable)
        return ret, channel.value(), enable.value()



    def Execute(self, channel):
        return _WMX3ApiPython.ApiBuffer_Execute(self, channel)

    def SetOptions(self, channel, pOptions):
        return _WMX3ApiPython.ApiBuffer_SetOptions(self, channel, pOptions)

    def GetOptions(self, channel):
        pOptions = ApiBufferOptions()
        ret = _WMX3ApiPython.ApiBuffer_GetOptions(self, channel, pOptions)
        return ret, pOptions



    def Halt(self, channel):
        return _WMX3ApiPython.ApiBuffer_Halt(self, channel)

    def Clear(self, channel):
        return _WMX3ApiPython.ApiBuffer_Clear(self, channel)

    def Rewind(self, channel):
        return _WMX3ApiPython.ApiBuffer_Rewind(self, channel)

    def GetStatus(self, channel):
        status = ApiBufferStatus()
        ret = _WMX3ApiPython.ApiBuffer_GetStatus(self, channel, status)
        return ret, status



    def SetWatch(self, channel, pWatch):
        return _WMX3ApiPython.ApiBuffer_SetWatch(self, channel, pWatch)

    def GetWatch(self, channel):
        watch = ApiBufferWatch()
        ret = _WMX3ApiPython.ApiBuffer_GetWatch(self, channel, watch)
        return ret, watch



    def Sleep(self, milliseconds):
        return _WMX3ApiPython.ApiBuffer_Sleep(self, milliseconds)

    def Wait(self, axis):
        return _WMX3ApiPython.ApiBuffer_Wait(self, axis)

    def Wait_AxisSel(self, pAxisSelection):
        return _WMX3ApiPython.ApiBuffer_Wait_AxisSel(self, pAxisSelection)

    def Wait_ApiBufferCondition(self, condition):
        return _WMX3ApiPython.ApiBuffer_Wait_ApiBufferCondition(self, condition)

    def FlowIf(self, *args):
        return _WMX3ApiPython.ApiBuffer_FlowIf(self, *args)

    def FlowElseIf(self, condition):
        return _WMX3ApiPython.ApiBuffer_FlowElseIf(self, condition)

    def FlowElse(self):
        return _WMX3ApiPython.ApiBuffer_FlowElse(self)

    def FlowEndIf(self):
        return _WMX3ApiPython.ApiBuffer_FlowEndIf(self)

# Register ApiBuffer in _WMX3ApiPython:
_WMX3ApiPython.ApiBuffer_swigregister(ApiBuffer)
class CyclicBufferErrorCode(ErrorCode):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    CreateBufferFailed = _WMX3ApiPython.CyclicBufferErrorCode_CreateBufferFailed
    BufferIsNull = _WMX3ApiPython.CyclicBufferErrorCode_BufferIsNull
    OpenBufferError = _WMX3ApiPython.CyclicBufferErrorCode_OpenBufferError
    BufferIsNotOpened = _WMX3ApiPython.CyclicBufferErrorCode_BufferIsNotOpened
    BufferSizeIsNotEnough = _WMX3ApiPython.CyclicBufferErrorCode_BufferSizeIsNotEnough
    LockBufferFailed = _WMX3ApiPython.CyclicBufferErrorCode_LockBufferFailed
    BufferAlreadyOpened = _WMX3ApiPython.CyclicBufferErrorCode_BufferAlreadyOpened

    def __init__(self):
        _WMX3ApiPython.CyclicBufferErrorCode_swiginit(self, _WMX3ApiPython.new_CyclicBufferErrorCode())
    __swig_destroy__ = _WMX3ApiPython.delete_CyclicBufferErrorCode

# Register CyclicBufferErrorCode in _WMX3ApiPython:
_WMX3ApiPython.CyclicBufferErrorCode_swigregister(CyclicBufferErrorCode)
class CyclicBufferCommandType(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    AbsolutePos = _WMX3ApiPython.CyclicBufferCommandType_AbsolutePos
    RelativePos = _WMX3ApiPython.CyclicBufferCommandType_RelativePos

    def __init__(self):
        _WMX3ApiPython.CyclicBufferCommandType_swiginit(self, _WMX3ApiPython.new_CyclicBufferCommandType())
    __swig_destroy__ = _WMX3ApiPython.delete_CyclicBufferCommandType

# Register CyclicBufferCommandType in _WMX3ApiPython:
_WMX3ApiPython.CyclicBufferCommandType_swigregister(CyclicBufferCommandType)
class CyclicBufferState(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Stopped = _WMX3ApiPython.CyclicBufferState_Stopped
    ExecutingCommand = _WMX3ApiPython.CyclicBufferState_ExecutingCommand
    WaitingForCommand = _WMX3ApiPython.CyclicBufferState_WaitingForCommand
    MaxAccError = _WMX3ApiPython.CyclicBufferState_MaxAccError

    def __init__(self):
        _WMX3ApiPython.CyclicBufferState_swiginit(self, _WMX3ApiPython.new_CyclicBufferState())
    __swig_destroy__ = _WMX3ApiPython.delete_CyclicBufferState

# Register CyclicBufferState in _WMX3ApiPython:
_WMX3ApiPython.CyclicBufferState_swigregister(CyclicBufferState)
class CyclicBufferSingleAxisCommand(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    type = property(_WMX3ApiPython.CyclicBufferSingleAxisCommand_type_get, _WMX3ApiPython.CyclicBufferSingleAxisCommand_type_set)

    def GetData(self, cyclicBufferSingleAxisCommand):
        return _WMX3ApiPython.CyclicBufferSingleAxisCommand_GetData(self, cyclicBufferSingleAxisCommand)
    command = property(_WMX3ApiPython.CyclicBufferSingleAxisCommand_command_get, _WMX3ApiPython.CyclicBufferSingleAxisCommand_command_set)
    intervalCycles = property(_WMX3ApiPython.CyclicBufferSingleAxisCommand_intervalCycles_get, _WMX3ApiPython.CyclicBufferSingleAxisCommand_intervalCycles_set)

    def __init__(self):
        _WMX3ApiPython.CyclicBufferSingleAxisCommand_swiginit(self, _WMX3ApiPython.new_CyclicBufferSingleAxisCommand())
    __swig_destroy__ = _WMX3ApiPython.delete_CyclicBufferSingleAxisCommand

# Register CyclicBufferSingleAxisCommand in _WMX3ApiPython:
_WMX3ApiPython.CyclicBufferSingleAxisCommand_swigregister(CyclicBufferSingleAxisCommand)
class CyclicBufferMultiAxisCommands(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def GetData(self, cyclicBufferMultiAxisCommands):
        return _WMX3ApiPython.CyclicBufferMultiAxisCommands_GetData(self, cyclicBufferMultiAxisCommands)
    cmd = property(_WMX3ApiPython.CyclicBufferMultiAxisCommands_cmd_get, _WMX3ApiPython.CyclicBufferMultiAxisCommands_cmd_set)

    def SetCmd(self, index, value):
        return _WMX3ApiPython.CyclicBufferMultiAxisCommands_SetCmd(self, index, value)

    def GetCmd(self, index):
        return _WMX3ApiPython.CyclicBufferMultiAxisCommands_GetCmd(self, index)

    def __init__(self):
        _WMX3ApiPython.CyclicBufferMultiAxisCommands_swiginit(self, _WMX3ApiPython.new_CyclicBufferMultiAxisCommands())
    __swig_destroy__ = _WMX3ApiPython.delete_CyclicBufferMultiAxisCommands

# Register CyclicBufferMultiAxisCommands in _WMX3ApiPython:
_WMX3ApiPython.CyclicBufferMultiAxisCommands_swigregister(CyclicBufferMultiAxisCommands)
class CyclicBufferSingleAxisOption(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    maxAcc = property(_WMX3ApiPython.CyclicBufferSingleAxisOption_maxAcc_get, _WMX3ApiPython.CyclicBufferSingleAxisOption_maxAcc_set)

    def GetData(self, cyclicBufferSingleAxisOption):
        return _WMX3ApiPython.CyclicBufferSingleAxisOption_GetData(self, cyclicBufferSingleAxisOption)

    def __init__(self):
        _WMX3ApiPython.CyclicBufferSingleAxisOption_swiginit(self, _WMX3ApiPython.new_CyclicBufferSingleAxisOption())
    __swig_destroy__ = _WMX3ApiPython.delete_CyclicBufferSingleAxisOption

# Register CyclicBufferSingleAxisOption in _WMX3ApiPython:
_WMX3ApiPython.CyclicBufferSingleAxisOption_swigregister(CyclicBufferSingleAxisOption)
class CyclicBufferMultiAxisOption(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def GetData(self, cyclicBufferMultiAxisOption):
        return _WMX3ApiPython.CyclicBufferMultiAxisOption_GetData(self, cyclicBufferMultiAxisOption)
    option = property(_WMX3ApiPython.CyclicBufferMultiAxisOption_option_get, _WMX3ApiPython.CyclicBufferMultiAxisOption_option_set)

    def SetOption(self, index, value):
        return _WMX3ApiPython.CyclicBufferMultiAxisOption_SetOption(self, index, value)

    def GetOption(self, index):
        return _WMX3ApiPython.CyclicBufferMultiAxisOption_GetOption(self, index)

    def __init__(self):
        _WMX3ApiPython.CyclicBufferMultiAxisOption_swiginit(self, _WMX3ApiPython.new_CyclicBufferMultiAxisOption())
    __swig_destroy__ = _WMX3ApiPython.delete_CyclicBufferMultiAxisOption

# Register CyclicBufferMultiAxisOption in _WMX3ApiPython:
_WMX3ApiPython.CyclicBufferMultiAxisOption_swigregister(CyclicBufferMultiAxisOption)
class CyclicBufferSingleAxisStatus(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    state = property(_WMX3ApiPython.CyclicBufferSingleAxisStatus_state_get, _WMX3ApiPython.CyclicBufferSingleAxisStatus_state_set)

    def GetData(self, cyclicBufferSingleAxisStatus):
        return _WMX3ApiPython.CyclicBufferSingleAxisStatus_GetData(self, cyclicBufferSingleAxisStatus)

    def SetData(self, cyclicBufferSingleAxisStatus):
        return _WMX3ApiPython.CyclicBufferSingleAxisStatus_SetData(self, cyclicBufferSingleAxisStatus)
    remainCount = property(_WMX3ApiPython.CyclicBufferSingleAxisStatus_remainCount_get, _WMX3ApiPython.CyclicBufferSingleAxisStatus_remainCount_set)
    availableCount = property(_WMX3ApiPython.CyclicBufferSingleAxisStatus_availableCount_get, _WMX3ApiPython.CyclicBufferSingleAxisStatus_availableCount_set)

    def __init__(self):
        _WMX3ApiPython.CyclicBufferSingleAxisStatus_swiginit(self, _WMX3ApiPython.new_CyclicBufferSingleAxisStatus())
    __swig_destroy__ = _WMX3ApiPython.delete_CyclicBufferSingleAxisStatus

# Register CyclicBufferSingleAxisStatus in _WMX3ApiPython:
_WMX3ApiPython.CyclicBufferSingleAxisStatus_swigregister(CyclicBufferSingleAxisStatus)
class CyclicBufferMultiAxisStatus(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def GetData(self, cyclicBufferMultiAxisStatus):
        return _WMX3ApiPython.CyclicBufferMultiAxisStatus_GetData(self, cyclicBufferMultiAxisStatus)

    def SetData(self, cyclicBufferMultiAxisStatus):
        return _WMX3ApiPython.CyclicBufferMultiAxisStatus_SetData(self, cyclicBufferMultiAxisStatus)
    status = property(_WMX3ApiPython.CyclicBufferMultiAxisStatus_status_get, _WMX3ApiPython.CyclicBufferMultiAxisStatus_status_set)

    def SetStatus(self, index, value):
        return _WMX3ApiPython.CyclicBufferMultiAxisStatus_SetStatus(self, index, value)

    def GetStatus(self, index):
        return _WMX3ApiPython.CyclicBufferMultiAxisStatus_GetStatus(self, index)

    def __init__(self):
        _WMX3ApiPython.CyclicBufferMultiAxisStatus_swiginit(self, _WMX3ApiPython.new_CyclicBufferMultiAxisStatus())
    __swig_destroy__ = _WMX3ApiPython.delete_CyclicBufferMultiAxisStatus

# Register CyclicBufferMultiAxisStatus in _WMX3ApiPython:
_WMX3ApiPython.CyclicBufferMultiAxisStatus_swigregister(CyclicBufferMultiAxisStatus)
class CyclicBuffer(object):
    r"""CyclicBuffer.rtdll Ver.3.5.0.0 is required to use."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""CyclicBuffer.rtdll Ver.3.5.0.0 is required to use.CyclicBuffer.rtdll Ver.3.5.0.0 is required to use."""
        _WMX3ApiPython.CyclicBuffer_swiginit(self, _WMX3ApiPython.new_CyclicBuffer(*args))
    __swig_destroy__ = _WMX3ApiPython.delete_CyclicBuffer

    @staticmethod
    def ErrorToString(errCode):
        return _WMX3ApiPython.CyclicBuffer_ErrorToString(errCode)

    @staticmethod
    def ApiLogToString(pLogData, logDataSize):
        return _WMX3ApiPython.CyclicBuffer_ApiLogToString(pLogData, logDataSize)

    @staticmethod
    def GetLibVersion():
        return _WMX3ApiPython.CyclicBuffer_GetLibVersion()

    def IsDeviceValid(self):
        return _WMX3ApiPython.CyclicBuffer_IsDeviceValid(self)

    def GetVersion(self):
        return _WMX3ApiPython.CyclicBuffer_GetVersion(self)

    def OpenCyclicBuffer(self, axis, numOfCycles):
        return _WMX3ApiPython.CyclicBuffer_OpenCyclicBuffer(self, axis, numOfCycles)

    def OpenCyclicBuffer_AxisSel(self, pAxisSelection, numOfCycles):
        return _WMX3ApiPython.CyclicBuffer_OpenCyclicBuffer_AxisSel(self, pAxisSelection, numOfCycles)

    def CloseCyclicBuffer(self, axis):
        return _WMX3ApiPython.CyclicBuffer_CloseCyclicBuffer(self, axis)

    def CloseCyclicBuffer_AxisSel(self, pAxisSelection):
        return _WMX3ApiPython.CyclicBuffer_CloseCyclicBuffer_AxisSel(self, pAxisSelection)

    def AddCommand(self, *args):
        return _WMX3ApiPython.CyclicBuffer_AddCommand(self, *args)

    def AddCommand_AxisSel(self, *args):
        return _WMX3ApiPython.CyclicBuffer_AddCommand_AxisSel(self, *args)

    def Execute(self, *args):
        return _WMX3ApiPython.CyclicBuffer_Execute(self, *args)

    def Execute_AxisSel(self, *args):
        return _WMX3ApiPython.CyclicBuffer_Execute_AxisSel(self, *args)

    def Abort(self, axis):
        return _WMX3ApiPython.CyclicBuffer_Abort(self, axis)

    def Abort_AxisSel(self, pAxisSelection):
        return _WMX3ApiPython.CyclicBuffer_Abort_AxisSel(self, pAxisSelection)

    def GetStatus(self, axis):
        GetPtr = CyclicBufferSingleAxisStatus()
        ret = _WMX3ApiPython.CyclicBuffer_GetStatus(self, axis, GetPtr)
        return ret, GetPtr



    def GetStatus_AxisSel(self, pAxisSelection):
        GetPtr = CyclicBufferMultiAxisStatus()
        ret = _WMX3ApiPython.CyclicBuffer_GetStatus_AxisSel(self, pAxisSelection, GetPtr)
        return ret, GetPtr



# Register CyclicBuffer in _WMX3ApiPython:
_WMX3ApiPython.CyclicBuffer_swigregister(CyclicBuffer)
class CompensationErrorCode(ErrorCode):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    PitchErrorCompensationIsEnabled = _WMX3ApiPython.CompensationErrorCode_PitchErrorCompensationIsEnabled
    PitchErrorCompensationIsDisabled = _WMX3ApiPython.CompensationErrorCode_PitchErrorCompensationIsDisabled
    PitchErrorCompensationDataIsNotSet = _WMX3ApiPython.CompensationErrorCode_PitchErrorCompensationDataIsNotSet
    BacklashCompensationIsEnabled = _WMX3ApiPython.CompensationErrorCode_BacklashCompensationIsEnabled
    BacklashCompensationIsDisabled = _WMX3ApiPython.CompensationErrorCode_BacklashCompensationIsDisabled
    PitchCountOutOfRange = _WMX3ApiPython.CompensationErrorCode_PitchCountOutOfRange
    PitchOriginIndexOutOfRange = _WMX3ApiPython.CompensationErrorCode_PitchOriginIndexOutOfRange
    PitchIntervalOutOfRange = _WMX3ApiPython.CompensationErrorCode_PitchIntervalOutOfRange
    EdgeDropoffDistanceOutOfRange = _WMX3ApiPython.CompensationErrorCode_EdgeDropoffDistanceOutOfRange
    CompensationAxisNotPosMode = _WMX3ApiPython.CompensationErrorCode_CompensationAxisNotPosMode
    ReferenceAxisNotPosMode = _WMX3ApiPython.CompensationErrorCode_ReferenceAxisNotPosMode

    def __init__(self):
        _WMX3ApiPython.CompensationErrorCode_swiginit(self, _WMX3ApiPython.new_CompensationErrorCode())
    __swig_destroy__ = _WMX3ApiPython.delete_CompensationErrorCode

# Register CompensationErrorCode in _WMX3ApiPython:
_WMX3ApiPython.CompensationErrorCode_swigregister(CompensationErrorCode)
class PitchErrorCompensationOriginPositionType(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Absolute = _WMX3ApiPython.PitchErrorCompensationOriginPositionType_Absolute
    Relative = _WMX3ApiPython.PitchErrorCompensationOriginPositionType_Relative

    def __init__(self):
        _WMX3ApiPython.PitchErrorCompensationOriginPositionType_swiginit(self, _WMX3ApiPython.new_PitchErrorCompensationOriginPositionType())
    __swig_destroy__ = _WMX3ApiPython.delete_PitchErrorCompensationOriginPositionType

# Register PitchErrorCompensationOriginPositionType in _WMX3ApiPython:
_WMX3ApiPython.PitchErrorCompensationOriginPositionType_swigregister(PitchErrorCompensationOriginPositionType)
class PitchErrorCompensationAlignmentType(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    AlignBeforeCompensation = _WMX3ApiPython.PitchErrorCompensationAlignmentType_AlignBeforeCompensation

    def __init__(self):
        _WMX3ApiPython.PitchErrorCompensationAlignmentType_swiginit(self, _WMX3ApiPython.new_PitchErrorCompensationAlignmentType())
    __swig_destroy__ = _WMX3ApiPython.delete_PitchErrorCompensationAlignmentType

# Register PitchErrorCompensationAlignmentType in _WMX3ApiPython:
_WMX3ApiPython.PitchErrorCompensationAlignmentType_swigregister(PitchErrorCompensationAlignmentType)
class PitchErrorCompensationOptions(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def GetData(self, pitchErrorCompensationOptions):
        return _WMX3ApiPython.PitchErrorCompensationOptions_GetData(self, pitchErrorCompensationOptions)

    def SetData(self, pitchErrorCompensationOptions):
        return _WMX3ApiPython.PitchErrorCompensationOptions_SetData(self, pitchErrorCompensationOptions)
    catchUpVelocity = property(_WMX3ApiPython.PitchErrorCompensationOptions_catchUpVelocity_get, _WMX3ApiPython.PitchErrorCompensationOptions_catchUpVelocity_set)
    catchUpAcc = property(_WMX3ApiPython.PitchErrorCompensationOptions_catchUpAcc_get, _WMX3ApiPython.PitchErrorCompensationOptions_catchUpAcc_set)
    originPositionType = property(_WMX3ApiPython.PitchErrorCompensationOptions_originPositionType_get, _WMX3ApiPython.PitchErrorCompensationOptions_originPositionType_set)
    alignmentType = property(_WMX3ApiPython.PitchErrorCompensationOptions_alignmentType_get, _WMX3ApiPython.PitchErrorCompensationOptions_alignmentType_set)
    preventCatchUpMotion = property(_WMX3ApiPython.PitchErrorCompensationOptions_preventCatchUpMotion_get, _WMX3ApiPython.PitchErrorCompensationOptions_preventCatchUpMotion_set)

    def __init__(self):
        _WMX3ApiPython.PitchErrorCompensationOptions_swiginit(self, _WMX3ApiPython.new_PitchErrorCompensationOptions())
    __swig_destroy__ = _WMX3ApiPython.delete_PitchErrorCompensationOptions

# Register PitchErrorCompensationOptions in _WMX3ApiPython:
_WMX3ApiPython.PitchErrorCompensationOptions_swigregister(PitchErrorCompensationOptions)
class PitchErrorCompensationData(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def GetData(self, pitchErrorCompensationData):
        return _WMX3ApiPython.PitchErrorCompensationData_GetData(self, pitchErrorCompensationData)

    def SetData(self, pitchErrorCompensationData):
        return _WMX3ApiPython.PitchErrorCompensationData_SetData(self, pitchErrorCompensationData)
    enable = property(_WMX3ApiPython.PitchErrorCompensationData_enable_get, _WMX3ApiPython.PitchErrorCompensationData_enable_set)
    pitchOriginPosition = property(_WMX3ApiPython.PitchErrorCompensationData_pitchOriginPosition_get, _WMX3ApiPython.PitchErrorCompensationData_pitchOriginPosition_set)
    pitchOriginIndex = property(_WMX3ApiPython.PitchErrorCompensationData_pitchOriginIndex_get, _WMX3ApiPython.PitchErrorCompensationData_pitchOriginIndex_set)
    pitchInterval = property(_WMX3ApiPython.PitchErrorCompensationData_pitchInterval_get, _WMX3ApiPython.PitchErrorCompensationData_pitchInterval_set)
    pitchIntervalDirection = property(_WMX3ApiPython.PitchErrorCompensationData_pitchIntervalDirection_get, _WMX3ApiPython.PitchErrorCompensationData_pitchIntervalDirection_set)
    pitchCount = property(_WMX3ApiPython.PitchErrorCompensationData_pitchCount_get, _WMX3ApiPython.PitchErrorCompensationData_pitchCount_set)
    edgeDropoffDistance = property(_WMX3ApiPython.PitchErrorCompensationData_edgeDropoffDistance_get, _WMX3ApiPython.PitchErrorCompensationData_edgeDropoffDistance_set)
    pitchCompensationValue = property(_WMX3ApiPython.PitchErrorCompensationData_pitchCompensationValue_get, _WMX3ApiPython.PitchErrorCompensationData_pitchCompensationValue_set)

    def SetPitchCompensationValue(self, index, value):
        return _WMX3ApiPython.PitchErrorCompensationData_SetPitchCompensationValue(self, index, value)

    def GetPitchCompensationValue(self, index):
        return _WMX3ApiPython.PitchErrorCompensationData_GetPitchCompensationValue(self, index)
    options = property(_WMX3ApiPython.PitchErrorCompensationData_options_get, _WMX3ApiPython.PitchErrorCompensationData_options_set)

    def __init__(self):
        _WMX3ApiPython.PitchErrorCompensationData_swiginit(self, _WMX3ApiPython.new_PitchErrorCompensationData())
    __swig_destroy__ = _WMX3ApiPython.delete_PitchErrorCompensationData

# Register PitchErrorCompensationData in _WMX3ApiPython:
_WMX3ApiPython.PitchErrorCompensationData_swigregister(PitchErrorCompensationData)
class TwoDPitchErrorCompensationData(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def GetData(self, twoDPitchErrorCompensationData):
        return _WMX3ApiPython.TwoDPitchErrorCompensationData_GetData(self, twoDPitchErrorCompensationData)

    def SetData(self, twoDPitchErrorCompensationData):
        return _WMX3ApiPython.TwoDPitchErrorCompensationData_SetData(self, twoDPitchErrorCompensationData)
    enable = property(_WMX3ApiPython.TwoDPitchErrorCompensationData_enable_get, _WMX3ApiPython.TwoDPitchErrorCompensationData_enable_set)
    axis = property(_WMX3ApiPython.TwoDPitchErrorCompensationData_axis_get, _WMX3ApiPython.TwoDPitchErrorCompensationData_axis_set)
    referenceAxis = property(_WMX3ApiPython.TwoDPitchErrorCompensationData_referenceAxis_get, _WMX3ApiPython.TwoDPitchErrorCompensationData_referenceAxis_set)

    def SetReferenceAxis(self, index, value):
        return _WMX3ApiPython.TwoDPitchErrorCompensationData_SetReferenceAxis(self, index, value)

    def GetReferenceAxis(self, index):
        return _WMX3ApiPython.TwoDPitchErrorCompensationData_GetReferenceAxis(self, index)
    pitchOriginPosition = property(_WMX3ApiPython.TwoDPitchErrorCompensationData_pitchOriginPosition_get, _WMX3ApiPython.TwoDPitchErrorCompensationData_pitchOriginPosition_set)

    def SetPitchOriginPosition(self, index, value):
        return _WMX3ApiPython.TwoDPitchErrorCompensationData_SetPitchOriginPosition(self, index, value)

    def GetPitchOriginPosition(self, index):
        return _WMX3ApiPython.TwoDPitchErrorCompensationData_GetPitchOriginPosition(self, index)
    pitchOriginIndex = property(_WMX3ApiPython.TwoDPitchErrorCompensationData_pitchOriginIndex_get, _WMX3ApiPython.TwoDPitchErrorCompensationData_pitchOriginIndex_set)

    def SetPitchOriginIndex(self, index, value):
        return _WMX3ApiPython.TwoDPitchErrorCompensationData_SetPitchOriginIndex(self, index, value)

    def GetPitchOriginIndex(self, index):
        return _WMX3ApiPython.TwoDPitchErrorCompensationData_GetPitchOriginIndex(self, index)
    pitchInterval = property(_WMX3ApiPython.TwoDPitchErrorCompensationData_pitchInterval_get, _WMX3ApiPython.TwoDPitchErrorCompensationData_pitchInterval_set)

    def SetPitchInterval(self, index, value):
        return _WMX3ApiPython.TwoDPitchErrorCompensationData_SetPitchInterval(self, index, value)

    def GetPitchInterval(self, index):
        return _WMX3ApiPython.TwoDPitchErrorCompensationData_GetPitchInterval(self, index)
    pitchCount = property(_WMX3ApiPython.TwoDPitchErrorCompensationData_pitchCount_get, _WMX3ApiPython.TwoDPitchErrorCompensationData_pitchCount_set)

    def SetPitchCount(self, index, value):
        return _WMX3ApiPython.TwoDPitchErrorCompensationData_SetPitchCount(self, index, value)

    def GetPitchCount(self, index):
        return _WMX3ApiPython.TwoDPitchErrorCompensationData_GetPitchCount(self, index)
    edgeDropoffDistance = property(_WMX3ApiPython.TwoDPitchErrorCompensationData_edgeDropoffDistance_get, _WMX3ApiPython.TwoDPitchErrorCompensationData_edgeDropoffDistance_set)

    def SetEdgeDropoffDistance(self, index, value):
        return _WMX3ApiPython.TwoDPitchErrorCompensationData_SetEdgeDropoffDistance(self, index, value)

    def GetEdgeDropoffDistance(self, index):
        return _WMX3ApiPython.TwoDPitchErrorCompensationData_GetEdgeDropoffDistance(self, index)
    pitchCompensationValue = property(_WMX3ApiPython.TwoDPitchErrorCompensationData_pitchCompensationValue_get, _WMX3ApiPython.TwoDPitchErrorCompensationData_pitchCompensationValue_set)

    def SetPitchCompensationValue(self, index1, index2, value):
        return _WMX3ApiPython.TwoDPitchErrorCompensationData_SetPitchCompensationValue(self, index1, index2, value)

    def GetPitchCompensationValue(self, index1, index2):
        return _WMX3ApiPython.TwoDPitchErrorCompensationData_GetPitchCompensationValue(self, index1, index2)
    options = property(_WMX3ApiPython.TwoDPitchErrorCompensationData_options_get, _WMX3ApiPython.TwoDPitchErrorCompensationData_options_set)

    def __init__(self):
        _WMX3ApiPython.TwoDPitchErrorCompensationData_swiginit(self, _WMX3ApiPython.new_TwoDPitchErrorCompensationData())
    __swig_destroy__ = _WMX3ApiPython.delete_TwoDPitchErrorCompensationData

# Register TwoDPitchErrorCompensationData in _WMX3ApiPython:
_WMX3ApiPython.TwoDPitchErrorCompensationData_swigregister(TwoDPitchErrorCompensationData)
class BacklashCompensationData(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def GetData(self, backlashCompensationData):
        return _WMX3ApiPython.BacklashCompensationData_GetData(self, backlashCompensationData)

    def SetData(self, backlashCompensationData):
        return _WMX3ApiPython.BacklashCompensationData_SetData(self, backlashCompensationData)
    enable = property(_WMX3ApiPython.BacklashCompensationData_enable_get, _WMX3ApiPython.BacklashCompensationData_enable_set)
    offsetDirection = property(_WMX3ApiPython.BacklashCompensationData_offsetDirection_get, _WMX3ApiPython.BacklashCompensationData_offsetDirection_set)
    backlashHigh = property(_WMX3ApiPython.BacklashCompensationData_backlashHigh_get, _WMX3ApiPython.BacklashCompensationData_backlashHigh_set)
    backlashLow = property(_WMX3ApiPython.BacklashCompensationData_backlashLow_get, _WMX3ApiPython.BacklashCompensationData_backlashLow_set)
    distanceHigh = property(_WMX3ApiPython.BacklashCompensationData_distanceHigh_get, _WMX3ApiPython.BacklashCompensationData_distanceHigh_set)
    distanceLow = property(_WMX3ApiPython.BacklashCompensationData_distanceLow_get, _WMX3ApiPython.BacklashCompensationData_distanceLow_set)

    def __init__(self):
        _WMX3ApiPython.BacklashCompensationData_swiginit(self, _WMX3ApiPython.new_BacklashCompensationData())
    __swig_destroy__ = _WMX3ApiPython.delete_BacklashCompensationData

# Register BacklashCompensationData in _WMX3ApiPython:
_WMX3ApiPython.BacklashCompensationData_swigregister(BacklashCompensationData)
class Compensation(object):
    r"""Compensation.rtdll Ver.3.5.0.0 is required to use."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""Compensation.rtdll Ver.3.5.0.0 is required to use.Compensation.rtdll Ver.3.5.0.0 is required to use."""
        _WMX3ApiPython.Compensation_swiginit(self, _WMX3ApiPython.new_Compensation(*args))
    __swig_destroy__ = _WMX3ApiPython.delete_Compensation

    @staticmethod
    def ErrorToString(errCode):
        return _WMX3ApiPython.Compensation_ErrorToString(errCode)

    @staticmethod
    def ApiLogToString(pLogData, logDataSize):
        return _WMX3ApiPython.Compensation_ApiLogToString(pLogData, logDataSize)

    @staticmethod
    def GetLibVersion():
        return _WMX3ApiPython.Compensation_GetLibVersion()

    def IsDeviceValid(self):
        return _WMX3ApiPython.Compensation_IsDeviceValid(self)

    def GetVersion(self):
        return _WMX3ApiPython.Compensation_GetVersion(self)

    def SetPitchErrorCompensation(self, axis, pitchErrCompData):
        return _WMX3ApiPython.Compensation_SetPitchErrorCompensation(self, axis, pitchErrCompData)

    def GetPitchErrorCompensation(self, axis):
        pitchErrCompData = PitchErrorCompensationData()
        ret = _WMX3ApiPython.Compensation_GetPitchErrorCompensation(self, axis, pitchErrCompData)
        return ret, pitchErrCompData



    def EnablePitchErrorCompensation(self, axis):
        return _WMX3ApiPython.Compensation_EnablePitchErrorCompensation(self, axis)

    def DisablePitchErrorCompensation(self, axis):
        return _WMX3ApiPython.Compensation_DisablePitchErrorCompensation(self, axis)

    def GetPitchErrorCompensationAtPosition(self, axis, pos):
        pCompensation = doublep()
        ret = _WMX3ApiPython.Compensation_GetPitchErrorCompensationAtPosition(self, axis, pos, pCompensation)
        return ret, pCompensation.value()



    def Set2DPitchErrorCompensation(self, channel, pitchErrCompData2D):
        return _WMX3ApiPython.Compensation_Set2DPitchErrorCompensation(self, channel, pitchErrCompData2D)

    def Get2DPitchErrorCompensation(self, channel):
        pitchErrCompData2D = TwoDPitchErrorCompensationData()
        ret = _WMX3ApiPython.Compensation_Get2DPitchErrorCompensation(self, channel, pitchErrCompData2D)
        return ret, pitchErrCompData2D



    def Enable2DPitchErrorCompensation(self, channel):
        return _WMX3ApiPython.Compensation_Enable2DPitchErrorCompensation(self, channel)

    def Disable2DPitchErrorCompensation(self, channel):
        return _WMX3ApiPython.Compensation_Disable2DPitchErrorCompensation(self, channel)

    def Get2DPitchErrorCompensationAtPosition(self, channel, refPos1, refPos2):
        pCompensation = doublep()
        ret = _WMX3ApiPython.Compensation_Get2DPitchErrorCompensationAtPosition(self, channel, refPos1, refPos2, pCompensation)
        return ret, pCompensation.value()



    def SetBacklashCompensation(self, axis, pBacklashCompData):
        return _WMX3ApiPython.Compensation_SetBacklashCompensation(self, axis, pBacklashCompData)

    def GetBacklashCompensation(self, axis):
        pBacklashCompData = BacklashCompensationData()
        ret = _WMX3ApiPython.Compensation_GetBacklashCompensation(self, axis, pBacklashCompData)
        return ret, pBacklashCompData



    def EnableBacklashCompensation(self, axis):
        return _WMX3ApiPython.Compensation_EnableBacklashCompensation(self, axis)

    def DisableBacklashCompensation(self, axis):
        return _WMX3ApiPython.Compensation_DisableBacklashCompensation(self, axis)

# Register Compensation in _WMX3ApiPython:
_WMX3ApiPython.Compensation_swigregister(Compensation)
class EventControl_PlannedVelocityDataArray(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, nelements):
        _WMX3ApiPython.EventControl_PlannedVelocityDataArray_swiginit(self, _WMX3ApiPython.new_EventControl_PlannedVelocityDataArray(nelements))
    __swig_destroy__ = _WMX3ApiPython.delete_EventControl_PlannedVelocityDataArray

    def __getitem__(self, index):
        return _WMX3ApiPython.EventControl_PlannedVelocityDataArray___getitem__(self, index)

    def __setitem__(self, index, value):
        return _WMX3ApiPython.EventControl_PlannedVelocityDataArray___setitem__(self, index, value)

    def cast(self):
        return _WMX3ApiPython.EventControl_PlannedVelocityDataArray_cast(self)

    @staticmethod
    def frompointer(t):
        return _WMX3ApiPython.EventControl_PlannedVelocityDataArray_frompointer(t)

# Register EventControl_PlannedVelocityDataArray in _WMX3ApiPython:
_WMX3ApiPython.EventControl_PlannedVelocityDataArray_swigregister(EventControl_PlannedVelocityDataArray)
class EventErrorCode(ErrorCode):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    MaxEventDefinitionsDefined = _WMX3ApiPython.EventErrorCode_MaxEventDefinitionsDefined
    MaxEventInputsDefined = _WMX3ApiPython.EventErrorCode_MaxEventInputsDefined
    MaxEventOutputsDefined = _WMX3ApiPython.EventErrorCode_MaxEventOutputsDefined
    MaxEventBitArrayUsed = _WMX3ApiPython.EventErrorCode_MaxEventBitArrayUsed
    IDOutOfRange = _WMX3ApiPython.EventErrorCode_IDOutOfRange
    IDNotDefined = _WMX3ApiPython.EventErrorCode_IDNotDefined
    IDBusyUpdating = _WMX3ApiPython.EventErrorCode_IDBusyUpdating
    ChannelUninitialized = _WMX3ApiPython.EventErrorCode_ChannelUninitialized
    IDInUse = _WMX3ApiPython.EventErrorCode_IDInUse
    HardTouchProbeChannelOutOfRange = _WMX3ApiPython.EventErrorCode_HardTouchProbeChannelOutOfRange
    EventInDataSizeOutOfRange = _WMX3ApiPython.EventErrorCode_EventInDataSizeOutOfRange
    EventOutDataSizeOutOfRange = _WMX3ApiPython.EventErrorCode_EventOutDataSizeOutOfRange
    EventConfigureOfModuleDataSizeOutOfRange = _WMX3ApiPython.EventErrorCode_EventConfigureOfModuleDataSizeOutOfRange
    EventNotDefined = _WMX3ApiPython.EventErrorCode_EventNotDefined
    EventInputModuleIdNotMatched = _WMX3ApiPython.EventErrorCode_EventInputModuleIdNotMatched
    EventOutputModuleIdNotMatched = _WMX3ApiPython.EventErrorCode_EventOutputModuleIdNotMatched
    EventInputDataAllocateFailed = _WMX3ApiPython.EventErrorCode_EventInputDataAllocateFailed
    EventOutputDataAllocateFailed = _WMX3ApiPython.EventErrorCode_EventOutputDataAllocateFailed
    GetFunctionDoesNotMatchSetFunction = _WMX3ApiPython.EventErrorCode_GetFunctionDoesNotMatchSetFunction
    ChannelEnabled = _WMX3ApiPython.EventErrorCode_ChannelEnabled
    InterruptIdForActiveChannelError = _WMX3ApiPython.EventErrorCode_InterruptIdForActiveChannelError
    InvalidModuleID = _WMX3ApiPython.EventErrorCode_InvalidModuleID
    EventIsEnabled = _WMX3ApiPython.EventErrorCode_EventIsEnabled
    EventIsClearing = _WMX3ApiPython.EventErrorCode_EventIsClearing
    SourceTypeOutOfRange = _WMX3ApiPython.EventErrorCode_SourceTypeOutOfRange
    PointCountOutOfRange = _WMX3ApiPython.EventErrorCode_PointCountOutOfRange
    IntervalOutOfRange = _WMX3ApiPython.EventErrorCode_IntervalOutOfRange

    def __init__(self):
        _WMX3ApiPython.EventErrorCode_swiginit(self, _WMX3ApiPython.new_EventErrorCode())
    __swig_destroy__ = _WMX3ApiPython.delete_EventErrorCode

# Register EventErrorCode in _WMX3ApiPython:
_WMX3ApiPython.EventErrorCode_swigregister(EventErrorCode)
class EventOption(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def SetData(self, eventOption):
        return _WMX3ApiPython.EventOption_SetData(self, eventOption)

    def GetData(self, eventOption):
        return _WMX3ApiPython.EventOption_GetData(self, eventOption)
    singleShot = property(_WMX3ApiPython.EventOption_singleShot_get, _WMX3ApiPython.EventOption_singleShot_set)
    disableAfterActivate = property(_WMX3ApiPython.EventOption_disableAfterActivate_get, _WMX3ApiPython.EventOption_disableAfterActivate_set)
    enable = property(_WMX3ApiPython.EventOption_enable_get, _WMX3ApiPython.EventOption_enable_set)

    def __init__(self):
        _WMX3ApiPython.EventOption_swiginit(self, _WMX3ApiPython.new_EventOption())
    __swig_destroy__ = _WMX3ApiPython.delete_EventOption

# Register EventOption in _WMX3ApiPython:
_WMX3ApiPython.EventOption_swigregister(EventOption)
class CustomEventOption(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def SetData(self, customEventOption):
        return _WMX3ApiPython.CustomEventOption_SetData(self, customEventOption)

    def GetData(self, customEventOption):
        return _WMX3ApiPython.CustomEventOption_GetData(self, customEventOption)
    option = property(_WMX3ApiPython.CustomEventOption_option_get, _WMX3ApiPython.CustomEventOption_option_set)
    initialState = property(_WMX3ApiPython.CustomEventOption_initialState_get, _WMX3ApiPython.CustomEventOption_initialState_set)

    def __init__(self):
        _WMX3ApiPython.CustomEventOption_swiginit(self, _WMX3ApiPython.new_CustomEventOption())
    __swig_destroy__ = _WMX3ApiPython.delete_CustomEventOption

# Register CustomEventOption in _WMX3ApiPython:
_WMX3ApiPython.CustomEventOption_swigregister(CustomEventOption)
class AllEventID(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def GetData(self, allEventID):
        return _WMX3ApiPython.AllEventID_GetData(self, allEventID)

    def SetData(self, allEventID):
        return _WMX3ApiPython.AllEventID_SetData(self, allEventID)
    count = property(_WMX3ApiPython.AllEventID_count_get, _WMX3ApiPython.AllEventID_count_set)
    id = property(_WMX3ApiPython.AllEventID_id_get, _WMX3ApiPython.AllEventID_id_set)

    def SetId(self, index, value):
        return _WMX3ApiPython.AllEventID_SetId(self, index, value)

    def GetId(self, index):
        return _WMX3ApiPython.AllEventID_GetId(self, index)

    def __init__(self):
        _WMX3ApiPython.AllEventID_swiginit(self, _WMX3ApiPython.new_AllEventID())
    __swig_destroy__ = _WMX3ApiPython.delete_AllEventID

# Register AllEventID in _WMX3ApiPython:
_WMX3ApiPython.AllEventID_swigregister(AllEventID)
class EventApiEventInputType(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    PyNone = _WMX3ApiPython.EventApiEventInputType_PyNone
    AnotherEvent = _WMX3ApiPython.EventApiEventInputType_AnotherEvent
    DelayAnotherEvent = _WMX3ApiPython.EventApiEventInputType_DelayAnotherEvent
    OrEvent = _WMX3ApiPython.EventApiEventInputType_OrEvent
    AndEvent = _WMX3ApiPython.EventApiEventInputType_AndEvent
    XorEvent = _WMX3ApiPython.EventApiEventInputType_XorEvent
    DeviceCloseEvent = _WMX3ApiPython.EventApiEventInputType_DeviceCloseEvent
    DeviceTimeoutEvent = _WMX3ApiPython.EventApiEventInputType_DeviceTimeoutEvent

    def __init__(self):
        _WMX3ApiPython.EventApiEventInputType_swiginit(self, _WMX3ApiPython.new_EventApiEventInputType())
    __swig_destroy__ = _WMX3ApiPython.delete_EventApiEventInputType

# Register EventApiEventInputType in _WMX3ApiPython:
_WMX3ApiPython.EventApiEventInputType_swigregister(EventApiEventInputType)
class EventApiEventInput(EventInput):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    inputFunction = property(_WMX3ApiPython.EventApiEventInput_inputFunction_get, _WMX3ApiPython.EventApiEventInput_inputFunction_set)

    def __init__(self):
        _WMX3ApiPython.EventApiEventInput_swiginit(self, _WMX3ApiPython.new_EventApiEventInput())

    def GetInputModuleId(self):
        return _WMX3ApiPython.EventApiEventInput_GetInputModuleId(self)

    def GetInputData(self, buff, buffSize, dataSize, initialState):
        return _WMX3ApiPython.EventApiEventInput_GetInputData(self, buff, buffSize, dataSize, initialState)

    def SetInputData(self, moduleId, data, dataSize):
        return _WMX3ApiPython.EventApiEventInput_SetInputData(self, moduleId, data, dataSize)
    __swig_destroy__ = _WMX3ApiPython.delete_EventApiEventInput

# Register EventApiEventInput in _WMX3ApiPython:
_WMX3ApiPython.EventApiEventInput_swigregister(EventApiEventInput)
class BaseEventApiEventInputFunctionArguments_Multi(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    eventID = property(_WMX3ApiPython.BaseEventApiEventInputFunctionArguments_Multi_eventID_get, _WMX3ApiPython.BaseEventApiEventInputFunctionArguments_Multi_eventID_set)
    invert = property(_WMX3ApiPython.BaseEventApiEventInputFunctionArguments_Multi_invert_get, _WMX3ApiPython.BaseEventApiEventInputFunctionArguments_Multi_invert_set)
    invertResult = property(_WMX3ApiPython.BaseEventApiEventInputFunctionArguments_Multi_invertResult_get, _WMX3ApiPython.BaseEventApiEventInputFunctionArguments_Multi_invertResult_set)

    def SetEventID(self, index, value):
        return _WMX3ApiPython.BaseEventApiEventInputFunctionArguments_Multi_SetEventID(self, index, value)

    def GetEventID(self, index):
        return _WMX3ApiPython.BaseEventApiEventInputFunctionArguments_Multi_GetEventID(self, index)

    def SetInvert(self, index, value):
        return _WMX3ApiPython.BaseEventApiEventInputFunctionArguments_Multi_SetInvert(self, index, value)

    def GetInvert(self, index):
        return _WMX3ApiPython.BaseEventApiEventInputFunctionArguments_Multi_GetInvert(self, index)

    def __init__(self):
        _WMX3ApiPython.BaseEventApiEventInputFunctionArguments_Multi_swiginit(self, _WMX3ApiPython.new_BaseEventApiEventInputFunctionArguments_Multi())
    __swig_destroy__ = _WMX3ApiPython.delete_BaseEventApiEventInputFunctionArguments_Multi

# Register BaseEventApiEventInputFunctionArguments_Multi in _WMX3ApiPython:
_WMX3ApiPython.BaseEventApiEventInputFunctionArguments_Multi_swigregister(BaseEventApiEventInputFunctionArguments_Multi)
class EventApiEventInputFunctionArguments_None(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    reserved = property(_WMX3ApiPython.EventApiEventInputFunctionArguments_None_reserved_get, _WMX3ApiPython.EventApiEventInputFunctionArguments_None_reserved_set)

    def __init__(self):
        _WMX3ApiPython.EventApiEventInputFunctionArguments_None_swiginit(self, _WMX3ApiPython.new_EventApiEventInputFunctionArguments_None())
    __swig_destroy__ = _WMX3ApiPython.delete_EventApiEventInputFunctionArguments_None

# Register EventApiEventInputFunctionArguments_None in _WMX3ApiPython:
_WMX3ApiPython.EventApiEventInputFunctionArguments_None_swigregister(EventApiEventInputFunctionArguments_None)
class EventApiEventInputFunctionArguments_AnotherEvent(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    eventID = property(_WMX3ApiPython.EventApiEventInputFunctionArguments_AnotherEvent_eventID_get, _WMX3ApiPython.EventApiEventInputFunctionArguments_AnotherEvent_eventID_set)
    invert = property(_WMX3ApiPython.EventApiEventInputFunctionArguments_AnotherEvent_invert_get, _WMX3ApiPython.EventApiEventInputFunctionArguments_AnotherEvent_invert_set)

    def __init__(self):
        _WMX3ApiPython.EventApiEventInputFunctionArguments_AnotherEvent_swiginit(self, _WMX3ApiPython.new_EventApiEventInputFunctionArguments_AnotherEvent())
    __swig_destroy__ = _WMX3ApiPython.delete_EventApiEventInputFunctionArguments_AnotherEvent

# Register EventApiEventInputFunctionArguments_AnotherEvent in _WMX3ApiPython:
_WMX3ApiPython.EventApiEventInputFunctionArguments_AnotherEvent_swigregister(EventApiEventInputFunctionArguments_AnotherEvent)
class EventApiEventInputFunctionArguments_DelayAnotherEvent(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    eventID = property(_WMX3ApiPython.EventApiEventInputFunctionArguments_DelayAnotherEvent_eventID_get, _WMX3ApiPython.EventApiEventInputFunctionArguments_DelayAnotherEvent_eventID_set)
    invert = property(_WMX3ApiPython.EventApiEventInputFunctionArguments_DelayAnotherEvent_invert_get, _WMX3ApiPython.EventApiEventInputFunctionArguments_DelayAnotherEvent_invert_set)
    delayTime = property(_WMX3ApiPython.EventApiEventInputFunctionArguments_DelayAnotherEvent_delayTime_get, _WMX3ApiPython.EventApiEventInputFunctionArguments_DelayAnotherEvent_delayTime_set)

    def __init__(self):
        _WMX3ApiPython.EventApiEventInputFunctionArguments_DelayAnotherEvent_swiginit(self, _WMX3ApiPython.new_EventApiEventInputFunctionArguments_DelayAnotherEvent())
    __swig_destroy__ = _WMX3ApiPython.delete_EventApiEventInputFunctionArguments_DelayAnotherEvent

# Register EventApiEventInputFunctionArguments_DelayAnotherEvent in _WMX3ApiPython:
_WMX3ApiPython.EventApiEventInputFunctionArguments_DelayAnotherEvent_swigregister(EventApiEventInputFunctionArguments_DelayAnotherEvent)
class EventApiEventInputFunctionArguments_OrEvent(BaseEventApiEventInputFunctionArguments_Multi):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _WMX3ApiPython.EventApiEventInputFunctionArguments_OrEvent_swiginit(self, _WMX3ApiPython.new_EventApiEventInputFunctionArguments_OrEvent())
    __swig_destroy__ = _WMX3ApiPython.delete_EventApiEventInputFunctionArguments_OrEvent

# Register EventApiEventInputFunctionArguments_OrEvent in _WMX3ApiPython:
_WMX3ApiPython.EventApiEventInputFunctionArguments_OrEvent_swigregister(EventApiEventInputFunctionArguments_OrEvent)
class EventApiEventInputFunctionArguments_AndEvent(BaseEventApiEventInputFunctionArguments_Multi):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _WMX3ApiPython.EventApiEventInputFunctionArguments_AndEvent_swiginit(self, _WMX3ApiPython.new_EventApiEventInputFunctionArguments_AndEvent())
    __swig_destroy__ = _WMX3ApiPython.delete_EventApiEventInputFunctionArguments_AndEvent

# Register EventApiEventInputFunctionArguments_AndEvent in _WMX3ApiPython:
_WMX3ApiPython.EventApiEventInputFunctionArguments_AndEvent_swigregister(EventApiEventInputFunctionArguments_AndEvent)
class EventApiEventInputFunctionArguments_XorrEvent(BaseEventApiEventInputFunctionArguments_Multi):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _WMX3ApiPython.EventApiEventInputFunctionArguments_XorrEvent_swiginit(self, _WMX3ApiPython.new_EventApiEventInputFunctionArguments_XorrEvent())
    __swig_destroy__ = _WMX3ApiPython.delete_EventApiEventInputFunctionArguments_XorrEvent

# Register EventApiEventInputFunctionArguments_XorrEvent in _WMX3ApiPython:
_WMX3ApiPython.EventApiEventInputFunctionArguments_XorrEvent_swigregister(EventApiEventInputFunctionArguments_XorrEvent)
class EventApiEventInputFunctionArguments_DeviceCloseEvent(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    deviceId = property(_WMX3ApiPython.EventApiEventInputFunctionArguments_DeviceCloseEvent_deviceId_get, _WMX3ApiPython.EventApiEventInputFunctionArguments_DeviceCloseEvent_deviceId_set)

    def __init__(self):
        _WMX3ApiPython.EventApiEventInputFunctionArguments_DeviceCloseEvent_swiginit(self, _WMX3ApiPython.new_EventApiEventInputFunctionArguments_DeviceCloseEvent())
    __swig_destroy__ = _WMX3ApiPython.delete_EventApiEventInputFunctionArguments_DeviceCloseEvent

# Register EventApiEventInputFunctionArguments_DeviceCloseEvent in _WMX3ApiPython:
_WMX3ApiPython.EventApiEventInputFunctionArguments_DeviceCloseEvent_swigregister(EventApiEventInputFunctionArguments_DeviceCloseEvent)
class EventApiEventInputFunctionArguments_DeviceTimeoutEvent(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    deviceId = property(_WMX3ApiPython.EventApiEventInputFunctionArguments_DeviceTimeoutEvent_deviceId_get, _WMX3ApiPython.EventApiEventInputFunctionArguments_DeviceTimeoutEvent_deviceId_set)

    def __init__(self):
        _WMX3ApiPython.EventApiEventInputFunctionArguments_DeviceTimeoutEvent_swiginit(self, _WMX3ApiPython.new_EventApiEventInputFunctionArguments_DeviceTimeoutEvent())
    __swig_destroy__ = _WMX3ApiPython.delete_EventApiEventInputFunctionArguments_DeviceTimeoutEvent

# Register EventApiEventInputFunctionArguments_DeviceTimeoutEvent in _WMX3ApiPython:
_WMX3ApiPython.EventApiEventInputFunctionArguments_DeviceTimeoutEvent_swigregister(EventApiEventInputFunctionArguments_DeviceTimeoutEvent)
class EventApiEventOutputType(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    PyNone = _WMX3ApiPython.EventApiEventOutputType_PyNone
    EnableAnotherEvent = _WMX3ApiPython.EventApiEventOutputType_EnableAnotherEvent

    def __init__(self):
        _WMX3ApiPython.EventApiEventOutputType_swiginit(self, _WMX3ApiPython.new_EventApiEventOutputType())
    __swig_destroy__ = _WMX3ApiPython.delete_EventApiEventOutputType

# Register EventApiEventOutputType in _WMX3ApiPython:
_WMX3ApiPython.EventApiEventOutputType_swigregister(EventApiEventOutputType)
class EventApiEventOutput(EventOutput):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    outputFunction = property(_WMX3ApiPython.EventApiEventOutput_outputFunction_get, _WMX3ApiPython.EventApiEventOutput_outputFunction_set)

    def __init__(self):
        _WMX3ApiPython.EventApiEventOutput_swiginit(self, _WMX3ApiPython.new_EventApiEventOutput())

    def GetOutputModuleId(self):
        return _WMX3ApiPython.EventApiEventOutput_GetOutputModuleId(self)

    def GetOutputData(self, buff, buffSize, dataSize):
        return _WMX3ApiPython.EventApiEventOutput_GetOutputData(self, buff, buffSize, dataSize)

    def SetOutputData(self, moduleId, data, dataSize):
        return _WMX3ApiPython.EventApiEventOutput_SetOutputData(self, moduleId, data, dataSize)
    __swig_destroy__ = _WMX3ApiPython.delete_EventApiEventOutput

# Register EventApiEventOutput in _WMX3ApiPython:
_WMX3ApiPython.EventApiEventOutput_swigregister(EventApiEventOutput)
class EventApiEventOutputFunctionArguments_None(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    reserved = property(_WMX3ApiPython.EventApiEventOutputFunctionArguments_None_reserved_get, _WMX3ApiPython.EventApiEventOutputFunctionArguments_None_reserved_set)

    def __init__(self):
        _WMX3ApiPython.EventApiEventOutputFunctionArguments_None_swiginit(self, _WMX3ApiPython.new_EventApiEventOutputFunctionArguments_None())
    __swig_destroy__ = _WMX3ApiPython.delete_EventApiEventOutputFunctionArguments_None

# Register EventApiEventOutputFunctionArguments_None in _WMX3ApiPython:
_WMX3ApiPython.EventApiEventOutputFunctionArguments_None_swigregister(EventApiEventOutputFunctionArguments_None)
class EventApiEventOutputFunctionArguments_EnableAnotherEvent(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    targetEventID = property(_WMX3ApiPython.EventApiEventOutputFunctionArguments_EnableAnotherEvent_targetEventID_get, _WMX3ApiPython.EventApiEventOutputFunctionArguments_EnableAnotherEvent_targetEventID_set)
    invert = property(_WMX3ApiPython.EventApiEventOutputFunctionArguments_EnableAnotherEvent_invert_get, _WMX3ApiPython.EventApiEventOutputFunctionArguments_EnableAnotherEvent_invert_set)
    setOffState = property(_WMX3ApiPython.EventApiEventOutputFunctionArguments_EnableAnotherEvent_setOffState_get, _WMX3ApiPython.EventApiEventOutputFunctionArguments_EnableAnotherEvent_setOffState_set)

    def __init__(self):
        _WMX3ApiPython.EventApiEventOutputFunctionArguments_EnableAnotherEvent_swiginit(self, _WMX3ApiPython.new_EventApiEventOutputFunctionArguments_EnableAnotherEvent())
    __swig_destroy__ = _WMX3ApiPython.delete_EventApiEventOutputFunctionArguments_EnableAnotherEvent

# Register EventApiEventOutputFunctionArguments_EnableAnotherEvent in _WMX3ApiPython:
_WMX3ApiPython.EventApiEventOutputFunctionArguments_EnableAnotherEvent_swigregister(EventApiEventOutputFunctionArguments_EnableAnotherEvent)
class EventControl_EventInputFunction(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    PyNone = _WMX3ApiPython.EventControl_EventInputFunction_PyNone
    IOBit = _WMX3ApiPython.EventControl_EventInputFunction_IOBit
    NotIOBit = _WMX3ApiPython.EventControl_EventInputFunction_NotIOBit
    OrIOBit = _WMX3ApiPython.EventControl_EventInputFunction_OrIOBit
    AndIOBit = _WMX3ApiPython.EventControl_EventInputFunction_AndIOBit
    XorIOBit = _WMX3ApiPython.EventControl_EventInputFunction_XorIOBit
    NandIOBit = _WMX3ApiPython.EventControl_EventInputFunction_NandIOBit
    NorIOBit = _WMX3ApiPython.EventControl_EventInputFunction_NorIOBit
    XnorIOBit = _WMX3ApiPython.EventControl_EventInputFunction_XnorIOBit
    DelayIOBit = _WMX3ApiPython.EventControl_EventInputFunction_DelayIOBit
    MBit = _WMX3ApiPython.EventControl_EventInputFunction_MBit
    NotMBit = _WMX3ApiPython.EventControl_EventInputFunction_NotMBit
    OrMBit = _WMX3ApiPython.EventControl_EventInputFunction_OrMBit
    AndMBit = _WMX3ApiPython.EventControl_EventInputFunction_AndMBit
    XorMBit = _WMX3ApiPython.EventControl_EventInputFunction_XorMBit
    NandMBit = _WMX3ApiPython.EventControl_EventInputFunction_NandMBit
    NorMBit = _WMX3ApiPython.EventControl_EventInputFunction_NorMBit
    XnorMBit = _WMX3ApiPython.EventControl_EventInputFunction_XnorMBit
    DelayMBit = _WMX3ApiPython.EventControl_EventInputFunction_DelayMBit
    AnotherEvent = _WMX3ApiPython.EventControl_EventInputFunction_AnotherEvent
    DelayAnotherEvent = _WMX3ApiPython.EventControl_EventInputFunction_DelayAnotherEvent
    EqualPos = _WMX3ApiPython.EventControl_EventInputFunction_EqualPos
    GreaterPos = _WMX3ApiPython.EventControl_EventInputFunction_GreaterPos
    LessPos = _WMX3ApiPython.EventControl_EventInputFunction_LessPos
    EqualVelocity = _WMX3ApiPython.EventControl_EventInputFunction_EqualVelocity
    GreaterVelocity = _WMX3ApiPython.EventControl_EventInputFunction_GreaterVelocity
    LessVelocity = _WMX3ApiPython.EventControl_EventInputFunction_LessVelocity
    EqualTrq = _WMX3ApiPython.EventControl_EventInputFunction_EqualTrq
    GreaterTrq = _WMX3ApiPython.EventControl_EventInputFunction_GreaterTrq
    LessTrq = _WMX3ApiPython.EventControl_EventInputFunction_LessTrq
    OpState = _WMX3ApiPython.EventControl_EventInputFunction_OpState
    PosSET = _WMX3ApiPython.EventControl_EventInputFunction_PosSET
    DelayedPosSET = _WMX3ApiPython.EventControl_EventInputFunction_DelayedPosSET
    CommandDistributedEnd = _WMX3ApiPython.EventControl_EventInputFunction_CommandDistributedEnd
    RemainingTime = _WMX3ApiPython.EventControl_EventInputFunction_RemainingTime
    RemainingDistance = _WMX3ApiPython.EventControl_EventInputFunction_RemainingDistance
    CompletedDistance = _WMX3ApiPython.EventControl_EventInputFunction_CompletedDistance
    CompletedTime = _WMX3ApiPython.EventControl_EventInputFunction_CompletedTime
    Unknown = _WMX3ApiPython.EventControl_EventInputFunction_Unknown

    def __init__(self):
        _WMX3ApiPython.EventControl_EventInputFunction_swiginit(self, _WMX3ApiPython.new_EventControl_EventInputFunction())
    __swig_destroy__ = _WMX3ApiPython.delete_EventControl_EventInputFunction

# Register EventControl_EventInputFunction in _WMX3ApiPython:
_WMX3ApiPython.EventControl_EventInputFunction_swigregister(EventControl_EventInputFunction)
class EventControl_EventOutputFunction(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    PyNone = _WMX3ApiPython.EventControl_EventOutputFunction_PyNone
    SetIOOutBit = _WMX3ApiPython.EventControl_EventOutputFunction_SetIOOutBit
    SetMBit = _WMX3ApiPython.EventControl_EventOutputFunction_SetMBit
    EnableAnotherEvent = _WMX3ApiPython.EventControl_EventOutputFunction_EnableAnotherEvent
    StopSingleAxis = _WMX3ApiPython.EventControl_EventOutputFunction_StopSingleAxis
    StartSinglePos = _WMX3ApiPython.EventControl_EventOutputFunction_StartSinglePos
    StartSingleMov = _WMX3ApiPython.EventControl_EventOutputFunction_StartSingleMov
    StartMultiplePos = _WMX3ApiPython.EventControl_EventOutputFunction_StartMultiplePos
    StartMultipleMov = _WMX3ApiPython.EventControl_EventOutputFunction_StartMultipleMov
    LinearIntplPos = _WMX3ApiPython.EventControl_EventOutputFunction_LinearIntplPos
    LinearIntplMov = _WMX3ApiPython.EventControl_EventOutputFunction_LinearIntplMov
    StartAPIBuffer = _WMX3ApiPython.EventControl_EventOutputFunction_StartAPIBuffer
    ExecQuickStopSingleAxis = _WMX3ApiPython.EventControl_EventOutputFunction_ExecQuickStopSingleAxis
    OverrideVelSingleAxis = _WMX3ApiPython.EventControl_EventOutputFunction_OverrideVelSingleAxis
    ExecEStop = _WMX3ApiPython.EventControl_EventOutputFunction_ExecEStop
    TriggerFlightRecorder = _WMX3ApiPython.EventControl_EventOutputFunction_TriggerFlightRecorder
    ResetFlightRecorder = _WMX3ApiPython.EventControl_EventOutputFunction_ResetFlightRecorder
    Unknown = _WMX3ApiPython.EventControl_EventOutputFunction_Unknown

    def __init__(self):
        _WMX3ApiPython.EventControl_EventOutputFunction_swiginit(self, _WMX3ApiPython.new_EventControl_EventOutputFunction())
    __swig_destroy__ = _WMX3ApiPython.delete_EventControl_EventOutputFunction

# Register EventControl_EventOutputFunction in _WMX3ApiPython:
_WMX3ApiPython.EventControl_EventOutputFunction_swigregister(EventControl_EventOutputFunction)
class EventControl_TouchProbeSource(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    ZPulse = _WMX3ApiPython.EventControl_TouchProbeSource_ZPulse
    TouchProbe = _WMX3ApiPython.EventControl_TouchProbeSource_TouchProbe

    def __init__(self):
        _WMX3ApiPython.EventControl_TouchProbeSource_swiginit(self, _WMX3ApiPython.new_EventControl_TouchProbeSource())
    __swig_destroy__ = _WMX3ApiPython.delete_EventControl_TouchProbeSource

# Register EventControl_TouchProbeSource in _WMX3ApiPython:
_WMX3ApiPython.EventControl_TouchProbeSource_swigregister(EventControl_TouchProbeSource)
class EventControl_TouchProbeMode(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    LatchFirst = _WMX3ApiPython.EventControl_TouchProbeMode_LatchFirst
    LatchLast = _WMX3ApiPython.EventControl_TouchProbeMode_LatchLast

    def __init__(self):
        _WMX3ApiPython.EventControl_TouchProbeMode_swiginit(self, _WMX3ApiPython.new_EventControl_TouchProbeMode())
    __swig_destroy__ = _WMX3ApiPython.delete_EventControl_TouchProbeMode

# Register EventControl_TouchProbeMode in _WMX3ApiPython:
_WMX3ApiPython.EventControl_TouchProbeMode_swigregister(EventControl_TouchProbeMode)
class EventControl_PSOOutputType(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    IOOutput = _WMX3ApiPython.EventControl_PSOOutputType_IOOutput
    UserMemory = _WMX3ApiPython.EventControl_PSOOutputType_UserMemory

    def __init__(self):
        _WMX3ApiPython.EventControl_PSOOutputType_swiginit(self, _WMX3ApiPython.new_EventControl_PSOOutputType())
    __swig_destroy__ = _WMX3ApiPython.delete_EventControl_PSOOutputType

# Register EventControl_PSOOutputType in _WMX3ApiPython:
_WMX3ApiPython.EventControl_PSOOutputType_swigregister(EventControl_PSOOutputType)
class EventControl_ComparatorSourceType(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    PosCommand = _WMX3ApiPython.EventControl_ComparatorSourceType_PosCommand
    PosFeedback = _WMX3ApiPython.EventControl_ComparatorSourceType_PosFeedback
    FollowingError = _WMX3ApiPython.EventControl_ComparatorSourceType_FollowingError

    def __init__(self):
        _WMX3ApiPython.EventControl_ComparatorSourceType_swiginit(self, _WMX3ApiPython.new_EventControl_ComparatorSourceType())
    __swig_destroy__ = _WMX3ApiPython.delete_EventControl_ComparatorSourceType

# Register EventControl_ComparatorSourceType in _WMX3ApiPython:
_WMX3ApiPython.EventControl_ComparatorSourceType_swigregister(EventControl_ComparatorSourceType)
class EventControl_ComparisonType(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Disable = _WMX3ApiPython.EventControl_ComparisonType_Disable
    Equal = _WMX3ApiPython.EventControl_ComparisonType_Equal
    PositiveDirection = _WMX3ApiPython.EventControl_ComparisonType_PositiveDirection
    NegativeDirection = _WMX3ApiPython.EventControl_ComparisonType_NegativeDirection
    MoreThan = _WMX3ApiPython.EventControl_ComparisonType_MoreThan
    LessThan = _WMX3ApiPython.EventControl_ComparisonType_LessThan

    def __init__(self):
        _WMX3ApiPython.EventControl_ComparisonType_swiginit(self, _WMX3ApiPython.new_EventControl_ComparisonType())
    __swig_destroy__ = _WMX3ApiPython.delete_EventControl_ComparisonType

# Register EventControl_ComparisonType in _WMX3ApiPython:
_WMX3ApiPython.EventControl_ComparisonType_swigregister(EventControl_ComparisonType)
class EventControl_Event_InputFunctionArguments_None(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    reserved = property(_WMX3ApiPython.EventControl_Event_InputFunctionArguments_None_reserved_get, _WMX3ApiPython.EventControl_Event_InputFunctionArguments_None_reserved_set)

    def __init__(self):
        _WMX3ApiPython.EventControl_Event_InputFunctionArguments_None_swiginit(self, _WMX3ApiPython.new_EventControl_Event_InputFunctionArguments_None())
    __swig_destroy__ = _WMX3ApiPython.delete_EventControl_Event_InputFunctionArguments_None

# Register EventControl_Event_InputFunctionArguments_None in _WMX3ApiPython:
_WMX3ApiPython.EventControl_Event_InputFunctionArguments_None_swigregister(EventControl_Event_InputFunctionArguments_None)
class EventControl_Event_InputFunctionArguments_IOBit(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    byteAddress = property(_WMX3ApiPython.EventControl_Event_InputFunctionArguments_IOBit_byteAddress_get, _WMX3ApiPython.EventControl_Event_InputFunctionArguments_IOBit_byteAddress_set)
    bitAddress = property(_WMX3ApiPython.EventControl_Event_InputFunctionArguments_IOBit_bitAddress_get, _WMX3ApiPython.EventControl_Event_InputFunctionArguments_IOBit_bitAddress_set)
    invert = property(_WMX3ApiPython.EventControl_Event_InputFunctionArguments_IOBit_invert_get, _WMX3ApiPython.EventControl_Event_InputFunctionArguments_IOBit_invert_set)
    ioSourceType = property(_WMX3ApiPython.EventControl_Event_InputFunctionArguments_IOBit_ioSourceType_get, _WMX3ApiPython.EventControl_Event_InputFunctionArguments_IOBit_ioSourceType_set)

    def __init__(self):
        _WMX3ApiPython.EventControl_Event_InputFunctionArguments_IOBit_swiginit(self, _WMX3ApiPython.new_EventControl_Event_InputFunctionArguments_IOBit())
    __swig_destroy__ = _WMX3ApiPython.delete_EventControl_Event_InputFunctionArguments_IOBit

# Register EventControl_Event_InputFunctionArguments_IOBit in _WMX3ApiPython:
_WMX3ApiPython.EventControl_Event_InputFunctionArguments_IOBit_swigregister(EventControl_Event_InputFunctionArguments_IOBit)
class EventControl_Event_InputFunctionArguments_NotIOBit(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    byteAddress = property(_WMX3ApiPython.EventControl_Event_InputFunctionArguments_NotIOBit_byteAddress_get, _WMX3ApiPython.EventControl_Event_InputFunctionArguments_NotIOBit_byteAddress_set)
    bitAddress = property(_WMX3ApiPython.EventControl_Event_InputFunctionArguments_NotIOBit_bitAddress_get, _WMX3ApiPython.EventControl_Event_InputFunctionArguments_NotIOBit_bitAddress_set)
    invert = property(_WMX3ApiPython.EventControl_Event_InputFunctionArguments_NotIOBit_invert_get, _WMX3ApiPython.EventControl_Event_InputFunctionArguments_NotIOBit_invert_set)
    ioSourceType = property(_WMX3ApiPython.EventControl_Event_InputFunctionArguments_NotIOBit_ioSourceType_get, _WMX3ApiPython.EventControl_Event_InputFunctionArguments_NotIOBit_ioSourceType_set)

    def __init__(self):
        _WMX3ApiPython.EventControl_Event_InputFunctionArguments_NotIOBit_swiginit(self, _WMX3ApiPython.new_EventControl_Event_InputFunctionArguments_NotIOBit())
    __swig_destroy__ = _WMX3ApiPython.delete_EventControl_Event_InputFunctionArguments_NotIOBit

# Register EventControl_Event_InputFunctionArguments_NotIOBit in _WMX3ApiPython:
_WMX3ApiPython.EventControl_Event_InputFunctionArguments_NotIOBit_swigregister(EventControl_Event_InputFunctionArguments_NotIOBit)
class EventControl_Event_InputFunctionArguments_OrIOBit(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    byteAddress = property(_WMX3ApiPython.EventControl_Event_InputFunctionArguments_OrIOBit_byteAddress_get, _WMX3ApiPython.EventControl_Event_InputFunctionArguments_OrIOBit_byteAddress_set)

    def SetByteAddress(self, index, value):
        return _WMX3ApiPython.EventControl_Event_InputFunctionArguments_OrIOBit_SetByteAddress(self, index, value)

    def GetByteAddress(self, index):
        return _WMX3ApiPython.EventControl_Event_InputFunctionArguments_OrIOBit_GetByteAddress(self, index)
    bitAddress = property(_WMX3ApiPython.EventControl_Event_InputFunctionArguments_OrIOBit_bitAddress_get, _WMX3ApiPython.EventControl_Event_InputFunctionArguments_OrIOBit_bitAddress_set)

    def SetBitAddress(self, index, value):
        return _WMX3ApiPython.EventControl_Event_InputFunctionArguments_OrIOBit_SetBitAddress(self, index, value)

    def GetBitAddress(self, index):
        return _WMX3ApiPython.EventControl_Event_InputFunctionArguments_OrIOBit_GetBitAddress(self, index)
    invert = property(_WMX3ApiPython.EventControl_Event_InputFunctionArguments_OrIOBit_invert_get, _WMX3ApiPython.EventControl_Event_InputFunctionArguments_OrIOBit_invert_set)

    def SetInvert(self, index, value):
        return _WMX3ApiPython.EventControl_Event_InputFunctionArguments_OrIOBit_SetInvert(self, index, value)

    def GetInvert(self, index):
        return _WMX3ApiPython.EventControl_Event_InputFunctionArguments_OrIOBit_GetInvert(self, index)
    ioSourceType = property(_WMX3ApiPython.EventControl_Event_InputFunctionArguments_OrIOBit_ioSourceType_get, _WMX3ApiPython.EventControl_Event_InputFunctionArguments_OrIOBit_ioSourceType_set)

    def SetIoSourceType(self, index, value):
        return _WMX3ApiPython.EventControl_Event_InputFunctionArguments_OrIOBit_SetIoSourceType(self, index, value)

    def GetIoSourceType(self, index):
        return _WMX3ApiPython.EventControl_Event_InputFunctionArguments_OrIOBit_GetIoSourceType(self, index)

    def __init__(self):
        _WMX3ApiPython.EventControl_Event_InputFunctionArguments_OrIOBit_swiginit(self, _WMX3ApiPython.new_EventControl_Event_InputFunctionArguments_OrIOBit())
    __swig_destroy__ = _WMX3ApiPython.delete_EventControl_Event_InputFunctionArguments_OrIOBit

# Register EventControl_Event_InputFunctionArguments_OrIOBit in _WMX3ApiPython:
_WMX3ApiPython.EventControl_Event_InputFunctionArguments_OrIOBit_swigregister(EventControl_Event_InputFunctionArguments_OrIOBit)
class EventControl_Event_InputFunctionArguments_AndIOBit(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    byteAddress = property(_WMX3ApiPython.EventControl_Event_InputFunctionArguments_AndIOBit_byteAddress_get, _WMX3ApiPython.EventControl_Event_InputFunctionArguments_AndIOBit_byteAddress_set)

    def SetByteAddress(self, index, value):
        return _WMX3ApiPython.EventControl_Event_InputFunctionArguments_AndIOBit_SetByteAddress(self, index, value)

    def GetByteAddress(self, index):
        return _WMX3ApiPython.EventControl_Event_InputFunctionArguments_AndIOBit_GetByteAddress(self, index)
    bitAddress = property(_WMX3ApiPython.EventControl_Event_InputFunctionArguments_AndIOBit_bitAddress_get, _WMX3ApiPython.EventControl_Event_InputFunctionArguments_AndIOBit_bitAddress_set)

    def SetBitAddress(self, index, value):
        return _WMX3ApiPython.EventControl_Event_InputFunctionArguments_AndIOBit_SetBitAddress(self, index, value)

    def GetBitAddress(self, index):
        return _WMX3ApiPython.EventControl_Event_InputFunctionArguments_AndIOBit_GetBitAddress(self, index)
    invert = property(_WMX3ApiPython.EventControl_Event_InputFunctionArguments_AndIOBit_invert_get, _WMX3ApiPython.EventControl_Event_InputFunctionArguments_AndIOBit_invert_set)

    def SetInvert(self, index, value):
        return _WMX3ApiPython.EventControl_Event_InputFunctionArguments_AndIOBit_SetInvert(self, index, value)

    def GetInvert(self, index):
        return _WMX3ApiPython.EventControl_Event_InputFunctionArguments_AndIOBit_GetInvert(self, index)
    ioSourceType = property(_WMX3ApiPython.EventControl_Event_InputFunctionArguments_AndIOBit_ioSourceType_get, _WMX3ApiPython.EventControl_Event_InputFunctionArguments_AndIOBit_ioSourceType_set)

    def SetIoSourceType(self, index, value):
        return _WMX3ApiPython.EventControl_Event_InputFunctionArguments_AndIOBit_SetIoSourceType(self, index, value)

    def GetIoSourceType(self, index):
        return _WMX3ApiPython.EventControl_Event_InputFunctionArguments_AndIOBit_GetIoSourceType(self, index)

    def __init__(self):
        _WMX3ApiPython.EventControl_Event_InputFunctionArguments_AndIOBit_swiginit(self, _WMX3ApiPython.new_EventControl_Event_InputFunctionArguments_AndIOBit())
    __swig_destroy__ = _WMX3ApiPython.delete_EventControl_Event_InputFunctionArguments_AndIOBit

# Register EventControl_Event_InputFunctionArguments_AndIOBit in _WMX3ApiPython:
_WMX3ApiPython.EventControl_Event_InputFunctionArguments_AndIOBit_swigregister(EventControl_Event_InputFunctionArguments_AndIOBit)
class EventControl_Event_InputFunctionArguments_XorIOBit(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    byteAddress = property(_WMX3ApiPython.EventControl_Event_InputFunctionArguments_XorIOBit_byteAddress_get, _WMX3ApiPython.EventControl_Event_InputFunctionArguments_XorIOBit_byteAddress_set)

    def SetByteAddress(self, index, value):
        return _WMX3ApiPython.EventControl_Event_InputFunctionArguments_XorIOBit_SetByteAddress(self, index, value)

    def GetByteAddress(self, index):
        return _WMX3ApiPython.EventControl_Event_InputFunctionArguments_XorIOBit_GetByteAddress(self, index)
    bitAddress = property(_WMX3ApiPython.EventControl_Event_InputFunctionArguments_XorIOBit_bitAddress_get, _WMX3ApiPython.EventControl_Event_InputFunctionArguments_XorIOBit_bitAddress_set)

    def SetBitAddress(self, index, value):
        return _WMX3ApiPython.EventControl_Event_InputFunctionArguments_XorIOBit_SetBitAddress(self, index, value)

    def GetBitAddress(self, index):
        return _WMX3ApiPython.EventControl_Event_InputFunctionArguments_XorIOBit_GetBitAddress(self, index)
    invert = property(_WMX3ApiPython.EventControl_Event_InputFunctionArguments_XorIOBit_invert_get, _WMX3ApiPython.EventControl_Event_InputFunctionArguments_XorIOBit_invert_set)

    def SetInvert(self, index, value):
        return _WMX3ApiPython.EventControl_Event_InputFunctionArguments_XorIOBit_SetInvert(self, index, value)

    def GetInvert(self, index):
        return _WMX3ApiPython.EventControl_Event_InputFunctionArguments_XorIOBit_GetInvert(self, index)
    ioSourceType = property(_WMX3ApiPython.EventControl_Event_InputFunctionArguments_XorIOBit_ioSourceType_get, _WMX3ApiPython.EventControl_Event_InputFunctionArguments_XorIOBit_ioSourceType_set)

    def SetIoSourceType(self, index, value):
        return _WMX3ApiPython.EventControl_Event_InputFunctionArguments_XorIOBit_SetIoSourceType(self, index, value)

    def GetIoSourceType(self, index):
        return _WMX3ApiPython.EventControl_Event_InputFunctionArguments_XorIOBit_GetIoSourceType(self, index)

    def __init__(self):
        _WMX3ApiPython.EventControl_Event_InputFunctionArguments_XorIOBit_swiginit(self, _WMX3ApiPython.new_EventControl_Event_InputFunctionArguments_XorIOBit())
    __swig_destroy__ = _WMX3ApiPython.delete_EventControl_Event_InputFunctionArguments_XorIOBit

# Register EventControl_Event_InputFunctionArguments_XorIOBit in _WMX3ApiPython:
_WMX3ApiPython.EventControl_Event_InputFunctionArguments_XorIOBit_swigregister(EventControl_Event_InputFunctionArguments_XorIOBit)
class EventControl_Event_InputFunctionArguments_NandIOBit(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    byteAddress = property(_WMX3ApiPython.EventControl_Event_InputFunctionArguments_NandIOBit_byteAddress_get, _WMX3ApiPython.EventControl_Event_InputFunctionArguments_NandIOBit_byteAddress_set)

    def SetByteAddress(self, index, value):
        return _WMX3ApiPython.EventControl_Event_InputFunctionArguments_NandIOBit_SetByteAddress(self, index, value)

    def GetByteAddress(self, index):
        return _WMX3ApiPython.EventControl_Event_InputFunctionArguments_NandIOBit_GetByteAddress(self, index)
    bitAddress = property(_WMX3ApiPython.EventControl_Event_InputFunctionArguments_NandIOBit_bitAddress_get, _WMX3ApiPython.EventControl_Event_InputFunctionArguments_NandIOBit_bitAddress_set)

    def SetBitAddress(self, index, value):
        return _WMX3ApiPython.EventControl_Event_InputFunctionArguments_NandIOBit_SetBitAddress(self, index, value)

    def GetBitAddress(self, index):
        return _WMX3ApiPython.EventControl_Event_InputFunctionArguments_NandIOBit_GetBitAddress(self, index)
    invert = property(_WMX3ApiPython.EventControl_Event_InputFunctionArguments_NandIOBit_invert_get, _WMX3ApiPython.EventControl_Event_InputFunctionArguments_NandIOBit_invert_set)

    def SetInvert(self, index, value):
        return _WMX3ApiPython.EventControl_Event_InputFunctionArguments_NandIOBit_SetInvert(self, index, value)

    def GetInvert(self, index):
        return _WMX3ApiPython.EventControl_Event_InputFunctionArguments_NandIOBit_GetInvert(self, index)
    ioSourceType = property(_WMX3ApiPython.EventControl_Event_InputFunctionArguments_NandIOBit_ioSourceType_get, _WMX3ApiPython.EventControl_Event_InputFunctionArguments_NandIOBit_ioSourceType_set)

    def SetIoSourceType(self, index, value):
        return _WMX3ApiPython.EventControl_Event_InputFunctionArguments_NandIOBit_SetIoSourceType(self, index, value)

    def GetIoSourceType(self, index):
        return _WMX3ApiPython.EventControl_Event_InputFunctionArguments_NandIOBit_GetIoSourceType(self, index)

    def __init__(self):
        _WMX3ApiPython.EventControl_Event_InputFunctionArguments_NandIOBit_swiginit(self, _WMX3ApiPython.new_EventControl_Event_InputFunctionArguments_NandIOBit())
    __swig_destroy__ = _WMX3ApiPython.delete_EventControl_Event_InputFunctionArguments_NandIOBit

# Register EventControl_Event_InputFunctionArguments_NandIOBit in _WMX3ApiPython:
_WMX3ApiPython.EventControl_Event_InputFunctionArguments_NandIOBit_swigregister(EventControl_Event_InputFunctionArguments_NandIOBit)
class EventControl_Event_InputFunctionArguments_NorIOBit(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    byteAddress = property(_WMX3ApiPython.EventControl_Event_InputFunctionArguments_NorIOBit_byteAddress_get, _WMX3ApiPython.EventControl_Event_InputFunctionArguments_NorIOBit_byteAddress_set)

    def SetByteAddress(self, index, value):
        return _WMX3ApiPython.EventControl_Event_InputFunctionArguments_NorIOBit_SetByteAddress(self, index, value)

    def GetByteAddress(self, index):
        return _WMX3ApiPython.EventControl_Event_InputFunctionArguments_NorIOBit_GetByteAddress(self, index)
    bitAddress = property(_WMX3ApiPython.EventControl_Event_InputFunctionArguments_NorIOBit_bitAddress_get, _WMX3ApiPython.EventControl_Event_InputFunctionArguments_NorIOBit_bitAddress_set)

    def SetBitAddress(self, index, value):
        return _WMX3ApiPython.EventControl_Event_InputFunctionArguments_NorIOBit_SetBitAddress(self, index, value)

    def GetBitAddress(self, index):
        return _WMX3ApiPython.EventControl_Event_InputFunctionArguments_NorIOBit_GetBitAddress(self, index)
    invert = property(_WMX3ApiPython.EventControl_Event_InputFunctionArguments_NorIOBit_invert_get, _WMX3ApiPython.EventControl_Event_InputFunctionArguments_NorIOBit_invert_set)

    def SetInvert(self, index, value):
        return _WMX3ApiPython.EventControl_Event_InputFunctionArguments_NorIOBit_SetInvert(self, index, value)

    def GetInvert(self, index):
        return _WMX3ApiPython.EventControl_Event_InputFunctionArguments_NorIOBit_GetInvert(self, index)
    ioSourceType = property(_WMX3ApiPython.EventControl_Event_InputFunctionArguments_NorIOBit_ioSourceType_get, _WMX3ApiPython.EventControl_Event_InputFunctionArguments_NorIOBit_ioSourceType_set)

    def SetIoSourceType(self, index, value):
        return _WMX3ApiPython.EventControl_Event_InputFunctionArguments_NorIOBit_SetIoSourceType(self, index, value)

    def GetIoSourceType(self, index):
        return _WMX3ApiPython.EventControl_Event_InputFunctionArguments_NorIOBit_GetIoSourceType(self, index)

    def __init__(self):
        _WMX3ApiPython.EventControl_Event_InputFunctionArguments_NorIOBit_swiginit(self, _WMX3ApiPython.new_EventControl_Event_InputFunctionArguments_NorIOBit())
    __swig_destroy__ = _WMX3ApiPython.delete_EventControl_Event_InputFunctionArguments_NorIOBit

# Register EventControl_Event_InputFunctionArguments_NorIOBit in _WMX3ApiPython:
_WMX3ApiPython.EventControl_Event_InputFunctionArguments_NorIOBit_swigregister(EventControl_Event_InputFunctionArguments_NorIOBit)
class EventControl_Event_InputFunctionArguments_XnorIOBit(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    byteAddress = property(_WMX3ApiPython.EventControl_Event_InputFunctionArguments_XnorIOBit_byteAddress_get, _WMX3ApiPython.EventControl_Event_InputFunctionArguments_XnorIOBit_byteAddress_set)

    def SetByteAddress(self, index, value):
        return _WMX3ApiPython.EventControl_Event_InputFunctionArguments_XnorIOBit_SetByteAddress(self, index, value)

    def GetByteAddress(self, index):
        return _WMX3ApiPython.EventControl_Event_InputFunctionArguments_XnorIOBit_GetByteAddress(self, index)
    bitAddress = property(_WMX3ApiPython.EventControl_Event_InputFunctionArguments_XnorIOBit_bitAddress_get, _WMX3ApiPython.EventControl_Event_InputFunctionArguments_XnorIOBit_bitAddress_set)

    def SetBitAddress(self, index, value):
        return _WMX3ApiPython.EventControl_Event_InputFunctionArguments_XnorIOBit_SetBitAddress(self, index, value)

    def GetBitAddress(self, index):
        return _WMX3ApiPython.EventControl_Event_InputFunctionArguments_XnorIOBit_GetBitAddress(self, index)
    invert = property(_WMX3ApiPython.EventControl_Event_InputFunctionArguments_XnorIOBit_invert_get, _WMX3ApiPython.EventControl_Event_InputFunctionArguments_XnorIOBit_invert_set)

    def SetInvert(self, index, value):
        return _WMX3ApiPython.EventControl_Event_InputFunctionArguments_XnorIOBit_SetInvert(self, index, value)

    def GetInvert(self, index):
        return _WMX3ApiPython.EventControl_Event_InputFunctionArguments_XnorIOBit_GetInvert(self, index)
    ioSourceType = property(_WMX3ApiPython.EventControl_Event_InputFunctionArguments_XnorIOBit_ioSourceType_get, _WMX3ApiPython.EventControl_Event_InputFunctionArguments_XnorIOBit_ioSourceType_set)

    def SetIoSourceType(self, index, value):
        return _WMX3ApiPython.EventControl_Event_InputFunctionArguments_XnorIOBit_SetIoSourceType(self, index, value)

    def GetIoSourceType(self, index):
        return _WMX3ApiPython.EventControl_Event_InputFunctionArguments_XnorIOBit_GetIoSourceType(self, index)

    def __init__(self):
        _WMX3ApiPython.EventControl_Event_InputFunctionArguments_XnorIOBit_swiginit(self, _WMX3ApiPython.new_EventControl_Event_InputFunctionArguments_XnorIOBit())
    __swig_destroy__ = _WMX3ApiPython.delete_EventControl_Event_InputFunctionArguments_XnorIOBit

# Register EventControl_Event_InputFunctionArguments_XnorIOBit in _WMX3ApiPython:
_WMX3ApiPython.EventControl_Event_InputFunctionArguments_XnorIOBit_swigregister(EventControl_Event_InputFunctionArguments_XnorIOBit)
class EventControl_Event_InputFunctionArguments_DelayIOBit(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    byteAddress = property(_WMX3ApiPython.EventControl_Event_InputFunctionArguments_DelayIOBit_byteAddress_get, _WMX3ApiPython.EventControl_Event_InputFunctionArguments_DelayIOBit_byteAddress_set)
    bitAddress = property(_WMX3ApiPython.EventControl_Event_InputFunctionArguments_DelayIOBit_bitAddress_get, _WMX3ApiPython.EventControl_Event_InputFunctionArguments_DelayIOBit_bitAddress_set)
    invert = property(_WMX3ApiPython.EventControl_Event_InputFunctionArguments_DelayIOBit_invert_get, _WMX3ApiPython.EventControl_Event_InputFunctionArguments_DelayIOBit_invert_set)
    ioSourceType = property(_WMX3ApiPython.EventControl_Event_InputFunctionArguments_DelayIOBit_ioSourceType_get, _WMX3ApiPython.EventControl_Event_InputFunctionArguments_DelayIOBit_ioSourceType_set)
    delayTime = property(_WMX3ApiPython.EventControl_Event_InputFunctionArguments_DelayIOBit_delayTime_get, _WMX3ApiPython.EventControl_Event_InputFunctionArguments_DelayIOBit_delayTime_set)

    def __init__(self):
        _WMX3ApiPython.EventControl_Event_InputFunctionArguments_DelayIOBit_swiginit(self, _WMX3ApiPython.new_EventControl_Event_InputFunctionArguments_DelayIOBit())
    __swig_destroy__ = _WMX3ApiPython.delete_EventControl_Event_InputFunctionArguments_DelayIOBit

# Register EventControl_Event_InputFunctionArguments_DelayIOBit in _WMX3ApiPython:
_WMX3ApiPython.EventControl_Event_InputFunctionArguments_DelayIOBit_swigregister(EventControl_Event_InputFunctionArguments_DelayIOBit)
class EventControl_Event_InputFunctionArguments_MBit(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    byteAddress = property(_WMX3ApiPython.EventControl_Event_InputFunctionArguments_MBit_byteAddress_get, _WMX3ApiPython.EventControl_Event_InputFunctionArguments_MBit_byteAddress_set)
    bitAddress = property(_WMX3ApiPython.EventControl_Event_InputFunctionArguments_MBit_bitAddress_get, _WMX3ApiPython.EventControl_Event_InputFunctionArguments_MBit_bitAddress_set)
    invert = property(_WMX3ApiPython.EventControl_Event_InputFunctionArguments_MBit_invert_get, _WMX3ApiPython.EventControl_Event_InputFunctionArguments_MBit_invert_set)

    def __init__(self):
        _WMX3ApiPython.EventControl_Event_InputFunctionArguments_MBit_swiginit(self, _WMX3ApiPython.new_EventControl_Event_InputFunctionArguments_MBit())
    __swig_destroy__ = _WMX3ApiPython.delete_EventControl_Event_InputFunctionArguments_MBit

# Register EventControl_Event_InputFunctionArguments_MBit in _WMX3ApiPython:
_WMX3ApiPython.EventControl_Event_InputFunctionArguments_MBit_swigregister(EventControl_Event_InputFunctionArguments_MBit)
class EventControl_Event_InputFunctionArguments_NotMBit(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    byteAddress = property(_WMX3ApiPython.EventControl_Event_InputFunctionArguments_NotMBit_byteAddress_get, _WMX3ApiPython.EventControl_Event_InputFunctionArguments_NotMBit_byteAddress_set)
    bitAddress = property(_WMX3ApiPython.EventControl_Event_InputFunctionArguments_NotMBit_bitAddress_get, _WMX3ApiPython.EventControl_Event_InputFunctionArguments_NotMBit_bitAddress_set)
    invert = property(_WMX3ApiPython.EventControl_Event_InputFunctionArguments_NotMBit_invert_get, _WMX3ApiPython.EventControl_Event_InputFunctionArguments_NotMBit_invert_set)

    def __init__(self):
        _WMX3ApiPython.EventControl_Event_InputFunctionArguments_NotMBit_swiginit(self, _WMX3ApiPython.new_EventControl_Event_InputFunctionArguments_NotMBit())
    __swig_destroy__ = _WMX3ApiPython.delete_EventControl_Event_InputFunctionArguments_NotMBit

# Register EventControl_Event_InputFunctionArguments_NotMBit in _WMX3ApiPython:
_WMX3ApiPython.EventControl_Event_InputFunctionArguments_NotMBit_swigregister(EventControl_Event_InputFunctionArguments_NotMBit)
class EventControl_Event_InputFunctionArguments_OrMBit(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    byteAddress = property(_WMX3ApiPython.EventControl_Event_InputFunctionArguments_OrMBit_byteAddress_get, _WMX3ApiPython.EventControl_Event_InputFunctionArguments_OrMBit_byteAddress_set)

    def SetByteAddress(self, index, value):
        return _WMX3ApiPython.EventControl_Event_InputFunctionArguments_OrMBit_SetByteAddress(self, index, value)

    def GetByteAddress(self, index):
        return _WMX3ApiPython.EventControl_Event_InputFunctionArguments_OrMBit_GetByteAddress(self, index)
    bitAddress = property(_WMX3ApiPython.EventControl_Event_InputFunctionArguments_OrMBit_bitAddress_get, _WMX3ApiPython.EventControl_Event_InputFunctionArguments_OrMBit_bitAddress_set)

    def SetBitAddress(self, index, value):
        return _WMX3ApiPython.EventControl_Event_InputFunctionArguments_OrMBit_SetBitAddress(self, index, value)

    def GetBitAddress(self, index):
        return _WMX3ApiPython.EventControl_Event_InputFunctionArguments_OrMBit_GetBitAddress(self, index)
    invert = property(_WMX3ApiPython.EventControl_Event_InputFunctionArguments_OrMBit_invert_get, _WMX3ApiPython.EventControl_Event_InputFunctionArguments_OrMBit_invert_set)

    def SetInvert(self, index, value):
        return _WMX3ApiPython.EventControl_Event_InputFunctionArguments_OrMBit_SetInvert(self, index, value)

    def GetInvert(self, index):
        return _WMX3ApiPython.EventControl_Event_InputFunctionArguments_OrMBit_GetInvert(self, index)

    def __init__(self):
        _WMX3ApiPython.EventControl_Event_InputFunctionArguments_OrMBit_swiginit(self, _WMX3ApiPython.new_EventControl_Event_InputFunctionArguments_OrMBit())
    __swig_destroy__ = _WMX3ApiPython.delete_EventControl_Event_InputFunctionArguments_OrMBit

# Register EventControl_Event_InputFunctionArguments_OrMBit in _WMX3ApiPython:
_WMX3ApiPython.EventControl_Event_InputFunctionArguments_OrMBit_swigregister(EventControl_Event_InputFunctionArguments_OrMBit)
class EventControl_Event_InputFunctionArguments_AndMBit(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    byteAddress = property(_WMX3ApiPython.EventControl_Event_InputFunctionArguments_AndMBit_byteAddress_get, _WMX3ApiPython.EventControl_Event_InputFunctionArguments_AndMBit_byteAddress_set)

    def SetByteAddress(self, index, value):
        return _WMX3ApiPython.EventControl_Event_InputFunctionArguments_AndMBit_SetByteAddress(self, index, value)

    def GetByteAddress(self, index):
        return _WMX3ApiPython.EventControl_Event_InputFunctionArguments_AndMBit_GetByteAddress(self, index)
    bitAddress = property(_WMX3ApiPython.EventControl_Event_InputFunctionArguments_AndMBit_bitAddress_get, _WMX3ApiPython.EventControl_Event_InputFunctionArguments_AndMBit_bitAddress_set)

    def SetBitAddress(self, index, value):
        return _WMX3ApiPython.EventControl_Event_InputFunctionArguments_AndMBit_SetBitAddress(self, index, value)

    def GetBitAddress(self, index):
        return _WMX3ApiPython.EventControl_Event_InputFunctionArguments_AndMBit_GetBitAddress(self, index)
    invert = property(_WMX3ApiPython.EventControl_Event_InputFunctionArguments_AndMBit_invert_get, _WMX3ApiPython.EventControl_Event_InputFunctionArguments_AndMBit_invert_set)

    def SetInvert(self, index, value):
        return _WMX3ApiPython.EventControl_Event_InputFunctionArguments_AndMBit_SetInvert(self, index, value)

    def GetInvert(self, index):
        return _WMX3ApiPython.EventControl_Event_InputFunctionArguments_AndMBit_GetInvert(self, index)

    def __init__(self):
        _WMX3ApiPython.EventControl_Event_InputFunctionArguments_AndMBit_swiginit(self, _WMX3ApiPython.new_EventControl_Event_InputFunctionArguments_AndMBit())
    __swig_destroy__ = _WMX3ApiPython.delete_EventControl_Event_InputFunctionArguments_AndMBit

# Register EventControl_Event_InputFunctionArguments_AndMBit in _WMX3ApiPython:
_WMX3ApiPython.EventControl_Event_InputFunctionArguments_AndMBit_swigregister(EventControl_Event_InputFunctionArguments_AndMBit)
class EventControl_Event_InputFunctionArguments_XorMBit(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    byteAddress = property(_WMX3ApiPython.EventControl_Event_InputFunctionArguments_XorMBit_byteAddress_get, _WMX3ApiPython.EventControl_Event_InputFunctionArguments_XorMBit_byteAddress_set)

    def SetByteAddress(self, index, value):
        return _WMX3ApiPython.EventControl_Event_InputFunctionArguments_XorMBit_SetByteAddress(self, index, value)

    def GetByteAddress(self, index):
        return _WMX3ApiPython.EventControl_Event_InputFunctionArguments_XorMBit_GetByteAddress(self, index)
    bitAddress = property(_WMX3ApiPython.EventControl_Event_InputFunctionArguments_XorMBit_bitAddress_get, _WMX3ApiPython.EventControl_Event_InputFunctionArguments_XorMBit_bitAddress_set)

    def SetBitAddress(self, index, value):
        return _WMX3ApiPython.EventControl_Event_InputFunctionArguments_XorMBit_SetBitAddress(self, index, value)

    def GetBitAddress(self, index):
        return _WMX3ApiPython.EventControl_Event_InputFunctionArguments_XorMBit_GetBitAddress(self, index)
    invert = property(_WMX3ApiPython.EventControl_Event_InputFunctionArguments_XorMBit_invert_get, _WMX3ApiPython.EventControl_Event_InputFunctionArguments_XorMBit_invert_set)

    def SetInvert(self, index, value):
        return _WMX3ApiPython.EventControl_Event_InputFunctionArguments_XorMBit_SetInvert(self, index, value)

    def GetInvert(self, index):
        return _WMX3ApiPython.EventControl_Event_InputFunctionArguments_XorMBit_GetInvert(self, index)

    def __init__(self):
        _WMX3ApiPython.EventControl_Event_InputFunctionArguments_XorMBit_swiginit(self, _WMX3ApiPython.new_EventControl_Event_InputFunctionArguments_XorMBit())
    __swig_destroy__ = _WMX3ApiPython.delete_EventControl_Event_InputFunctionArguments_XorMBit

# Register EventControl_Event_InputFunctionArguments_XorMBit in _WMX3ApiPython:
_WMX3ApiPython.EventControl_Event_InputFunctionArguments_XorMBit_swigregister(EventControl_Event_InputFunctionArguments_XorMBit)
class EventControl_Event_InputFunctionArguments_NandMBit(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    byteAddress = property(_WMX3ApiPython.EventControl_Event_InputFunctionArguments_NandMBit_byteAddress_get, _WMX3ApiPython.EventControl_Event_InputFunctionArguments_NandMBit_byteAddress_set)

    def SetByteAddress(self, index, value):
        return _WMX3ApiPython.EventControl_Event_InputFunctionArguments_NandMBit_SetByteAddress(self, index, value)

    def GetByteAddress(self, index):
        return _WMX3ApiPython.EventControl_Event_InputFunctionArguments_NandMBit_GetByteAddress(self, index)
    bitAddress = property(_WMX3ApiPython.EventControl_Event_InputFunctionArguments_NandMBit_bitAddress_get, _WMX3ApiPython.EventControl_Event_InputFunctionArguments_NandMBit_bitAddress_set)

    def SetBitAddress(self, index, value):
        return _WMX3ApiPython.EventControl_Event_InputFunctionArguments_NandMBit_SetBitAddress(self, index, value)

    def GetBitAddress(self, index):
        return _WMX3ApiPython.EventControl_Event_InputFunctionArguments_NandMBit_GetBitAddress(self, index)
    invert = property(_WMX3ApiPython.EventControl_Event_InputFunctionArguments_NandMBit_invert_get, _WMX3ApiPython.EventControl_Event_InputFunctionArguments_NandMBit_invert_set)

    def SetInvert(self, index, value):
        return _WMX3ApiPython.EventControl_Event_InputFunctionArguments_NandMBit_SetInvert(self, index, value)

    def GetInvert(self, index):
        return _WMX3ApiPython.EventControl_Event_InputFunctionArguments_NandMBit_GetInvert(self, index)

    def __init__(self):
        _WMX3ApiPython.EventControl_Event_InputFunctionArguments_NandMBit_swiginit(self, _WMX3ApiPython.new_EventControl_Event_InputFunctionArguments_NandMBit())
    __swig_destroy__ = _WMX3ApiPython.delete_EventControl_Event_InputFunctionArguments_NandMBit

# Register EventControl_Event_InputFunctionArguments_NandMBit in _WMX3ApiPython:
_WMX3ApiPython.EventControl_Event_InputFunctionArguments_NandMBit_swigregister(EventControl_Event_InputFunctionArguments_NandMBit)
class EventControl_Event_InputFunctionArguments_NorMBit(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    byteAddress = property(_WMX3ApiPython.EventControl_Event_InputFunctionArguments_NorMBit_byteAddress_get, _WMX3ApiPython.EventControl_Event_InputFunctionArguments_NorMBit_byteAddress_set)

    def SetByteAddress(self, index, value):
        return _WMX3ApiPython.EventControl_Event_InputFunctionArguments_NorMBit_SetByteAddress(self, index, value)

    def GetByteAddress(self, index):
        return _WMX3ApiPython.EventControl_Event_InputFunctionArguments_NorMBit_GetByteAddress(self, index)
    bitAddress = property(_WMX3ApiPython.EventControl_Event_InputFunctionArguments_NorMBit_bitAddress_get, _WMX3ApiPython.EventControl_Event_InputFunctionArguments_NorMBit_bitAddress_set)

    def SetBitAddress(self, index, value):
        return _WMX3ApiPython.EventControl_Event_InputFunctionArguments_NorMBit_SetBitAddress(self, index, value)

    def GetBitAddress(self, index):
        return _WMX3ApiPython.EventControl_Event_InputFunctionArguments_NorMBit_GetBitAddress(self, index)
    invert = property(_WMX3ApiPython.EventControl_Event_InputFunctionArguments_NorMBit_invert_get, _WMX3ApiPython.EventControl_Event_InputFunctionArguments_NorMBit_invert_set)

    def SetInvert(self, index, value):
        return _WMX3ApiPython.EventControl_Event_InputFunctionArguments_NorMBit_SetInvert(self, index, value)

    def GetInvert(self, index):
        return _WMX3ApiPython.EventControl_Event_InputFunctionArguments_NorMBit_GetInvert(self, index)

    def __init__(self):
        _WMX3ApiPython.EventControl_Event_InputFunctionArguments_NorMBit_swiginit(self, _WMX3ApiPython.new_EventControl_Event_InputFunctionArguments_NorMBit())
    __swig_destroy__ = _WMX3ApiPython.delete_EventControl_Event_InputFunctionArguments_NorMBit

# Register EventControl_Event_InputFunctionArguments_NorMBit in _WMX3ApiPython:
_WMX3ApiPython.EventControl_Event_InputFunctionArguments_NorMBit_swigregister(EventControl_Event_InputFunctionArguments_NorMBit)
class EventControl_Event_InputFunctionArguments_XnorMBit(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    byteAddress = property(_WMX3ApiPython.EventControl_Event_InputFunctionArguments_XnorMBit_byteAddress_get, _WMX3ApiPython.EventControl_Event_InputFunctionArguments_XnorMBit_byteAddress_set)

    def SetByteAddress(self, index, value):
        return _WMX3ApiPython.EventControl_Event_InputFunctionArguments_XnorMBit_SetByteAddress(self, index, value)

    def GetByteAddress(self, index):
        return _WMX3ApiPython.EventControl_Event_InputFunctionArguments_XnorMBit_GetByteAddress(self, index)
    bitAddress = property(_WMX3ApiPython.EventControl_Event_InputFunctionArguments_XnorMBit_bitAddress_get, _WMX3ApiPython.EventControl_Event_InputFunctionArguments_XnorMBit_bitAddress_set)

    def SetBitAddress(self, index, value):
        return _WMX3ApiPython.EventControl_Event_InputFunctionArguments_XnorMBit_SetBitAddress(self, index, value)

    def GetBitAddress(self, index):
        return _WMX3ApiPython.EventControl_Event_InputFunctionArguments_XnorMBit_GetBitAddress(self, index)
    invert = property(_WMX3ApiPython.EventControl_Event_InputFunctionArguments_XnorMBit_invert_get, _WMX3ApiPython.EventControl_Event_InputFunctionArguments_XnorMBit_invert_set)

    def SetInvert(self, index, value):
        return _WMX3ApiPython.EventControl_Event_InputFunctionArguments_XnorMBit_SetInvert(self, index, value)

    def GetInvert(self, index):
        return _WMX3ApiPython.EventControl_Event_InputFunctionArguments_XnorMBit_GetInvert(self, index)

    def __init__(self):
        _WMX3ApiPython.EventControl_Event_InputFunctionArguments_XnorMBit_swiginit(self, _WMX3ApiPython.new_EventControl_Event_InputFunctionArguments_XnorMBit())
    __swig_destroy__ = _WMX3ApiPython.delete_EventControl_Event_InputFunctionArguments_XnorMBit

# Register EventControl_Event_InputFunctionArguments_XnorMBit in _WMX3ApiPython:
_WMX3ApiPython.EventControl_Event_InputFunctionArguments_XnorMBit_swigregister(EventControl_Event_InputFunctionArguments_XnorMBit)
class EventControl_Event_InputFunctionArguments_DelayMBit(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    byteAddress = property(_WMX3ApiPython.EventControl_Event_InputFunctionArguments_DelayMBit_byteAddress_get, _WMX3ApiPython.EventControl_Event_InputFunctionArguments_DelayMBit_byteAddress_set)
    bitAddress = property(_WMX3ApiPython.EventControl_Event_InputFunctionArguments_DelayMBit_bitAddress_get, _WMX3ApiPython.EventControl_Event_InputFunctionArguments_DelayMBit_bitAddress_set)
    invert = property(_WMX3ApiPython.EventControl_Event_InputFunctionArguments_DelayMBit_invert_get, _WMX3ApiPython.EventControl_Event_InputFunctionArguments_DelayMBit_invert_set)
    delayTime = property(_WMX3ApiPython.EventControl_Event_InputFunctionArguments_DelayMBit_delayTime_get, _WMX3ApiPython.EventControl_Event_InputFunctionArguments_DelayMBit_delayTime_set)

    def __init__(self):
        _WMX3ApiPython.EventControl_Event_InputFunctionArguments_DelayMBit_swiginit(self, _WMX3ApiPython.new_EventControl_Event_InputFunctionArguments_DelayMBit())
    __swig_destroy__ = _WMX3ApiPython.delete_EventControl_Event_InputFunctionArguments_DelayMBit

# Register EventControl_Event_InputFunctionArguments_DelayMBit in _WMX3ApiPython:
_WMX3ApiPython.EventControl_Event_InputFunctionArguments_DelayMBit_swigregister(EventControl_Event_InputFunctionArguments_DelayMBit)
class EventControl_Event_InputFunctionArguments_AnotherEvent(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    eventID = property(_WMX3ApiPython.EventControl_Event_InputFunctionArguments_AnotherEvent_eventID_get, _WMX3ApiPython.EventControl_Event_InputFunctionArguments_AnotherEvent_eventID_set)
    invert = property(_WMX3ApiPython.EventControl_Event_InputFunctionArguments_AnotherEvent_invert_get, _WMX3ApiPython.EventControl_Event_InputFunctionArguments_AnotherEvent_invert_set)

    def __init__(self):
        _WMX3ApiPython.EventControl_Event_InputFunctionArguments_AnotherEvent_swiginit(self, _WMX3ApiPython.new_EventControl_Event_InputFunctionArguments_AnotherEvent())
    __swig_destroy__ = _WMX3ApiPython.delete_EventControl_Event_InputFunctionArguments_AnotherEvent

# Register EventControl_Event_InputFunctionArguments_AnotherEvent in _WMX3ApiPython:
_WMX3ApiPython.EventControl_Event_InputFunctionArguments_AnotherEvent_swigregister(EventControl_Event_InputFunctionArguments_AnotherEvent)
class EventControl_Event_InputFunctionArguments_DelayAnotherEvent(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    eventID = property(_WMX3ApiPython.EventControl_Event_InputFunctionArguments_DelayAnotherEvent_eventID_get, _WMX3ApiPython.EventControl_Event_InputFunctionArguments_DelayAnotherEvent_eventID_set)
    invert = property(_WMX3ApiPython.EventControl_Event_InputFunctionArguments_DelayAnotherEvent_invert_get, _WMX3ApiPython.EventControl_Event_InputFunctionArguments_DelayAnotherEvent_invert_set)
    delayTime = property(_WMX3ApiPython.EventControl_Event_InputFunctionArguments_DelayAnotherEvent_delayTime_get, _WMX3ApiPython.EventControl_Event_InputFunctionArguments_DelayAnotherEvent_delayTime_set)

    def __init__(self):
        _WMX3ApiPython.EventControl_Event_InputFunctionArguments_DelayAnotherEvent_swiginit(self, _WMX3ApiPython.new_EventControl_Event_InputFunctionArguments_DelayAnotherEvent())
    __swig_destroy__ = _WMX3ApiPython.delete_EventControl_Event_InputFunctionArguments_DelayAnotherEvent

# Register EventControl_Event_InputFunctionArguments_DelayAnotherEvent in _WMX3ApiPython:
_WMX3ApiPython.EventControl_Event_InputFunctionArguments_DelayAnotherEvent_swigregister(EventControl_Event_InputFunctionArguments_DelayAnotherEvent)
class EventControl_Event_InputFunctionArguments_EqualPos(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    axis = property(_WMX3ApiPython.EventControl_Event_InputFunctionArguments_EqualPos_axis_get, _WMX3ApiPython.EventControl_Event_InputFunctionArguments_EqualPos_axis_set)
    pos = property(_WMX3ApiPython.EventControl_Event_InputFunctionArguments_EqualPos_pos_get, _WMX3ApiPython.EventControl_Event_InputFunctionArguments_EqualPos_pos_set)
    disablePositiveDirection = property(_WMX3ApiPython.EventControl_Event_InputFunctionArguments_EqualPos_disablePositiveDirection_get, _WMX3ApiPython.EventControl_Event_InputFunctionArguments_EqualPos_disablePositiveDirection_set)
    disableNegativeDirection = property(_WMX3ApiPython.EventControl_Event_InputFunctionArguments_EqualPos_disableNegativeDirection_get, _WMX3ApiPython.EventControl_Event_InputFunctionArguments_EqualPos_disableNegativeDirection_set)
    useFeedback = property(_WMX3ApiPython.EventControl_Event_InputFunctionArguments_EqualPos_useFeedback_get, _WMX3ApiPython.EventControl_Event_InputFunctionArguments_EqualPos_useFeedback_set)
    invert = property(_WMX3ApiPython.EventControl_Event_InputFunctionArguments_EqualPos_invert_get, _WMX3ApiPython.EventControl_Event_InputFunctionArguments_EqualPos_invert_set)
    enableTolerance = property(_WMX3ApiPython.EventControl_Event_InputFunctionArguments_EqualPos_enableTolerance_get, _WMX3ApiPython.EventControl_Event_InputFunctionArguments_EqualPos_enableTolerance_set)
    tolerance = property(_WMX3ApiPython.EventControl_Event_InputFunctionArguments_EqualPos_tolerance_get, _WMX3ApiPython.EventControl_Event_InputFunctionArguments_EqualPos_tolerance_set)

    def __init__(self):
        _WMX3ApiPython.EventControl_Event_InputFunctionArguments_EqualPos_swiginit(self, _WMX3ApiPython.new_EventControl_Event_InputFunctionArguments_EqualPos())
    __swig_destroy__ = _WMX3ApiPython.delete_EventControl_Event_InputFunctionArguments_EqualPos

# Register EventControl_Event_InputFunctionArguments_EqualPos in _WMX3ApiPython:
_WMX3ApiPython.EventControl_Event_InputFunctionArguments_EqualPos_swigregister(EventControl_Event_InputFunctionArguments_EqualPos)
class EventControl_Event_InputFunctionArguments_GreaterPos(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    axis = property(_WMX3ApiPython.EventControl_Event_InputFunctionArguments_GreaterPos_axis_get, _WMX3ApiPython.EventControl_Event_InputFunctionArguments_GreaterPos_axis_set)
    pos = property(_WMX3ApiPython.EventControl_Event_InputFunctionArguments_GreaterPos_pos_get, _WMX3ApiPython.EventControl_Event_InputFunctionArguments_GreaterPos_pos_set)
    disablePositiveDirection = property(_WMX3ApiPython.EventControl_Event_InputFunctionArguments_GreaterPos_disablePositiveDirection_get, _WMX3ApiPython.EventControl_Event_InputFunctionArguments_GreaterPos_disablePositiveDirection_set)
    disableNegativeDirection = property(_WMX3ApiPython.EventControl_Event_InputFunctionArguments_GreaterPos_disableNegativeDirection_get, _WMX3ApiPython.EventControl_Event_InputFunctionArguments_GreaterPos_disableNegativeDirection_set)
    useFeedback = property(_WMX3ApiPython.EventControl_Event_InputFunctionArguments_GreaterPos_useFeedback_get, _WMX3ApiPython.EventControl_Event_InputFunctionArguments_GreaterPos_useFeedback_set)
    invert = property(_WMX3ApiPython.EventControl_Event_InputFunctionArguments_GreaterPos_invert_get, _WMX3ApiPython.EventControl_Event_InputFunctionArguments_GreaterPos_invert_set)

    def __init__(self):
        _WMX3ApiPython.EventControl_Event_InputFunctionArguments_GreaterPos_swiginit(self, _WMX3ApiPython.new_EventControl_Event_InputFunctionArguments_GreaterPos())
    __swig_destroy__ = _WMX3ApiPython.delete_EventControl_Event_InputFunctionArguments_GreaterPos

# Register EventControl_Event_InputFunctionArguments_GreaterPos in _WMX3ApiPython:
_WMX3ApiPython.EventControl_Event_InputFunctionArguments_GreaterPos_swigregister(EventControl_Event_InputFunctionArguments_GreaterPos)
class EventControl_Event_InputFunctionArguments_LessPos(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    axis = property(_WMX3ApiPython.EventControl_Event_InputFunctionArguments_LessPos_axis_get, _WMX3ApiPython.EventControl_Event_InputFunctionArguments_LessPos_axis_set)
    pos = property(_WMX3ApiPython.EventControl_Event_InputFunctionArguments_LessPos_pos_get, _WMX3ApiPython.EventControl_Event_InputFunctionArguments_LessPos_pos_set)
    disablePositiveDirection = property(_WMX3ApiPython.EventControl_Event_InputFunctionArguments_LessPos_disablePositiveDirection_get, _WMX3ApiPython.EventControl_Event_InputFunctionArguments_LessPos_disablePositiveDirection_set)
    disableNegativeDirection = property(_WMX3ApiPython.EventControl_Event_InputFunctionArguments_LessPos_disableNegativeDirection_get, _WMX3ApiPython.EventControl_Event_InputFunctionArguments_LessPos_disableNegativeDirection_set)
    useFeedback = property(_WMX3ApiPython.EventControl_Event_InputFunctionArguments_LessPos_useFeedback_get, _WMX3ApiPython.EventControl_Event_InputFunctionArguments_LessPos_useFeedback_set)
    invert = property(_WMX3ApiPython.EventControl_Event_InputFunctionArguments_LessPos_invert_get, _WMX3ApiPython.EventControl_Event_InputFunctionArguments_LessPos_invert_set)

    def __init__(self):
        _WMX3ApiPython.EventControl_Event_InputFunctionArguments_LessPos_swiginit(self, _WMX3ApiPython.new_EventControl_Event_InputFunctionArguments_LessPos())
    __swig_destroy__ = _WMX3ApiPython.delete_EventControl_Event_InputFunctionArguments_LessPos

# Register EventControl_Event_InputFunctionArguments_LessPos in _WMX3ApiPython:
_WMX3ApiPython.EventControl_Event_InputFunctionArguments_LessPos_swigregister(EventControl_Event_InputFunctionArguments_LessPos)
class EventControl_Event_InputFunctionArguments_EqualVelocity(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    axis = property(_WMX3ApiPython.EventControl_Event_InputFunctionArguments_EqualVelocity_axis_get, _WMX3ApiPython.EventControl_Event_InputFunctionArguments_EqualVelocity_axis_set)
    velocity = property(_WMX3ApiPython.EventControl_Event_InputFunctionArguments_EqualVelocity_velocity_get, _WMX3ApiPython.EventControl_Event_InputFunctionArguments_EqualVelocity_velocity_set)
    useFeedback = property(_WMX3ApiPython.EventControl_Event_InputFunctionArguments_EqualVelocity_useFeedback_get, _WMX3ApiPython.EventControl_Event_InputFunctionArguments_EqualVelocity_useFeedback_set)
    invert = property(_WMX3ApiPython.EventControl_Event_InputFunctionArguments_EqualVelocity_invert_get, _WMX3ApiPython.EventControl_Event_InputFunctionArguments_EqualVelocity_invert_set)
    enableTolerance = property(_WMX3ApiPython.EventControl_Event_InputFunctionArguments_EqualVelocity_enableTolerance_get, _WMX3ApiPython.EventControl_Event_InputFunctionArguments_EqualVelocity_enableTolerance_set)
    tolerance = property(_WMX3ApiPython.EventControl_Event_InputFunctionArguments_EqualVelocity_tolerance_get, _WMX3ApiPython.EventControl_Event_InputFunctionArguments_EqualVelocity_tolerance_set)
    enableUnsigned = property(_WMX3ApiPython.EventControl_Event_InputFunctionArguments_EqualVelocity_enableUnsigned_get, _WMX3ApiPython.EventControl_Event_InputFunctionArguments_EqualVelocity_enableUnsigned_set)

    def __init__(self):
        _WMX3ApiPython.EventControl_Event_InputFunctionArguments_EqualVelocity_swiginit(self, _WMX3ApiPython.new_EventControl_Event_InputFunctionArguments_EqualVelocity())
    __swig_destroy__ = _WMX3ApiPython.delete_EventControl_Event_InputFunctionArguments_EqualVelocity

# Register EventControl_Event_InputFunctionArguments_EqualVelocity in _WMX3ApiPython:
_WMX3ApiPython.EventControl_Event_InputFunctionArguments_EqualVelocity_swigregister(EventControl_Event_InputFunctionArguments_EqualVelocity)
class EventControl_Event_InputFunctionArguments_GreaterVelocity(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    axis = property(_WMX3ApiPython.EventControl_Event_InputFunctionArguments_GreaterVelocity_axis_get, _WMX3ApiPython.EventControl_Event_InputFunctionArguments_GreaterVelocity_axis_set)
    velocity = property(_WMX3ApiPython.EventControl_Event_InputFunctionArguments_GreaterVelocity_velocity_get, _WMX3ApiPython.EventControl_Event_InputFunctionArguments_GreaterVelocity_velocity_set)
    useFeedback = property(_WMX3ApiPython.EventControl_Event_InputFunctionArguments_GreaterVelocity_useFeedback_get, _WMX3ApiPython.EventControl_Event_InputFunctionArguments_GreaterVelocity_useFeedback_set)
    invert = property(_WMX3ApiPython.EventControl_Event_InputFunctionArguments_GreaterVelocity_invert_get, _WMX3ApiPython.EventControl_Event_InputFunctionArguments_GreaterVelocity_invert_set)
    enableUnsigned = property(_WMX3ApiPython.EventControl_Event_InputFunctionArguments_GreaterVelocity_enableUnsigned_get, _WMX3ApiPython.EventControl_Event_InputFunctionArguments_GreaterVelocity_enableUnsigned_set)

    def __init__(self):
        _WMX3ApiPython.EventControl_Event_InputFunctionArguments_GreaterVelocity_swiginit(self, _WMX3ApiPython.new_EventControl_Event_InputFunctionArguments_GreaterVelocity())
    __swig_destroy__ = _WMX3ApiPython.delete_EventControl_Event_InputFunctionArguments_GreaterVelocity

# Register EventControl_Event_InputFunctionArguments_GreaterVelocity in _WMX3ApiPython:
_WMX3ApiPython.EventControl_Event_InputFunctionArguments_GreaterVelocity_swigregister(EventControl_Event_InputFunctionArguments_GreaterVelocity)
class EventControl_Event_InputFunctionArguments_LessVelocity(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    axis = property(_WMX3ApiPython.EventControl_Event_InputFunctionArguments_LessVelocity_axis_get, _WMX3ApiPython.EventControl_Event_InputFunctionArguments_LessVelocity_axis_set)
    velocity = property(_WMX3ApiPython.EventControl_Event_InputFunctionArguments_LessVelocity_velocity_get, _WMX3ApiPython.EventControl_Event_InputFunctionArguments_LessVelocity_velocity_set)
    useFeedback = property(_WMX3ApiPython.EventControl_Event_InputFunctionArguments_LessVelocity_useFeedback_get, _WMX3ApiPython.EventControl_Event_InputFunctionArguments_LessVelocity_useFeedback_set)
    invert = property(_WMX3ApiPython.EventControl_Event_InputFunctionArguments_LessVelocity_invert_get, _WMX3ApiPython.EventControl_Event_InputFunctionArguments_LessVelocity_invert_set)
    enableUnsigned = property(_WMX3ApiPython.EventControl_Event_InputFunctionArguments_LessVelocity_enableUnsigned_get, _WMX3ApiPython.EventControl_Event_InputFunctionArguments_LessVelocity_enableUnsigned_set)

    def __init__(self):
        _WMX3ApiPython.EventControl_Event_InputFunctionArguments_LessVelocity_swiginit(self, _WMX3ApiPython.new_EventControl_Event_InputFunctionArguments_LessVelocity())
    __swig_destroy__ = _WMX3ApiPython.delete_EventControl_Event_InputFunctionArguments_LessVelocity

# Register EventControl_Event_InputFunctionArguments_LessVelocity in _WMX3ApiPython:
_WMX3ApiPython.EventControl_Event_InputFunctionArguments_LessVelocity_swigregister(EventControl_Event_InputFunctionArguments_LessVelocity)
class EventControl_Event_InputFunctionArguments_EqualTrq(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    axis = property(_WMX3ApiPython.EventControl_Event_InputFunctionArguments_EqualTrq_axis_get, _WMX3ApiPython.EventControl_Event_InputFunctionArguments_EqualTrq_axis_set)
    trq = property(_WMX3ApiPython.EventControl_Event_InputFunctionArguments_EqualTrq_trq_get, _WMX3ApiPython.EventControl_Event_InputFunctionArguments_EqualTrq_trq_set)
    invert = property(_WMX3ApiPython.EventControl_Event_InputFunctionArguments_EqualTrq_invert_get, _WMX3ApiPython.EventControl_Event_InputFunctionArguments_EqualTrq_invert_set)
    enableTolerance = property(_WMX3ApiPython.EventControl_Event_InputFunctionArguments_EqualTrq_enableTolerance_get, _WMX3ApiPython.EventControl_Event_InputFunctionArguments_EqualTrq_enableTolerance_set)
    tolerance = property(_WMX3ApiPython.EventControl_Event_InputFunctionArguments_EqualTrq_tolerance_get, _WMX3ApiPython.EventControl_Event_InputFunctionArguments_EqualTrq_tolerance_set)
    enableUnsigned = property(_WMX3ApiPython.EventControl_Event_InputFunctionArguments_EqualTrq_enableUnsigned_get, _WMX3ApiPython.EventControl_Event_InputFunctionArguments_EqualTrq_enableUnsigned_set)

    def __init__(self):
        _WMX3ApiPython.EventControl_Event_InputFunctionArguments_EqualTrq_swiginit(self, _WMX3ApiPython.new_EventControl_Event_InputFunctionArguments_EqualTrq())
    __swig_destroy__ = _WMX3ApiPython.delete_EventControl_Event_InputFunctionArguments_EqualTrq

# Register EventControl_Event_InputFunctionArguments_EqualTrq in _WMX3ApiPython:
_WMX3ApiPython.EventControl_Event_InputFunctionArguments_EqualTrq_swigregister(EventControl_Event_InputFunctionArguments_EqualTrq)
class EventControl_Event_InputFunctionArguments_GreaterTrq(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    axis = property(_WMX3ApiPython.EventControl_Event_InputFunctionArguments_GreaterTrq_axis_get, _WMX3ApiPython.EventControl_Event_InputFunctionArguments_GreaterTrq_axis_set)
    trq = property(_WMX3ApiPython.EventControl_Event_InputFunctionArguments_GreaterTrq_trq_get, _WMX3ApiPython.EventControl_Event_InputFunctionArguments_GreaterTrq_trq_set)
    invert = property(_WMX3ApiPython.EventControl_Event_InputFunctionArguments_GreaterTrq_invert_get, _WMX3ApiPython.EventControl_Event_InputFunctionArguments_GreaterTrq_invert_set)
    enableUnsigned = property(_WMX3ApiPython.EventControl_Event_InputFunctionArguments_GreaterTrq_enableUnsigned_get, _WMX3ApiPython.EventControl_Event_InputFunctionArguments_GreaterTrq_enableUnsigned_set)

    def __init__(self):
        _WMX3ApiPython.EventControl_Event_InputFunctionArguments_GreaterTrq_swiginit(self, _WMX3ApiPython.new_EventControl_Event_InputFunctionArguments_GreaterTrq())
    __swig_destroy__ = _WMX3ApiPython.delete_EventControl_Event_InputFunctionArguments_GreaterTrq

# Register EventControl_Event_InputFunctionArguments_GreaterTrq in _WMX3ApiPython:
_WMX3ApiPython.EventControl_Event_InputFunctionArguments_GreaterTrq_swigregister(EventControl_Event_InputFunctionArguments_GreaterTrq)
class EventControl_Event_InputFunctionArguments_LessTrq(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    axis = property(_WMX3ApiPython.EventControl_Event_InputFunctionArguments_LessTrq_axis_get, _WMX3ApiPython.EventControl_Event_InputFunctionArguments_LessTrq_axis_set)
    trq = property(_WMX3ApiPython.EventControl_Event_InputFunctionArguments_LessTrq_trq_get, _WMX3ApiPython.EventControl_Event_InputFunctionArguments_LessTrq_trq_set)
    invert = property(_WMX3ApiPython.EventControl_Event_InputFunctionArguments_LessTrq_invert_get, _WMX3ApiPython.EventControl_Event_InputFunctionArguments_LessTrq_invert_set)
    enableUnsigned = property(_WMX3ApiPython.EventControl_Event_InputFunctionArguments_LessTrq_enableUnsigned_get, _WMX3ApiPython.EventControl_Event_InputFunctionArguments_LessTrq_enableUnsigned_set)

    def __init__(self):
        _WMX3ApiPython.EventControl_Event_InputFunctionArguments_LessTrq_swiginit(self, _WMX3ApiPython.new_EventControl_Event_InputFunctionArguments_LessTrq())
    __swig_destroy__ = _WMX3ApiPython.delete_EventControl_Event_InputFunctionArguments_LessTrq

# Register EventControl_Event_InputFunctionArguments_LessTrq in _WMX3ApiPython:
_WMX3ApiPython.EventControl_Event_InputFunctionArguments_LessTrq_swigregister(EventControl_Event_InputFunctionArguments_LessTrq)
class EventControl_Event_InputFunctionArguments_OpState(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    axis = property(_WMX3ApiPython.EventControl_Event_InputFunctionArguments_OpState_axis_get, _WMX3ApiPython.EventControl_Event_InputFunctionArguments_OpState_axis_set)
    opState = property(_WMX3ApiPython.EventControl_Event_InputFunctionArguments_OpState_opState_get, _WMX3ApiPython.EventControl_Event_InputFunctionArguments_OpState_opState_set)
    invert = property(_WMX3ApiPython.EventControl_Event_InputFunctionArguments_OpState_invert_get, _WMX3ApiPython.EventControl_Event_InputFunctionArguments_OpState_invert_set)

    def __init__(self):
        _WMX3ApiPython.EventControl_Event_InputFunctionArguments_OpState_swiginit(self, _WMX3ApiPython.new_EventControl_Event_InputFunctionArguments_OpState())
    __swig_destroy__ = _WMX3ApiPython.delete_EventControl_Event_InputFunctionArguments_OpState

# Register EventControl_Event_InputFunctionArguments_OpState in _WMX3ApiPython:
_WMX3ApiPython.EventControl_Event_InputFunctionArguments_OpState_swigregister(EventControl_Event_InputFunctionArguments_OpState)
class EventControl_Event_InputFunctionArguments_PosSET(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    axis = property(_WMX3ApiPython.EventControl_Event_InputFunctionArguments_PosSET_axis_get, _WMX3ApiPython.EventControl_Event_InputFunctionArguments_PosSET_axis_set)
    invert = property(_WMX3ApiPython.EventControl_Event_InputFunctionArguments_PosSET_invert_get, _WMX3ApiPython.EventControl_Event_InputFunctionArguments_PosSET_invert_set)

    def __init__(self):
        _WMX3ApiPython.EventControl_Event_InputFunctionArguments_PosSET_swiginit(self, _WMX3ApiPython.new_EventControl_Event_InputFunctionArguments_PosSET())
    __swig_destroy__ = _WMX3ApiPython.delete_EventControl_Event_InputFunctionArguments_PosSET

# Register EventControl_Event_InputFunctionArguments_PosSET in _WMX3ApiPython:
_WMX3ApiPython.EventControl_Event_InputFunctionArguments_PosSET_swigregister(EventControl_Event_InputFunctionArguments_PosSET)
class EventControl_Event_InputFunctionArguments_DelayedPosSET(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    axis = property(_WMX3ApiPython.EventControl_Event_InputFunctionArguments_DelayedPosSET_axis_get, _WMX3ApiPython.EventControl_Event_InputFunctionArguments_DelayedPosSET_axis_set)
    invert = property(_WMX3ApiPython.EventControl_Event_InputFunctionArguments_DelayedPosSET_invert_get, _WMX3ApiPython.EventControl_Event_InputFunctionArguments_DelayedPosSET_invert_set)

    def __init__(self):
        _WMX3ApiPython.EventControl_Event_InputFunctionArguments_DelayedPosSET_swiginit(self, _WMX3ApiPython.new_EventControl_Event_InputFunctionArguments_DelayedPosSET())
    __swig_destroy__ = _WMX3ApiPython.delete_EventControl_Event_InputFunctionArguments_DelayedPosSET

# Register EventControl_Event_InputFunctionArguments_DelayedPosSET in _WMX3ApiPython:
_WMX3ApiPython.EventControl_Event_InputFunctionArguments_DelayedPosSET_swigregister(EventControl_Event_InputFunctionArguments_DelayedPosSET)
class EventControl_Event_InputFunctionArguments_CommandDistributedEnd(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    axis = property(_WMX3ApiPython.EventControl_Event_InputFunctionArguments_CommandDistributedEnd_axis_get, _WMX3ApiPython.EventControl_Event_InputFunctionArguments_CommandDistributedEnd_axis_set)
    invert = property(_WMX3ApiPython.EventControl_Event_InputFunctionArguments_CommandDistributedEnd_invert_get, _WMX3ApiPython.EventControl_Event_InputFunctionArguments_CommandDistributedEnd_invert_set)

    def __init__(self):
        _WMX3ApiPython.EventControl_Event_InputFunctionArguments_CommandDistributedEnd_swiginit(self, _WMX3ApiPython.new_EventControl_Event_InputFunctionArguments_CommandDistributedEnd())
    __swig_destroy__ = _WMX3ApiPython.delete_EventControl_Event_InputFunctionArguments_CommandDistributedEnd

# Register EventControl_Event_InputFunctionArguments_CommandDistributedEnd in _WMX3ApiPython:
_WMX3ApiPython.EventControl_Event_InputFunctionArguments_CommandDistributedEnd_swigregister(EventControl_Event_InputFunctionArguments_CommandDistributedEnd)
class EventControl_Event_InputFunctionArguments_RemainingTime(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    axis = property(_WMX3ApiPython.EventControl_Event_InputFunctionArguments_RemainingTime_axis_get, _WMX3ApiPython.EventControl_Event_InputFunctionArguments_RemainingTime_axis_set)
    invert = property(_WMX3ApiPython.EventControl_Event_InputFunctionArguments_RemainingTime_invert_get, _WMX3ApiPython.EventControl_Event_InputFunctionArguments_RemainingTime_invert_set)
    timeMilliseconds = property(_WMX3ApiPython.EventControl_Event_InputFunctionArguments_RemainingTime_timeMilliseconds_get, _WMX3ApiPython.EventControl_Event_InputFunctionArguments_RemainingTime_timeMilliseconds_set)

    def __init__(self):
        _WMX3ApiPython.EventControl_Event_InputFunctionArguments_RemainingTime_swiginit(self, _WMX3ApiPython.new_EventControl_Event_InputFunctionArguments_RemainingTime())
    __swig_destroy__ = _WMX3ApiPython.delete_EventControl_Event_InputFunctionArguments_RemainingTime

# Register EventControl_Event_InputFunctionArguments_RemainingTime in _WMX3ApiPython:
_WMX3ApiPython.EventControl_Event_InputFunctionArguments_RemainingTime_swigregister(EventControl_Event_InputFunctionArguments_RemainingTime)
class EventControl_Event_InputFunctionArguments_RemainingDistance(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    axis = property(_WMX3ApiPython.EventControl_Event_InputFunctionArguments_RemainingDistance_axis_get, _WMX3ApiPython.EventControl_Event_InputFunctionArguments_RemainingDistance_axis_set)
    invert = property(_WMX3ApiPython.EventControl_Event_InputFunctionArguments_RemainingDistance_invert_get, _WMX3ApiPython.EventControl_Event_InputFunctionArguments_RemainingDistance_invert_set)
    distance = property(_WMX3ApiPython.EventControl_Event_InputFunctionArguments_RemainingDistance_distance_get, _WMX3ApiPython.EventControl_Event_InputFunctionArguments_RemainingDistance_distance_set)

    def __init__(self):
        _WMX3ApiPython.EventControl_Event_InputFunctionArguments_RemainingDistance_swiginit(self, _WMX3ApiPython.new_EventControl_Event_InputFunctionArguments_RemainingDistance())
    __swig_destroy__ = _WMX3ApiPython.delete_EventControl_Event_InputFunctionArguments_RemainingDistance

# Register EventControl_Event_InputFunctionArguments_RemainingDistance in _WMX3ApiPython:
_WMX3ApiPython.EventControl_Event_InputFunctionArguments_RemainingDistance_swigregister(EventControl_Event_InputFunctionArguments_RemainingDistance)
class EventControl_Event_InputFunctionArguments_CompletedDistance(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    axis = property(_WMX3ApiPython.EventControl_Event_InputFunctionArguments_CompletedDistance_axis_get, _WMX3ApiPython.EventControl_Event_InputFunctionArguments_CompletedDistance_axis_set)
    invert = property(_WMX3ApiPython.EventControl_Event_InputFunctionArguments_CompletedDistance_invert_get, _WMX3ApiPython.EventControl_Event_InputFunctionArguments_CompletedDistance_invert_set)
    distance = property(_WMX3ApiPython.EventControl_Event_InputFunctionArguments_CompletedDistance_distance_get, _WMX3ApiPython.EventControl_Event_InputFunctionArguments_CompletedDistance_distance_set)

    def __init__(self):
        _WMX3ApiPython.EventControl_Event_InputFunctionArguments_CompletedDistance_swiginit(self, _WMX3ApiPython.new_EventControl_Event_InputFunctionArguments_CompletedDistance())
    __swig_destroy__ = _WMX3ApiPython.delete_EventControl_Event_InputFunctionArguments_CompletedDistance

# Register EventControl_Event_InputFunctionArguments_CompletedDistance in _WMX3ApiPython:
_WMX3ApiPython.EventControl_Event_InputFunctionArguments_CompletedDistance_swigregister(EventControl_Event_InputFunctionArguments_CompletedDistance)
class EventControl_Event_InputFunctionArguments_CompletedTime(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    axis = property(_WMX3ApiPython.EventControl_Event_InputFunctionArguments_CompletedTime_axis_get, _WMX3ApiPython.EventControl_Event_InputFunctionArguments_CompletedTime_axis_set)
    invert = property(_WMX3ApiPython.EventControl_Event_InputFunctionArguments_CompletedTime_invert_get, _WMX3ApiPython.EventControl_Event_InputFunctionArguments_CompletedTime_invert_set)
    timeMilliseconds = property(_WMX3ApiPython.EventControl_Event_InputFunctionArguments_CompletedTime_timeMilliseconds_get, _WMX3ApiPython.EventControl_Event_InputFunctionArguments_CompletedTime_timeMilliseconds_set)

    def __init__(self):
        _WMX3ApiPython.EventControl_Event_InputFunctionArguments_CompletedTime_swiginit(self, _WMX3ApiPython.new_EventControl_Event_InputFunctionArguments_CompletedTime())
    __swig_destroy__ = _WMX3ApiPython.delete_EventControl_Event_InputFunctionArguments_CompletedTime

# Register EventControl_Event_InputFunctionArguments_CompletedTime in _WMX3ApiPython:
_WMX3ApiPython.EventControl_Event_InputFunctionArguments_CompletedTime_swigregister(EventControl_Event_InputFunctionArguments_CompletedTime)
class EventControl_Event_OutputFunctionArguments_None(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    singleShot = property(_WMX3ApiPython.EventControl_Event_OutputFunctionArguments_None_singleShot_get, _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_None_singleShot_set)
    disableAfterActivate = property(_WMX3ApiPython.EventControl_Event_OutputFunctionArguments_None_disableAfterActivate_get, _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_None_disableAfterActivate_set)

    def __init__(self):
        _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_None_swiginit(self, _WMX3ApiPython.new_EventControl_Event_OutputFunctionArguments_None())
    __swig_destroy__ = _WMX3ApiPython.delete_EventControl_Event_OutputFunctionArguments_None

# Register EventControl_Event_OutputFunctionArguments_None in _WMX3ApiPython:
_WMX3ApiPython.EventControl_Event_OutputFunctionArguments_None_swigregister(EventControl_Event_OutputFunctionArguments_None)
class EventControl_Event_OutputFunctionArguments_SetIOOutBit(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    byteAddress = property(_WMX3ApiPython.EventControl_Event_OutputFunctionArguments_SetIOOutBit_byteAddress_get, _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_SetIOOutBit_byteAddress_set)
    bitAddress = property(_WMX3ApiPython.EventControl_Event_OutputFunctionArguments_SetIOOutBit_bitAddress_get, _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_SetIOOutBit_bitAddress_set)
    invert = property(_WMX3ApiPython.EventControl_Event_OutputFunctionArguments_SetIOOutBit_invert_get, _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_SetIOOutBit_invert_set)
    singleShot = property(_WMX3ApiPython.EventControl_Event_OutputFunctionArguments_SetIOOutBit_singleShot_get, _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_SetIOOutBit_singleShot_set)
    disableAfterActivate = property(_WMX3ApiPython.EventControl_Event_OutputFunctionArguments_SetIOOutBit_disableAfterActivate_get, _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_SetIOOutBit_disableAfterActivate_set)
    setOffState = property(_WMX3ApiPython.EventControl_Event_OutputFunctionArguments_SetIOOutBit_setOffState_get, _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_SetIOOutBit_setOffState_set)

    def __init__(self):
        _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_SetIOOutBit_swiginit(self, _WMX3ApiPython.new_EventControl_Event_OutputFunctionArguments_SetIOOutBit())
    __swig_destroy__ = _WMX3ApiPython.delete_EventControl_Event_OutputFunctionArguments_SetIOOutBit

# Register EventControl_Event_OutputFunctionArguments_SetIOOutBit in _WMX3ApiPython:
_WMX3ApiPython.EventControl_Event_OutputFunctionArguments_SetIOOutBit_swigregister(EventControl_Event_OutputFunctionArguments_SetIOOutBit)
class EventControl_Event_OutputFunctionArguments_SetMBit(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    byteAddress = property(_WMX3ApiPython.EventControl_Event_OutputFunctionArguments_SetMBit_byteAddress_get, _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_SetMBit_byteAddress_set)
    bitAddress = property(_WMX3ApiPython.EventControl_Event_OutputFunctionArguments_SetMBit_bitAddress_get, _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_SetMBit_bitAddress_set)
    invert = property(_WMX3ApiPython.EventControl_Event_OutputFunctionArguments_SetMBit_invert_get, _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_SetMBit_invert_set)
    singleShot = property(_WMX3ApiPython.EventControl_Event_OutputFunctionArguments_SetMBit_singleShot_get, _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_SetMBit_singleShot_set)
    disableAfterActivate = property(_WMX3ApiPython.EventControl_Event_OutputFunctionArguments_SetMBit_disableAfterActivate_get, _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_SetMBit_disableAfterActivate_set)
    setOffState = property(_WMX3ApiPython.EventControl_Event_OutputFunctionArguments_SetMBit_setOffState_get, _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_SetMBit_setOffState_set)

    def __init__(self):
        _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_SetMBit_swiginit(self, _WMX3ApiPython.new_EventControl_Event_OutputFunctionArguments_SetMBit())
    __swig_destroy__ = _WMX3ApiPython.delete_EventControl_Event_OutputFunctionArguments_SetMBit

# Register EventControl_Event_OutputFunctionArguments_SetMBit in _WMX3ApiPython:
_WMX3ApiPython.EventControl_Event_OutputFunctionArguments_SetMBit_swigregister(EventControl_Event_OutputFunctionArguments_SetMBit)
class EventControl_Event_OutputFunctionArguments_EnableAnotherEvent(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    eventID = property(_WMX3ApiPython.EventControl_Event_OutputFunctionArguments_EnableAnotherEvent_eventID_get, _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_EnableAnotherEvent_eventID_set)
    invert = property(_WMX3ApiPython.EventControl_Event_OutputFunctionArguments_EnableAnotherEvent_invert_get, _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_EnableAnotherEvent_invert_set)
    singleShot = property(_WMX3ApiPython.EventControl_Event_OutputFunctionArguments_EnableAnotherEvent_singleShot_get, _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_EnableAnotherEvent_singleShot_set)
    disableAfterActivate = property(_WMX3ApiPython.EventControl_Event_OutputFunctionArguments_EnableAnotherEvent_disableAfterActivate_get, _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_EnableAnotherEvent_disableAfterActivate_set)
    setOffState = property(_WMX3ApiPython.EventControl_Event_OutputFunctionArguments_EnableAnotherEvent_setOffState_get, _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_EnableAnotherEvent_setOffState_set)

    def __init__(self):
        _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_EnableAnotherEvent_swiginit(self, _WMX3ApiPython.new_EventControl_Event_OutputFunctionArguments_EnableAnotherEvent())
    __swig_destroy__ = _WMX3ApiPython.delete_EventControl_Event_OutputFunctionArguments_EnableAnotherEvent

# Register EventControl_Event_OutputFunctionArguments_EnableAnotherEvent in _WMX3ApiPython:
_WMX3ApiPython.EventControl_Event_OutputFunctionArguments_EnableAnotherEvent_swigregister(EventControl_Event_OutputFunctionArguments_EnableAnotherEvent)
class EventControl_Event_OutputFunctionArguments_StopSingleAxis(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    axis = property(_WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StopSingleAxis_axis_get, _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StopSingleAxis_axis_set)
    singleShot = property(_WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StopSingleAxis_singleShot_get, _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StopSingleAxis_singleShot_set)
    disableAfterActivate = property(_WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StopSingleAxis_disableAfterActivate_get, _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StopSingleAxis_disableAfterActivate_set)

    def __init__(self):
        _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StopSingleAxis_swiginit(self, _WMX3ApiPython.new_EventControl_Event_OutputFunctionArguments_StopSingleAxis())
    __swig_destroy__ = _WMX3ApiPython.delete_EventControl_Event_OutputFunctionArguments_StopSingleAxis

# Register EventControl_Event_OutputFunctionArguments_StopSingleAxis in _WMX3ApiPython:
_WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StopSingleAxis_swigregister(EventControl_Event_OutputFunctionArguments_StopSingleAxis)
class EventControl_Event_OutputFunctionArguments_StartSinglePos(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    axis = property(_WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartSinglePos_axis_get, _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartSinglePos_axis_set)
    target = property(_WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartSinglePos_target_get, _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartSinglePos_target_set)
    type = property(_WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartSinglePos_type_get, _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartSinglePos_type_set)
    velocity = property(_WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartSinglePos_velocity_get, _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartSinglePos_velocity_set)
    acc = property(_WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartSinglePos_acc_get, _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartSinglePos_acc_set)
    dec = property(_WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartSinglePos_dec_get, _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartSinglePos_dec_set)
    jerkAcc = property(_WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartSinglePos_jerkAcc_get, _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartSinglePos_jerkAcc_set)
    jerkDec = property(_WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartSinglePos_jerkDec_get, _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartSinglePos_jerkDec_set)
    jerkAccRatio = property(_WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartSinglePos_jerkAccRatio_get, _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartSinglePos_jerkAccRatio_set)
    jerkDecRatio = property(_WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartSinglePos_jerkDecRatio_get, _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartSinglePos_jerkDecRatio_set)
    accTime = property(_WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartSinglePos_accTime_get, _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartSinglePos_accTime_set)
    decTime = property(_WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartSinglePos_decTime_get, _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartSinglePos_decTime_set)
    startingVelocity = property(_WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartSinglePos_startingVelocity_get, _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartSinglePos_startingVelocity_set)
    endVelocity = property(_WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartSinglePos_endVelocity_get, _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartSinglePos_endVelocity_set)
    secondVelocity = property(_WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartSinglePos_secondVelocity_get, _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartSinglePos_secondVelocity_set)
    singleShot = property(_WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartSinglePos_singleShot_get, _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartSinglePos_singleShot_set)
    disableAfterActivate = property(_WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartSinglePos_disableAfterActivate_get, _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartSinglePos_disableAfterActivate_set)

    def __init__(self):
        _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartSinglePos_swiginit(self, _WMX3ApiPython.new_EventControl_Event_OutputFunctionArguments_StartSinglePos())
    __swig_destroy__ = _WMX3ApiPython.delete_EventControl_Event_OutputFunctionArguments_StartSinglePos

# Register EventControl_Event_OutputFunctionArguments_StartSinglePos in _WMX3ApiPython:
_WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartSinglePos_swigregister(EventControl_Event_OutputFunctionArguments_StartSinglePos)
class EventControl_Event_OutputFunctionArguments_StartSingleMov(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    axis = property(_WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartSingleMov_axis_get, _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartSingleMov_axis_set)
    target = property(_WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartSingleMov_target_get, _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartSingleMov_target_set)
    type = property(_WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartSingleMov_type_get, _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartSingleMov_type_set)
    velocity = property(_WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartSingleMov_velocity_get, _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartSingleMov_velocity_set)
    acc = property(_WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartSingleMov_acc_get, _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartSingleMov_acc_set)
    dec = property(_WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartSingleMov_dec_get, _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartSingleMov_dec_set)
    jerkAcc = property(_WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartSingleMov_jerkAcc_get, _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartSingleMov_jerkAcc_set)
    jerkDec = property(_WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartSingleMov_jerkDec_get, _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartSingleMov_jerkDec_set)
    jerkAccRatio = property(_WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartSingleMov_jerkAccRatio_get, _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartSingleMov_jerkAccRatio_set)
    jerkDecRatio = property(_WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartSingleMov_jerkDecRatio_get, _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartSingleMov_jerkDecRatio_set)
    accTime = property(_WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartSingleMov_accTime_get, _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartSingleMov_accTime_set)
    decTime = property(_WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartSingleMov_decTime_get, _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartSingleMov_decTime_set)
    startingVelocity = property(_WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartSingleMov_startingVelocity_get, _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartSingleMov_startingVelocity_set)
    endVelocity = property(_WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartSingleMov_endVelocity_get, _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartSingleMov_endVelocity_set)
    secondVelocity = property(_WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartSingleMov_secondVelocity_get, _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartSingleMov_secondVelocity_set)
    singleShot = property(_WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartSingleMov_singleShot_get, _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartSingleMov_singleShot_set)
    disableAfterActivate = property(_WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartSingleMov_disableAfterActivate_get, _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartSingleMov_disableAfterActivate_set)

    def __init__(self):
        _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartSingleMov_swiginit(self, _WMX3ApiPython.new_EventControl_Event_OutputFunctionArguments_StartSingleMov())
    __swig_destroy__ = _WMX3ApiPython.delete_EventControl_Event_OutputFunctionArguments_StartSingleMov

# Register EventControl_Event_OutputFunctionArguments_StartSingleMov in _WMX3ApiPython:
_WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartSingleMov_swigregister(EventControl_Event_OutputFunctionArguments_StartSingleMov)
class EventControl_Event_OutputFunctionArguments_StartMultiplePos(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    axisCount = property(_WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartMultiplePos_axisCount_get, _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartMultiplePos_axisCount_set)
    axis = property(_WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartMultiplePos_axis_get, _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartMultiplePos_axis_set)

    def SetAxis(self, index, value):
        return _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartMultiplePos_SetAxis(self, index, value)

    def GetAxis(self, index):
        return _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartMultiplePos_GetAxis(self, index)
    target = property(_WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartMultiplePos_target_get, _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartMultiplePos_target_set)

    def SetTarget(self, index, value):
        return _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartMultiplePos_SetTarget(self, index, value)

    def GetTarget(self, index):
        return _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartMultiplePos_GetTarget(self, index)
    type = property(_WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartMultiplePos_type_get, _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartMultiplePos_type_set)

    def SetType(self, index, value):
        return _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartMultiplePos_SetType(self, index, value)

    def GetType(self, index):
        return _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartMultiplePos_GetType(self, index)
    velocity = property(_WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartMultiplePos_velocity_get, _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartMultiplePos_velocity_set)

    def SetVelocity(self, index, value):
        return _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartMultiplePos_SetVelocity(self, index, value)

    def GetVelocity(self, index):
        return _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartMultiplePos_GetVelocity(self, index)
    acc = property(_WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartMultiplePos_acc_get, _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartMultiplePos_acc_set)

    def SetAcc(self, index, value):
        return _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartMultiplePos_SetAcc(self, index, value)

    def GetAcc(self, index):
        return _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartMultiplePos_GetAcc(self, index)
    dec = property(_WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartMultiplePos_dec_get, _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartMultiplePos_dec_set)

    def SetDec(self, index, value):
        return _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartMultiplePos_SetDec(self, index, value)

    def GetDec(self, index):
        return _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartMultiplePos_GetDec(self, index)
    jerkAcc = property(_WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartMultiplePos_jerkAcc_get, _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartMultiplePos_jerkAcc_set)

    def SetJerkAcc(self, index, value):
        return _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartMultiplePos_SetJerkAcc(self, index, value)

    def GetJerkAcc(self, index):
        return _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartMultiplePos_GetJerkAcc(self, index)
    jerkDec = property(_WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartMultiplePos_jerkDec_get, _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartMultiplePos_jerkDec_set)

    def SetJerkDec(self, index, value):
        return _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartMultiplePos_SetJerkDec(self, index, value)

    def GetJerkDec(self, index):
        return _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartMultiplePos_GetJerkDec(self, index)
    jerkAccRatio = property(_WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartMultiplePos_jerkAccRatio_get, _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartMultiplePos_jerkAccRatio_set)

    def SetJerkAccRatio(self, index, value):
        return _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartMultiplePos_SetJerkAccRatio(self, index, value)

    def GetJerkAccRatio(self, index):
        return _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartMultiplePos_GetJerkAccRatio(self, index)
    jerkDecRatio = property(_WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartMultiplePos_jerkDecRatio_get, _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartMultiplePos_jerkDecRatio_set)

    def SetJerkDecRatio(self, index, value):
        return _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartMultiplePos_SetJerkDecRatio(self, index, value)

    def GetJerkDecRatio(self, index):
        return _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartMultiplePos_GetJerkDecRatio(self, index)
    accTime = property(_WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartMultiplePos_accTime_get, _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartMultiplePos_accTime_set)

    def SetAccTime(self, index, value):
        return _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartMultiplePos_SetAccTime(self, index, value)

    def GetAccTime(self, index):
        return _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartMultiplePos_GetAccTime(self, index)
    decTime = property(_WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartMultiplePos_decTime_get, _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartMultiplePos_decTime_set)

    def SetDecTime(self, index, value):
        return _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartMultiplePos_SetDecTime(self, index, value)

    def GetDecTime(self, index):
        return _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartMultiplePos_GetDecTime(self, index)
    startingVelocity = property(_WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartMultiplePos_startingVelocity_get, _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartMultiplePos_startingVelocity_set)

    def SetStartingVelocity(self, index, value):
        return _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartMultiplePos_SetStartingVelocity(self, index, value)

    def GetStartingVelocity(self, index):
        return _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartMultiplePos_GetStartingVelocity(self, index)
    endVelocity = property(_WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartMultiplePos_endVelocity_get, _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartMultiplePos_endVelocity_set)

    def SetEndVelocity(self, index, value):
        return _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartMultiplePos_SetEndVelocity(self, index, value)

    def GetEndVelocity(self, index):
        return _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartMultiplePos_GetEndVelocity(self, index)
    secondVelocity = property(_WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartMultiplePos_secondVelocity_get, _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartMultiplePos_secondVelocity_set)

    def SetSecondVelocity(self, index, value):
        return _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartMultiplePos_SetSecondVelocity(self, index, value)

    def GetSecondVelocity(self, index):
        return _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartMultiplePos_GetSecondVelocity(self, index)
    singleShot = property(_WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartMultiplePos_singleShot_get, _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartMultiplePos_singleShot_set)
    disableAfterActivate = property(_WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartMultiplePos_disableAfterActivate_get, _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartMultiplePos_disableAfterActivate_set)

    def __init__(self):
        _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartMultiplePos_swiginit(self, _WMX3ApiPython.new_EventControl_Event_OutputFunctionArguments_StartMultiplePos())
    __swig_destroy__ = _WMX3ApiPython.delete_EventControl_Event_OutputFunctionArguments_StartMultiplePos

# Register EventControl_Event_OutputFunctionArguments_StartMultiplePos in _WMX3ApiPython:
_WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartMultiplePos_swigregister(EventControl_Event_OutputFunctionArguments_StartMultiplePos)
class EventControl_Event_OutputFunctionArguments_StartMultipleMov(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    axisCount = property(_WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartMultipleMov_axisCount_get, _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartMultipleMov_axisCount_set)
    axis = property(_WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartMultipleMov_axis_get, _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartMultipleMov_axis_set)

    def SetAxis(self, index, value):
        return _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartMultipleMov_SetAxis(self, index, value)

    def GetAxis(self, index):
        return _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartMultipleMov_GetAxis(self, index)
    target = property(_WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartMultipleMov_target_get, _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartMultipleMov_target_set)

    def SetTarget(self, index, value):
        return _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartMultipleMov_SetTarget(self, index, value)

    def GetTarget(self, index):
        return _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartMultipleMov_GetTarget(self, index)
    type = property(_WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartMultipleMov_type_get, _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartMultipleMov_type_set)

    def SetType(self, index, value):
        return _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartMultipleMov_SetType(self, index, value)

    def GetType(self, index):
        return _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartMultipleMov_GetType(self, index)
    velocity = property(_WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartMultipleMov_velocity_get, _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartMultipleMov_velocity_set)

    def SetVelocity(self, index, value):
        return _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartMultipleMov_SetVelocity(self, index, value)

    def GetVelocity(self, index):
        return _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartMultipleMov_GetVelocity(self, index)
    acc = property(_WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartMultipleMov_acc_get, _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartMultipleMov_acc_set)

    def SetAcc(self, index, value):
        return _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartMultipleMov_SetAcc(self, index, value)

    def GetAcc(self, index):
        return _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartMultipleMov_GetAcc(self, index)
    dec = property(_WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartMultipleMov_dec_get, _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartMultipleMov_dec_set)

    def SetDec(self, index, value):
        return _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartMultipleMov_SetDec(self, index, value)

    def GetDec(self, index):
        return _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartMultipleMov_GetDec(self, index)
    jerkAcc = property(_WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartMultipleMov_jerkAcc_get, _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartMultipleMov_jerkAcc_set)

    def SetJerkAcc(self, index, value):
        return _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartMultipleMov_SetJerkAcc(self, index, value)

    def GetJerkAcc(self, index):
        return _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartMultipleMov_GetJerkAcc(self, index)
    jerkDec = property(_WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartMultipleMov_jerkDec_get, _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartMultipleMov_jerkDec_set)

    def SetJerkDec(self, index, value):
        return _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartMultipleMov_SetJerkDec(self, index, value)

    def GetJerkDec(self, index):
        return _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartMultipleMov_GetJerkDec(self, index)
    jerkAccRatio = property(_WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartMultipleMov_jerkAccRatio_get, _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartMultipleMov_jerkAccRatio_set)

    def SetJerkAccRatio(self, index, value):
        return _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartMultipleMov_SetJerkAccRatio(self, index, value)

    def GetJerkAccRatio(self, index):
        return _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartMultipleMov_GetJerkAccRatio(self, index)
    jerkDecRatio = property(_WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartMultipleMov_jerkDecRatio_get, _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartMultipleMov_jerkDecRatio_set)

    def SetJerkDecRatio(self, index, value):
        return _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartMultipleMov_SetJerkDecRatio(self, index, value)

    def GetJerkDecRatio(self, index):
        return _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartMultipleMov_GetJerkDecRatio(self, index)
    accTime = property(_WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartMultipleMov_accTime_get, _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartMultipleMov_accTime_set)

    def SetAccTime(self, index, value):
        return _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartMultipleMov_SetAccTime(self, index, value)

    def GetAccTime(self, index):
        return _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartMultipleMov_GetAccTime(self, index)
    decTime = property(_WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartMultipleMov_decTime_get, _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartMultipleMov_decTime_set)

    def SetDecTime(self, index, value):
        return _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartMultipleMov_SetDecTime(self, index, value)

    def GetDecTime(self, index):
        return _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartMultipleMov_GetDecTime(self, index)
    startingVelocity = property(_WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartMultipleMov_startingVelocity_get, _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartMultipleMov_startingVelocity_set)

    def SetStartingVelocity(self, index, value):
        return _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartMultipleMov_SetStartingVelocity(self, index, value)

    def GetStartingVelocity(self, index):
        return _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartMultipleMov_GetStartingVelocity(self, index)
    endVelocity = property(_WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartMultipleMov_endVelocity_get, _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartMultipleMov_endVelocity_set)

    def SetEndVelocity(self, index, value):
        return _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartMultipleMov_SetEndVelocity(self, index, value)

    def GetEndVelocity(self, index):
        return _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartMultipleMov_GetEndVelocity(self, index)
    secondVelocity = property(_WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartMultipleMov_secondVelocity_get, _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartMultipleMov_secondVelocity_set)

    def SetSecondVelocity(self, index, value):
        return _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartMultipleMov_SetSecondVelocity(self, index, value)

    def GetSecondVelocity(self, index):
        return _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartMultipleMov_GetSecondVelocity(self, index)
    singleShot = property(_WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartMultipleMov_singleShot_get, _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartMultipleMov_singleShot_set)
    disableAfterActivate = property(_WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartMultipleMov_disableAfterActivate_get, _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartMultipleMov_disableAfterActivate_set)

    def __init__(self):
        _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartMultipleMov_swiginit(self, _WMX3ApiPython.new_EventControl_Event_OutputFunctionArguments_StartMultipleMov())
    __swig_destroy__ = _WMX3ApiPython.delete_EventControl_Event_OutputFunctionArguments_StartMultipleMov

# Register EventControl_Event_OutputFunctionArguments_StartMultipleMov in _WMX3ApiPython:
_WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartMultipleMov_swigregister(EventControl_Event_OutputFunctionArguments_StartMultipleMov)
class EventControl_Event_OutputFunctionArguments_LinearIntplPos(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    axisCount = property(_WMX3ApiPython.EventControl_Event_OutputFunctionArguments_LinearIntplPos_axisCount_get, _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_LinearIntplPos_axisCount_set)
    axis = property(_WMX3ApiPython.EventControl_Event_OutputFunctionArguments_LinearIntplPos_axis_get, _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_LinearIntplPos_axis_set)

    def SetAxis(self, index, value):
        return _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_LinearIntplPos_SetAxis(self, index, value)

    def GetAxis(self, index):
        return _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_LinearIntplPos_GetAxis(self, index)
    target = property(_WMX3ApiPython.EventControl_Event_OutputFunctionArguments_LinearIntplPos_target_get, _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_LinearIntplPos_target_set)

    def SetTarget(self, index, value):
        return _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_LinearIntplPos_SetTarget(self, index, value)

    def GetTarget(self, index):
        return _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_LinearIntplPos_GetTarget(self, index)
    maxVelocity = property(_WMX3ApiPython.EventControl_Event_OutputFunctionArguments_LinearIntplPos_maxVelocity_get, _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_LinearIntplPos_maxVelocity_set)

    def SetMaxVelocity(self, index, value):
        return _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_LinearIntplPos_SetMaxVelocity(self, index, value)

    def GetMaxVelocity(self, index):
        return _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_LinearIntplPos_GetMaxVelocity(self, index)
    maxAcc = property(_WMX3ApiPython.EventControl_Event_OutputFunctionArguments_LinearIntplPos_maxAcc_get, _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_LinearIntplPos_maxAcc_set)

    def SetMaxAcc(self, index, value):
        return _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_LinearIntplPos_SetMaxAcc(self, index, value)

    def GetMaxAcc(self, index):
        return _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_LinearIntplPos_GetMaxAcc(self, index)
    maxDec = property(_WMX3ApiPython.EventControl_Event_OutputFunctionArguments_LinearIntplPos_maxDec_get, _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_LinearIntplPos_maxDec_set)

    def SetMaxDec(self, index, value):
        return _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_LinearIntplPos_SetMaxDec(self, index, value)

    def GetMaxDec(self, index):
        return _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_LinearIntplPos_GetMaxDec(self, index)
    maxJerkAcc = property(_WMX3ApiPython.EventControl_Event_OutputFunctionArguments_LinearIntplPos_maxJerkAcc_get, _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_LinearIntplPos_maxJerkAcc_set)

    def SetMaxJerkAcc(self, index, value):
        return _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_LinearIntplPos_SetMaxJerkAcc(self, index, value)

    def GetMaxJerkAcc(self, index):
        return _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_LinearIntplPos_GetMaxJerkAcc(self, index)
    maxJerkDec = property(_WMX3ApiPython.EventControl_Event_OutputFunctionArguments_LinearIntplPos_maxJerkDec_get, _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_LinearIntplPos_maxJerkDec_set)

    def SetMaxJerkDec(self, index, value):
        return _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_LinearIntplPos_SetMaxJerkDec(self, index, value)

    def GetMaxJerkDec(self, index):
        return _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_LinearIntplPos_GetMaxJerkDec(self, index)
    type = property(_WMX3ApiPython.EventControl_Event_OutputFunctionArguments_LinearIntplPos_type_get, _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_LinearIntplPos_type_set)
    velocity = property(_WMX3ApiPython.EventControl_Event_OutputFunctionArguments_LinearIntplPos_velocity_get, _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_LinearIntplPos_velocity_set)
    acc = property(_WMX3ApiPython.EventControl_Event_OutputFunctionArguments_LinearIntplPos_acc_get, _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_LinearIntplPos_acc_set)
    dec = property(_WMX3ApiPython.EventControl_Event_OutputFunctionArguments_LinearIntplPos_dec_get, _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_LinearIntplPos_dec_set)
    jerkAcc = property(_WMX3ApiPython.EventControl_Event_OutputFunctionArguments_LinearIntplPos_jerkAcc_get, _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_LinearIntplPos_jerkAcc_set)
    jerkDec = property(_WMX3ApiPython.EventControl_Event_OutputFunctionArguments_LinearIntplPos_jerkDec_get, _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_LinearIntplPos_jerkDec_set)
    jerkAccRatio = property(_WMX3ApiPython.EventControl_Event_OutputFunctionArguments_LinearIntplPos_jerkAccRatio_get, _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_LinearIntplPos_jerkAccRatio_set)
    jerkDecRatio = property(_WMX3ApiPython.EventControl_Event_OutputFunctionArguments_LinearIntplPos_jerkDecRatio_get, _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_LinearIntplPos_jerkDecRatio_set)
    accTime = property(_WMX3ApiPython.EventControl_Event_OutputFunctionArguments_LinearIntplPos_accTime_get, _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_LinearIntplPos_accTime_set)
    decTime = property(_WMX3ApiPython.EventControl_Event_OutputFunctionArguments_LinearIntplPos_decTime_get, _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_LinearIntplPos_decTime_set)
    startingVelocity = property(_WMX3ApiPython.EventControl_Event_OutputFunctionArguments_LinearIntplPos_startingVelocity_get, _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_LinearIntplPos_startingVelocity_set)
    endVelocity = property(_WMX3ApiPython.EventControl_Event_OutputFunctionArguments_LinearIntplPos_endVelocity_get, _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_LinearIntplPos_endVelocity_set)
    secondVelocity = property(_WMX3ApiPython.EventControl_Event_OutputFunctionArguments_LinearIntplPos_secondVelocity_get, _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_LinearIntplPos_secondVelocity_set)
    singleShot = property(_WMX3ApiPython.EventControl_Event_OutputFunctionArguments_LinearIntplPos_singleShot_get, _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_LinearIntplPos_singleShot_set)
    disableAfterActivate = property(_WMX3ApiPython.EventControl_Event_OutputFunctionArguments_LinearIntplPos_disableAfterActivate_get, _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_LinearIntplPos_disableAfterActivate_set)

    def __init__(self):
        _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_LinearIntplPos_swiginit(self, _WMX3ApiPython.new_EventControl_Event_OutputFunctionArguments_LinearIntplPos())
    __swig_destroy__ = _WMX3ApiPython.delete_EventControl_Event_OutputFunctionArguments_LinearIntplPos

# Register EventControl_Event_OutputFunctionArguments_LinearIntplPos in _WMX3ApiPython:
_WMX3ApiPython.EventControl_Event_OutputFunctionArguments_LinearIntplPos_swigregister(EventControl_Event_OutputFunctionArguments_LinearIntplPos)
class EventControl_Event_OutputFunctionArguments_LinearIntplMov(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    axisCount = property(_WMX3ApiPython.EventControl_Event_OutputFunctionArguments_LinearIntplMov_axisCount_get, _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_LinearIntplMov_axisCount_set)
    axis = property(_WMX3ApiPython.EventControl_Event_OutputFunctionArguments_LinearIntplMov_axis_get, _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_LinearIntplMov_axis_set)

    def SetAxis(self, index, value):
        return _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_LinearIntplMov_SetAxis(self, index, value)

    def GetAxis(self, index):
        return _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_LinearIntplMov_GetAxis(self, index)
    target = property(_WMX3ApiPython.EventControl_Event_OutputFunctionArguments_LinearIntplMov_target_get, _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_LinearIntplMov_target_set)

    def SetTarget(self, index, value):
        return _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_LinearIntplMov_SetTarget(self, index, value)

    def GetTarget(self, index):
        return _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_LinearIntplMov_GetTarget(self, index)
    maxVelocity = property(_WMX3ApiPython.EventControl_Event_OutputFunctionArguments_LinearIntplMov_maxVelocity_get, _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_LinearIntplMov_maxVelocity_set)

    def SetMaxVelocity(self, index, value):
        return _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_LinearIntplMov_SetMaxVelocity(self, index, value)

    def GetMaxVelocity(self, index):
        return _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_LinearIntplMov_GetMaxVelocity(self, index)
    maxAcc = property(_WMX3ApiPython.EventControl_Event_OutputFunctionArguments_LinearIntplMov_maxAcc_get, _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_LinearIntplMov_maxAcc_set)

    def SetMaxAcc(self, index, value):
        return _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_LinearIntplMov_SetMaxAcc(self, index, value)

    def GetMaxAcc(self, index):
        return _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_LinearIntplMov_GetMaxAcc(self, index)
    maxDec = property(_WMX3ApiPython.EventControl_Event_OutputFunctionArguments_LinearIntplMov_maxDec_get, _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_LinearIntplMov_maxDec_set)

    def SetMaxDec(self, index, value):
        return _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_LinearIntplMov_SetMaxDec(self, index, value)

    def GetMaxDec(self, index):
        return _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_LinearIntplMov_GetMaxDec(self, index)
    maxJerkAcc = property(_WMX3ApiPython.EventControl_Event_OutputFunctionArguments_LinearIntplMov_maxJerkAcc_get, _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_LinearIntplMov_maxJerkAcc_set)

    def SetMaxJerkAcc(self, index, value):
        return _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_LinearIntplMov_SetMaxJerkAcc(self, index, value)

    def GetMaxJerkAcc(self, index):
        return _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_LinearIntplMov_GetMaxJerkAcc(self, index)
    maxJerkDec = property(_WMX3ApiPython.EventControl_Event_OutputFunctionArguments_LinearIntplMov_maxJerkDec_get, _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_LinearIntplMov_maxJerkDec_set)

    def SetMaxJerkDec(self, index, value):
        return _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_LinearIntplMov_SetMaxJerkDec(self, index, value)

    def GetMaxJerkDec(self, index):
        return _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_LinearIntplMov_GetMaxJerkDec(self, index)
    type = property(_WMX3ApiPython.EventControl_Event_OutputFunctionArguments_LinearIntplMov_type_get, _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_LinearIntplMov_type_set)
    velocity = property(_WMX3ApiPython.EventControl_Event_OutputFunctionArguments_LinearIntplMov_velocity_get, _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_LinearIntplMov_velocity_set)
    acc = property(_WMX3ApiPython.EventControl_Event_OutputFunctionArguments_LinearIntplMov_acc_get, _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_LinearIntplMov_acc_set)
    dec = property(_WMX3ApiPython.EventControl_Event_OutputFunctionArguments_LinearIntplMov_dec_get, _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_LinearIntplMov_dec_set)
    jerkAcc = property(_WMX3ApiPython.EventControl_Event_OutputFunctionArguments_LinearIntplMov_jerkAcc_get, _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_LinearIntplMov_jerkAcc_set)
    jerkDec = property(_WMX3ApiPython.EventControl_Event_OutputFunctionArguments_LinearIntplMov_jerkDec_get, _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_LinearIntplMov_jerkDec_set)
    jerkAccRatio = property(_WMX3ApiPython.EventControl_Event_OutputFunctionArguments_LinearIntplMov_jerkAccRatio_get, _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_LinearIntplMov_jerkAccRatio_set)
    jerkDecRatio = property(_WMX3ApiPython.EventControl_Event_OutputFunctionArguments_LinearIntplMov_jerkDecRatio_get, _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_LinearIntplMov_jerkDecRatio_set)
    accTime = property(_WMX3ApiPython.EventControl_Event_OutputFunctionArguments_LinearIntplMov_accTime_get, _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_LinearIntplMov_accTime_set)
    decTime = property(_WMX3ApiPython.EventControl_Event_OutputFunctionArguments_LinearIntplMov_decTime_get, _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_LinearIntplMov_decTime_set)
    startingVelocity = property(_WMX3ApiPython.EventControl_Event_OutputFunctionArguments_LinearIntplMov_startingVelocity_get, _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_LinearIntplMov_startingVelocity_set)
    endVelocity = property(_WMX3ApiPython.EventControl_Event_OutputFunctionArguments_LinearIntplMov_endVelocity_get, _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_LinearIntplMov_endVelocity_set)
    secondVelocity = property(_WMX3ApiPython.EventControl_Event_OutputFunctionArguments_LinearIntplMov_secondVelocity_get, _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_LinearIntplMov_secondVelocity_set)
    singleShot = property(_WMX3ApiPython.EventControl_Event_OutputFunctionArguments_LinearIntplMov_singleShot_get, _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_LinearIntplMov_singleShot_set)
    disableAfterActivate = property(_WMX3ApiPython.EventControl_Event_OutputFunctionArguments_LinearIntplMov_disableAfterActivate_get, _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_LinearIntplMov_disableAfterActivate_set)

    def __init__(self):
        _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_LinearIntplMov_swiginit(self, _WMX3ApiPython.new_EventControl_Event_OutputFunctionArguments_LinearIntplMov())
    __swig_destroy__ = _WMX3ApiPython.delete_EventControl_Event_OutputFunctionArguments_LinearIntplMov

# Register EventControl_Event_OutputFunctionArguments_LinearIntplMov in _WMX3ApiPython:
_WMX3ApiPython.EventControl_Event_OutputFunctionArguments_LinearIntplMov_swigregister(EventControl_Event_OutputFunctionArguments_LinearIntplMov)
class EventControl_Event_OutputFunctionArguments_StartAPIBuffer(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    channel = property(_WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartAPIBuffer_channel_get, _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartAPIBuffer_channel_set)
    singleShot = property(_WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartAPIBuffer_singleShot_get, _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartAPIBuffer_singleShot_set)
    disableAfterActivate = property(_WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartAPIBuffer_disableAfterActivate_get, _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartAPIBuffer_disableAfterActivate_set)

    def __init__(self):
        _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartAPIBuffer_swiginit(self, _WMX3ApiPython.new_EventControl_Event_OutputFunctionArguments_StartAPIBuffer())
    __swig_destroy__ = _WMX3ApiPython.delete_EventControl_Event_OutputFunctionArguments_StartAPIBuffer

# Register EventControl_Event_OutputFunctionArguments_StartAPIBuffer in _WMX3ApiPython:
_WMX3ApiPython.EventControl_Event_OutputFunctionArguments_StartAPIBuffer_swigregister(EventControl_Event_OutputFunctionArguments_StartAPIBuffer)
class EventControl_Event_OutputFunctionArguments_ExecQuickStopSingleAxis(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    axis = property(_WMX3ApiPython.EventControl_Event_OutputFunctionArguments_ExecQuickStopSingleAxis_axis_get, _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_ExecQuickStopSingleAxis_axis_set)
    singleShot = property(_WMX3ApiPython.EventControl_Event_OutputFunctionArguments_ExecQuickStopSingleAxis_singleShot_get, _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_ExecQuickStopSingleAxis_singleShot_set)
    disableAfterActivate = property(_WMX3ApiPython.EventControl_Event_OutputFunctionArguments_ExecQuickStopSingleAxis_disableAfterActivate_get, _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_ExecQuickStopSingleAxis_disableAfterActivate_set)

    def __init__(self):
        _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_ExecQuickStopSingleAxis_swiginit(self, _WMX3ApiPython.new_EventControl_Event_OutputFunctionArguments_ExecQuickStopSingleAxis())
    __swig_destroy__ = _WMX3ApiPython.delete_EventControl_Event_OutputFunctionArguments_ExecQuickStopSingleAxis

# Register EventControl_Event_OutputFunctionArguments_ExecQuickStopSingleAxis in _WMX3ApiPython:
_WMX3ApiPython.EventControl_Event_OutputFunctionArguments_ExecQuickStopSingleAxis_swigregister(EventControl_Event_OutputFunctionArguments_ExecQuickStopSingleAxis)
class EventControl_Event_OutputFunctionArguments_OverrideVelSingleAxis(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    axis = property(_WMX3ApiPython.EventControl_Event_OutputFunctionArguments_OverrideVelSingleAxis_axis_get, _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_OverrideVelSingleAxis_axis_set)
    velocity = property(_WMX3ApiPython.EventControl_Event_OutputFunctionArguments_OverrideVelSingleAxis_velocity_get, _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_OverrideVelSingleAxis_velocity_set)
    singleShot = property(_WMX3ApiPython.EventControl_Event_OutputFunctionArguments_OverrideVelSingleAxis_singleShot_get, _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_OverrideVelSingleAxis_singleShot_set)
    disableAfterActivate = property(_WMX3ApiPython.EventControl_Event_OutputFunctionArguments_OverrideVelSingleAxis_disableAfterActivate_get, _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_OverrideVelSingleAxis_disableAfterActivate_set)

    def __init__(self):
        _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_OverrideVelSingleAxis_swiginit(self, _WMX3ApiPython.new_EventControl_Event_OutputFunctionArguments_OverrideVelSingleAxis())
    __swig_destroy__ = _WMX3ApiPython.delete_EventControl_Event_OutputFunctionArguments_OverrideVelSingleAxis

# Register EventControl_Event_OutputFunctionArguments_OverrideVelSingleAxis in _WMX3ApiPython:
_WMX3ApiPython.EventControl_Event_OutputFunctionArguments_OverrideVelSingleAxis_swigregister(EventControl_Event_OutputFunctionArguments_OverrideVelSingleAxis)
class EventControl_Event_OutputFunctionArguments_ExecEStop(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    eStopLevel = property(_WMX3ApiPython.EventControl_Event_OutputFunctionArguments_ExecEStop_eStopLevel_get, _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_ExecEStop_eStopLevel_set)
    singleShot = property(_WMX3ApiPython.EventControl_Event_OutputFunctionArguments_ExecEStop_singleShot_get, _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_ExecEStop_singleShot_set)
    disableAfterActivate = property(_WMX3ApiPython.EventControl_Event_OutputFunctionArguments_ExecEStop_disableAfterActivate_get, _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_ExecEStop_disableAfterActivate_set)

    def __init__(self):
        _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_ExecEStop_swiginit(self, _WMX3ApiPython.new_EventControl_Event_OutputFunctionArguments_ExecEStop())
    __swig_destroy__ = _WMX3ApiPython.delete_EventControl_Event_OutputFunctionArguments_ExecEStop

# Register EventControl_Event_OutputFunctionArguments_ExecEStop in _WMX3ApiPython:
_WMX3ApiPython.EventControl_Event_OutputFunctionArguments_ExecEStop_swigregister(EventControl_Event_OutputFunctionArguments_ExecEStop)
class EventControl_Event_OutputFunctionArguments_TriggerFlightRecorder(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    singleShot = property(_WMX3ApiPython.EventControl_Event_OutputFunctionArguments_TriggerFlightRecorder_singleShot_get, _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_TriggerFlightRecorder_singleShot_set)
    disableAfterActivate = property(_WMX3ApiPython.EventControl_Event_OutputFunctionArguments_TriggerFlightRecorder_disableAfterActivate_get, _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_TriggerFlightRecorder_disableAfterActivate_set)

    def __init__(self):
        _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_TriggerFlightRecorder_swiginit(self, _WMX3ApiPython.new_EventControl_Event_OutputFunctionArguments_TriggerFlightRecorder())
    __swig_destroy__ = _WMX3ApiPython.delete_EventControl_Event_OutputFunctionArguments_TriggerFlightRecorder

# Register EventControl_Event_OutputFunctionArguments_TriggerFlightRecorder in _WMX3ApiPython:
_WMX3ApiPython.EventControl_Event_OutputFunctionArguments_TriggerFlightRecorder_swigregister(EventControl_Event_OutputFunctionArguments_TriggerFlightRecorder)
class EventControl_Event_OutputFunctionArguments_ResetFlightRecorder(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    singleShot = property(_WMX3ApiPython.EventControl_Event_OutputFunctionArguments_ResetFlightRecorder_singleShot_get, _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_ResetFlightRecorder_singleShot_set)
    disableAfterActivate = property(_WMX3ApiPython.EventControl_Event_OutputFunctionArguments_ResetFlightRecorder_disableAfterActivate_get, _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_ResetFlightRecorder_disableAfterActivate_set)

    def __init__(self):
        _WMX3ApiPython.EventControl_Event_OutputFunctionArguments_ResetFlightRecorder_swiginit(self, _WMX3ApiPython.new_EventControl_Event_OutputFunctionArguments_ResetFlightRecorder())
    __swig_destroy__ = _WMX3ApiPython.delete_EventControl_Event_OutputFunctionArguments_ResetFlightRecorder

# Register EventControl_Event_OutputFunctionArguments_ResetFlightRecorder in _WMX3ApiPython:
_WMX3ApiPython.EventControl_Event_OutputFunctionArguments_ResetFlightRecorder_swigregister(EventControl_Event_OutputFunctionArguments_ResetFlightRecorder)
class EventControl_Event(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def GetData(self, event):
        return _WMX3ApiPython.EventControl_Event_GetData(self, event)

    def SetData(self, event):
        return _WMX3ApiPython.EventControl_Event_SetData(self, event)
    enabled = property(_WMX3ApiPython.EventControl_Event_enabled_get, _WMX3ApiPython.EventControl_Event_enabled_set)
    inputFunction = property(_WMX3ApiPython.EventControl_Event_inputFunction_get, _WMX3ApiPython.EventControl_Event_inputFunction_set)
    input_none = property(_WMX3ApiPython.EventControl_Event_input_none_get, _WMX3ApiPython.EventControl_Event_input_none_set)
    input_ioBit = property(_WMX3ApiPython.EventControl_Event_input_ioBit_get, _WMX3ApiPython.EventControl_Event_input_ioBit_set)
    input_notIOBit = property(_WMX3ApiPython.EventControl_Event_input_notIOBit_get, _WMX3ApiPython.EventControl_Event_input_notIOBit_set)
    input_orIOBit = property(_WMX3ApiPython.EventControl_Event_input_orIOBit_get, _WMX3ApiPython.EventControl_Event_input_orIOBit_set)
    input_andIOBit = property(_WMX3ApiPython.EventControl_Event_input_andIOBit_get, _WMX3ApiPython.EventControl_Event_input_andIOBit_set)
    input_xorIOBit = property(_WMX3ApiPython.EventControl_Event_input_xorIOBit_get, _WMX3ApiPython.EventControl_Event_input_xorIOBit_set)
    input_nandIOBit = property(_WMX3ApiPython.EventControl_Event_input_nandIOBit_get, _WMX3ApiPython.EventControl_Event_input_nandIOBit_set)
    input_norIOBit = property(_WMX3ApiPython.EventControl_Event_input_norIOBit_get, _WMX3ApiPython.EventControl_Event_input_norIOBit_set)
    input_xnorIOBit = property(_WMX3ApiPython.EventControl_Event_input_xnorIOBit_get, _WMX3ApiPython.EventControl_Event_input_xnorIOBit_set)
    input_delayIOBit = property(_WMX3ApiPython.EventControl_Event_input_delayIOBit_get, _WMX3ApiPython.EventControl_Event_input_delayIOBit_set)
    input_mBit = property(_WMX3ApiPython.EventControl_Event_input_mBit_get, _WMX3ApiPython.EventControl_Event_input_mBit_set)
    input_notMBit = property(_WMX3ApiPython.EventControl_Event_input_notMBit_get, _WMX3ApiPython.EventControl_Event_input_notMBit_set)
    input_orMBit = property(_WMX3ApiPython.EventControl_Event_input_orMBit_get, _WMX3ApiPython.EventControl_Event_input_orMBit_set)
    input_andMBit = property(_WMX3ApiPython.EventControl_Event_input_andMBit_get, _WMX3ApiPython.EventControl_Event_input_andMBit_set)
    input_xorMBit = property(_WMX3ApiPython.EventControl_Event_input_xorMBit_get, _WMX3ApiPython.EventControl_Event_input_xorMBit_set)
    input_nandMBit = property(_WMX3ApiPython.EventControl_Event_input_nandMBit_get, _WMX3ApiPython.EventControl_Event_input_nandMBit_set)
    input_norMBit = property(_WMX3ApiPython.EventControl_Event_input_norMBit_get, _WMX3ApiPython.EventControl_Event_input_norMBit_set)
    input_xnorMBit = property(_WMX3ApiPython.EventControl_Event_input_xnorMBit_get, _WMX3ApiPython.EventControl_Event_input_xnorMBit_set)
    input_delayMBit = property(_WMX3ApiPython.EventControl_Event_input_delayMBit_get, _WMX3ApiPython.EventControl_Event_input_delayMBit_set)
    input_anotherEvent = property(_WMX3ApiPython.EventControl_Event_input_anotherEvent_get, _WMX3ApiPython.EventControl_Event_input_anotherEvent_set)
    input_delayAnotherEvent = property(_WMX3ApiPython.EventControl_Event_input_delayAnotherEvent_get, _WMX3ApiPython.EventControl_Event_input_delayAnotherEvent_set)
    input_equalPos = property(_WMX3ApiPython.EventControl_Event_input_equalPos_get, _WMX3ApiPython.EventControl_Event_input_equalPos_set)
    input_greaterPos = property(_WMX3ApiPython.EventControl_Event_input_greaterPos_get, _WMX3ApiPython.EventControl_Event_input_greaterPos_set)
    input_lessPos = property(_WMX3ApiPython.EventControl_Event_input_lessPos_get, _WMX3ApiPython.EventControl_Event_input_lessPos_set)
    input_equalVelocity = property(_WMX3ApiPython.EventControl_Event_input_equalVelocity_get, _WMX3ApiPython.EventControl_Event_input_equalVelocity_set)
    input_greaterVelocity = property(_WMX3ApiPython.EventControl_Event_input_greaterVelocity_get, _WMX3ApiPython.EventControl_Event_input_greaterVelocity_set)
    input_lessVelocity = property(_WMX3ApiPython.EventControl_Event_input_lessVelocity_get, _WMX3ApiPython.EventControl_Event_input_lessVelocity_set)
    input_equalTrq = property(_WMX3ApiPython.EventControl_Event_input_equalTrq_get, _WMX3ApiPython.EventControl_Event_input_equalTrq_set)
    input_greaterTrq = property(_WMX3ApiPython.EventControl_Event_input_greaterTrq_get, _WMX3ApiPython.EventControl_Event_input_greaterTrq_set)
    input_lessTrq = property(_WMX3ApiPython.EventControl_Event_input_lessTrq_get, _WMX3ApiPython.EventControl_Event_input_lessTrq_set)
    input_opState = property(_WMX3ApiPython.EventControl_Event_input_opState_get, _WMX3ApiPython.EventControl_Event_input_opState_set)
    input_posSET = property(_WMX3ApiPython.EventControl_Event_input_posSET_get, _WMX3ApiPython.EventControl_Event_input_posSET_set)
    input_delayedPosSET = property(_WMX3ApiPython.EventControl_Event_input_delayedPosSET_get, _WMX3ApiPython.EventControl_Event_input_delayedPosSET_set)
    input_commandDistributedEnd = property(_WMX3ApiPython.EventControl_Event_input_commandDistributedEnd_get, _WMX3ApiPython.EventControl_Event_input_commandDistributedEnd_set)
    input_remainingTime = property(_WMX3ApiPython.EventControl_Event_input_remainingTime_get, _WMX3ApiPython.EventControl_Event_input_remainingTime_set)
    input_remainingDistance = property(_WMX3ApiPython.EventControl_Event_input_remainingDistance_get, _WMX3ApiPython.EventControl_Event_input_remainingDistance_set)
    input_completedDistance = property(_WMX3ApiPython.EventControl_Event_input_completedDistance_get, _WMX3ApiPython.EventControl_Event_input_completedDistance_set)
    input_completedTime = property(_WMX3ApiPython.EventControl_Event_input_completedTime_get, _WMX3ApiPython.EventControl_Event_input_completedTime_set)
    outputFunction = property(_WMX3ApiPython.EventControl_Event_outputFunction_get, _WMX3ApiPython.EventControl_Event_outputFunction_set)
    output_none = property(_WMX3ApiPython.EventControl_Event_output_none_get, _WMX3ApiPython.EventControl_Event_output_none_set)
    output_setIOOutBit = property(_WMX3ApiPython.EventControl_Event_output_setIOOutBit_get, _WMX3ApiPython.EventControl_Event_output_setIOOutBit_set)
    output_setMBit = property(_WMX3ApiPython.EventControl_Event_output_setMBit_get, _WMX3ApiPython.EventControl_Event_output_setMBit_set)
    output_enableAnotherEvent = property(_WMX3ApiPython.EventControl_Event_output_enableAnotherEvent_get, _WMX3ApiPython.EventControl_Event_output_enableAnotherEvent_set)
    output_stopSingleAxis = property(_WMX3ApiPython.EventControl_Event_output_stopSingleAxis_get, _WMX3ApiPython.EventControl_Event_output_stopSingleAxis_set)
    output_startSinglePos = property(_WMX3ApiPython.EventControl_Event_output_startSinglePos_get, _WMX3ApiPython.EventControl_Event_output_startSinglePos_set)
    output_startSingleMov = property(_WMX3ApiPython.EventControl_Event_output_startSingleMov_get, _WMX3ApiPython.EventControl_Event_output_startSingleMov_set)
    output_startMultiplePos = property(_WMX3ApiPython.EventControl_Event_output_startMultiplePos_get, _WMX3ApiPython.EventControl_Event_output_startMultiplePos_set)
    output_startMultipleMov = property(_WMX3ApiPython.EventControl_Event_output_startMultipleMov_get, _WMX3ApiPython.EventControl_Event_output_startMultipleMov_set)
    output_linearIntplPos = property(_WMX3ApiPython.EventControl_Event_output_linearIntplPos_get, _WMX3ApiPython.EventControl_Event_output_linearIntplPos_set)
    output_linearIntplMov = property(_WMX3ApiPython.EventControl_Event_output_linearIntplMov_get, _WMX3ApiPython.EventControl_Event_output_linearIntplMov_set)
    output_startAPIBuffer = property(_WMX3ApiPython.EventControl_Event_output_startAPIBuffer_get, _WMX3ApiPython.EventControl_Event_output_startAPIBuffer_set)
    output_execQuickStopSingleAxis = property(_WMX3ApiPython.EventControl_Event_output_execQuickStopSingleAxis_get, _WMX3ApiPython.EventControl_Event_output_execQuickStopSingleAxis_set)
    output_overrideVelSingleAxis = property(_WMX3ApiPython.EventControl_Event_output_overrideVelSingleAxis_get, _WMX3ApiPython.EventControl_Event_output_overrideVelSingleAxis_set)
    output_execEStop = property(_WMX3ApiPython.EventControl_Event_output_execEStop_get, _WMX3ApiPython.EventControl_Event_output_execEStop_set)
    output_triggerFlightRecorder = property(_WMX3ApiPython.EventControl_Event_output_triggerFlightRecorder_get, _WMX3ApiPython.EventControl_Event_output_triggerFlightRecorder_set)
    output_resetFlightRecorder = property(_WMX3ApiPython.EventControl_Event_output_resetFlightRecorder_get, _WMX3ApiPython.EventControl_Event_output_resetFlightRecorder_set)

    def __init__(self):
        _WMX3ApiPython.EventControl_Event_swiginit(self, _WMX3ApiPython.new_EventControl_Event())
    __swig_destroy__ = _WMX3ApiPython.delete_EventControl_Event

# Register EventControl_Event in _WMX3ApiPython:
_WMX3ApiPython.EventControl_Event_swigregister(EventControl_Event)
class EventControl_HardwareTouchProbeStatus(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def GetData(self, hardwareTouchProbeStatus):
        return _WMX3ApiPython.EventControl_HardwareTouchProbeStatus_GetData(self, hardwareTouchProbeStatus)

    def SetData(self, hardwareTouchProbeStatus):
        return _WMX3ApiPython.EventControl_HardwareTouchProbeStatus_SetData(self, hardwareTouchProbeStatus)
    axis = property(_WMX3ApiPython.EventControl_HardwareTouchProbeStatus_axis_get, _WMX3ApiPython.EventControl_HardwareTouchProbeStatus_axis_set)
    enabled = property(_WMX3ApiPython.EventControl_HardwareTouchProbeStatus_enabled_get, _WMX3ApiPython.EventControl_HardwareTouchProbeStatus_enabled_set)
    mode = property(_WMX3ApiPython.EventControl_HardwareTouchProbeStatus_mode_get, _WMX3ApiPython.EventControl_HardwareTouchProbeStatus_mode_set)
    triggerSource = property(_WMX3ApiPython.EventControl_HardwareTouchProbeStatus_triggerSource_get, _WMX3ApiPython.EventControl_HardwareTouchProbeStatus_triggerSource_set)
    channel = property(_WMX3ApiPython.EventControl_HardwareTouchProbeStatus_channel_get, _WMX3ApiPython.EventControl_HardwareTouchProbeStatus_channel_set)
    latched = property(_WMX3ApiPython.EventControl_HardwareTouchProbeStatus_latched_get, _WMX3ApiPython.EventControl_HardwareTouchProbeStatus_latched_set)
    latchedValueCount = property(_WMX3ApiPython.EventControl_HardwareTouchProbeStatus_latchedValueCount_get, _WMX3ApiPython.EventControl_HardwareTouchProbeStatus_latchedValueCount_set)
    latchedValue = property(_WMX3ApiPython.EventControl_HardwareTouchProbeStatus_latchedValue_get, _WMX3ApiPython.EventControl_HardwareTouchProbeStatus_latchedValue_set)

    def SetLatchedValue(self, index, value):
        return _WMX3ApiPython.EventControl_HardwareTouchProbeStatus_SetLatchedValue(self, index, value)

    def GetLatchedValue(self, index):
        return _WMX3ApiPython.EventControl_HardwareTouchProbeStatus_GetLatchedValue(self, index)
    latchedPos = property(_WMX3ApiPython.EventControl_HardwareTouchProbeStatus_latchedPos_get, _WMX3ApiPython.EventControl_HardwareTouchProbeStatus_latchedPos_set)

    def SetLatchedPos(self, index, value):
        return _WMX3ApiPython.EventControl_HardwareTouchProbeStatus_SetLatchedPos(self, index, value)

    def GetLatchedPos(self, index):
        return _WMX3ApiPython.EventControl_HardwareTouchProbeStatus_GetLatchedPos(self, index)

    def __init__(self):
        _WMX3ApiPython.EventControl_HardwareTouchProbeStatus_swiginit(self, _WMX3ApiPython.new_EventControl_HardwareTouchProbeStatus())
    __swig_destroy__ = _WMX3ApiPython.delete_EventControl_HardwareTouchProbeStatus

# Register EventControl_HardwareTouchProbeStatus in _WMX3ApiPython:
_WMX3ApiPython.EventControl_HardwareTouchProbeStatus_swigregister(EventControl_HardwareTouchProbeStatus)
class EventControl_PSOOutput(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def GetData(self, pSOOutput):
        return _WMX3ApiPython.EventControl_PSOOutput_GetData(self, pSOOutput)

    def SetData(self, pSOOutput):
        return _WMX3ApiPython.EventControl_PSOOutput_SetData(self, pSOOutput)
    outputType = property(_WMX3ApiPython.EventControl_PSOOutput_outputType_get, _WMX3ApiPython.EventControl_PSOOutput_outputType_set)
    byteAddress = property(_WMX3ApiPython.EventControl_PSOOutput_byteAddress_get, _WMX3ApiPython.EventControl_PSOOutput_byteAddress_set)
    bitAddress = property(_WMX3ApiPython.EventControl_PSOOutput_bitAddress_get, _WMX3ApiPython.EventControl_PSOOutput_bitAddress_set)
    invert = property(_WMX3ApiPython.EventControl_PSOOutput_invert_get, _WMX3ApiPython.EventControl_PSOOutput_invert_set)

    def __init__(self):
        _WMX3ApiPython.EventControl_PSOOutput_swiginit(self, _WMX3ApiPython.new_EventControl_PSOOutput())
    __swig_destroy__ = _WMX3ApiPython.delete_EventControl_PSOOutput

# Register EventControl_PSOOutput in _WMX3ApiPython:
_WMX3ApiPython.EventControl_PSOOutput_swigregister(EventControl_PSOOutput)
class EventControl_PSOStatus(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def GetData(self, pSOStatus):
        return _WMX3ApiPython.EventControl_PSOStatus_GetData(self, pSOStatus)

    def SetData(self, pSOStatus):
        return _WMX3ApiPython.EventControl_PSOStatus_SetData(self, pSOStatus)
    enabled = property(_WMX3ApiPython.EventControl_PSOStatus_enabled_get, _WMX3ApiPython.EventControl_PSOStatus_enabled_set)
    active = property(_WMX3ApiPython.EventControl_PSOStatus_active_get, _WMX3ApiPython.EventControl_PSOStatus_active_set)
    activeDataIndex = property(_WMX3ApiPython.EventControl_PSOStatus_activeDataIndex_get, _WMX3ApiPython.EventControl_PSOStatus_activeDataIndex_set)
    output = property(_WMX3ApiPython.EventControl_PSOStatus_output_get, _WMX3ApiPython.EventControl_PSOStatus_output_set)

    def __init__(self):
        _WMX3ApiPython.EventControl_PSOStatus_swiginit(self, _WMX3ApiPython.new_EventControl_PSOStatus())
    __swig_destroy__ = _WMX3ApiPython.delete_EventControl_PSOStatus

# Register EventControl_PSOStatus in _WMX3ApiPython:
_WMX3ApiPython.EventControl_PSOStatus_swigregister(EventControl_PSOStatus)
class EventControl_PSOOption(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def GetData(self, pPSOOption):
        return _WMX3ApiPython.EventControl_PSOOption_GetData(self, pPSOOption)

    def SetData(self, pPSOOption):
        return _WMX3ApiPython.EventControl_PSOOption_SetData(self, pPSOOption)
    allowTriggerOnStart = property(_WMX3ApiPython.EventControl_PSOOption_allowTriggerOnStart_get, _WMX3ApiPython.EventControl_PSOOption_allowTriggerOnStart_set)

    def __init__(self):
        _WMX3ApiPython.EventControl_PSOOption_swiginit(self, _WMX3ApiPython.new_EventControl_PSOOption())
    __swig_destroy__ = _WMX3ApiPython.delete_EventControl_PSOOption

# Register EventControl_PSOOption in _WMX3ApiPython:
_WMX3ApiPython.EventControl_PSOOption_swigregister(EventControl_PSOOption)
class EventControl_ComparatorSource(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def GetData(self, comparatorSource):
        return _WMX3ApiPython.EventControl_ComparatorSource_GetData(self, comparatorSource)

    def SetData(self, comparatorSource):
        return _WMX3ApiPython.EventControl_ComparatorSource_SetData(self, comparatorSource)
    sourceType = property(_WMX3ApiPython.EventControl_ComparatorSource_sourceType_get, _WMX3ApiPython.EventControl_ComparatorSource_sourceType_set)
    axis = property(_WMX3ApiPython.EventControl_ComparatorSource_axis_get, _WMX3ApiPython.EventControl_ComparatorSource_axis_set)

    def __init__(self):
        _WMX3ApiPython.EventControl_ComparatorSource_swiginit(self, _WMX3ApiPython.new_EventControl_ComparatorSource())
    __swig_destroy__ = _WMX3ApiPython.delete_EventControl_ComparatorSource

# Register EventControl_ComparatorSource in _WMX3ApiPython:
_WMX3ApiPython.EventControl_ComparatorSource_swigregister(EventControl_ComparatorSource)
class EventControl_PlannedVelocityData(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def GetData(self, plannedVelocityData):
        return _WMX3ApiPython.EventControl_PlannedVelocityData_GetData(self, plannedVelocityData)

    def SetData(self, plannedVelocityData):
        return _WMX3ApiPython.EventControl_PlannedVelocityData_SetData(self, plannedVelocityData)
    pos = property(_WMX3ApiPython.EventControl_PlannedVelocityData_pos_get, _WMX3ApiPython.EventControl_PlannedVelocityData_pos_set)
    velocity = property(_WMX3ApiPython.EventControl_PlannedVelocityData_velocity_get, _WMX3ApiPython.EventControl_PlannedVelocityData_velocity_set)

    def __init__(self):
        _WMX3ApiPython.EventControl_PlannedVelocityData_swiginit(self, _WMX3ApiPython.new_EventControl_PlannedVelocityData())
    __swig_destroy__ = _WMX3ApiPython.delete_EventControl_PlannedVelocityData

# Register EventControl_PlannedVelocityData in _WMX3ApiPython:
_WMX3ApiPython.EventControl_PlannedVelocityData_swigregister(EventControl_PlannedVelocityData)
class EventControl_PlannedVelocityStatus(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def GetData(self, plannedVelocityStatus):
        return _WMX3ApiPython.EventControl_PlannedVelocityStatus_GetData(self, plannedVelocityStatus)

    def SetData(self, plannedVelocityStatus):
        return _WMX3ApiPython.EventControl_PlannedVelocityStatus_SetData(self, plannedVelocityStatus)
    enabled = property(_WMX3ApiPython.EventControl_PlannedVelocityStatus_enabled_get, _WMX3ApiPython.EventControl_PlannedVelocityStatus_enabled_set)
    active = property(_WMX3ApiPython.EventControl_PlannedVelocityStatus_active_get, _WMX3ApiPython.EventControl_PlannedVelocityStatus_active_set)
    activeDataIndex = property(_WMX3ApiPython.EventControl_PlannedVelocityStatus_activeDataIndex_get, _WMX3ApiPython.EventControl_PlannedVelocityStatus_activeDataIndex_set)
    activeVelocityCommand = property(_WMX3ApiPython.EventControl_PlannedVelocityStatus_activeVelocityCommand_get, _WMX3ApiPython.EventControl_PlannedVelocityStatus_activeVelocityCommand_set)
    axis = property(_WMX3ApiPython.EventControl_PlannedVelocityStatus_axis_get, _WMX3ApiPython.EventControl_PlannedVelocityStatus_axis_set)

    def __init__(self):
        _WMX3ApiPython.EventControl_PlannedVelocityStatus_swiginit(self, _WMX3ApiPython.new_EventControl_PlannedVelocityStatus())
    __swig_destroy__ = _WMX3ApiPython.delete_EventControl_PlannedVelocityStatus

# Register EventControl_PlannedVelocityStatus in _WMX3ApiPython:
_WMX3ApiPython.EventControl_PlannedVelocityStatus_swigregister(EventControl_PlannedVelocityStatus)
class EventControl(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _WMX3ApiPython.EventControl_swiginit(self, _WMX3ApiPython.new_EventControl(*args))
    __swig_destroy__ = _WMX3ApiPython.delete_EventControl

    @staticmethod
    def ErrorToString(errCode):
        return _WMX3ApiPython.EventControl_ErrorToString(errCode)

    @staticmethod
    def ApiLogToString(pLogData, logDataSize):
        return _WMX3ApiPython.EventControl_ApiLogToString(pLogData, logDataSize)

    @staticmethod
    def GetLibVersion():
        return _WMX3ApiPython.EventControl_GetLibVersion()

    def IsDeviceValid(self):
        return _WMX3ApiPython.EventControl_IsDeviceValid(self)

    def GetVersion(self):
        return _WMX3ApiPython.EventControl_GetVersion(self)

    def SetEvent_Option(self, eventInput, eventOutput, option):
        pId = intp()
        ret = _WMX3ApiPython.EventControl_SetEvent_Option(self, pId, eventInput, eventOutput, option)
        return ret, pId.value()



    def SetEvent_ID(self, eventInput, eventOutput, id):
        pId = intp()
        ret = _WMX3ApiPython.EventControl_SetEvent_ID(self, pId, eventInput, eventOutput, id)
        return ret, pId.value()



    def SetEvent_ID_Option(self, eventInput, eventOutput, id, option):
        pId = intp()
        ret = _WMX3ApiPython.EventControl_SetEvent_ID_Option(self, pId, eventInput, eventOutput, id, option)
        return ret, pId.value()



    def GetEventModuleId(self, id):
        pInputModuleId = intp()
        pOutputModuleId = intp()
        ret = _WMX3ApiPython.EventControl_GetEventModuleId(self, id, pInputModuleId, pOutputModuleId)
        return ret, pInputModuleId.value(), pOutputModuleId.value()



    def GetEvent_InOut(self, id):
        pEventInput = EventApiEventInput()
        pEventOutput = EventApiEventOutput()
        pOption = EventOption()
        ret = _WMX3ApiPython.EventControl_GetEvent_InOut(self, id, pEventInput, pEventOutput, pOption)
        return ret, pEventInput, pEventOutput, pOption



    def GetEventOption(self, id):
        pOption = EventOption()
        ret = _WMX3ApiPython.EventControl_GetEventOption(self, pOption)
        return ret, pOption



    def SetEventInput(self, id, pEventInput):
        return _WMX3ApiPython.EventControl_SetEventInput(self, id, pEventInput)

    def SetEventOutput(self, id, pEventOutput):
        return _WMX3ApiPython.EventControl_SetEventOutput(self, id, pEventOutput)

    def GetEventInput(self, id):
        pEventInput = EventApiEventInput()
        ret = _WMX3ApiPython.EventControl_GetEventInput(self, id, pEventInput)
        return ret, pEventInput



    def GetEventOutput(self, id):
        pEventOutput = EventApiEventOutput()
        ret = _WMX3ApiPython.EventControl_GetEventOutput(self, id, pEventOutput)
        return ret, pEventOutput



    def SetEvent(self, eventInput, eventOutput):
        pId = intp()
        ret = _WMX3ApiPython.EventControl_SetEvent(self, pId, eventInput, eventOutput)
        return ret, pId.value()



    def GetEvent(self, id):
        pEventData = EventControl_Event()
        ret = _WMX3ApiPython.EventControl_GetEvent(self, id, pEventData)
        return ret, pEventData



    def EnableEvent(self, id, enable):
        return _WMX3ApiPython.EventControl_EnableEvent(self, id, enable)

    def RemoveEvent(self, id):
        return _WMX3ApiPython.EventControl_RemoveEvent(self, id)

    def ClearAllEvent(self):
        return _WMX3ApiPython.EventControl_ClearAllEvent(self)

    def GetAllEventID(self):
        pEventIdData = AllEventID()
        ret = _WMX3ApiPython.EventControl_GetAllEventID(self, pEventIdData)
        return ret, pEventIdData



    def GetAllEventID_In(self, input):
        pEventIdData = AllEventID()
        ret = _WMX3ApiPython.EventControl_GetAllEventID_In(self, pEventIdData, input)
        return ret, pEventIdData



    def GetAllEventID_InOut(self, input, output):
        pEventIdData = AllEventID()
        ret = _WMX3ApiPython.EventControl_GetAllEventID_InOut(self, pEventIdData, input, output)
        return ret, pEventIdData



    def SetSoftwareTouchProbe(self, channel, enable, axis, byteAddrs, bitOffset, logic, mode):
        return _WMX3ApiPython.EventControl_SetSoftwareTouchProbe(self, channel, enable, axis, byteAddrs, bitOffset, logic, mode)

    def EnableSoftwareTouchProbe(self, channel, enable):
        return _WMX3ApiPython.EventControl_EnableSoftwareTouchProbe(self, channel, enable)

    def GetSoftwareTouchProbe(self, channel):
        pEnabled = uintp()
        pAxis = intp()
        pByteAddrs = intp()
        pBitOffset = intp()
        pLogic = uintp()
        pMode = intp()
        ret = _WMX3ApiPython.EventControl_GetSoftwareTouchProbe(self, channel, pEnabled, pAxis, pByteAddrs, pBitOffset, pLogic, pMode)
        return ret, pEnabled.value(), pAxis.value(), pByteAddrs.value(), pBitOffset.value(), pLogic.value(), pMode.value()



    def IsSoftwareTouchProbeLatched(self, channel):
        pLatched = uintp()
        ret = _WMX3ApiPython.EventControl_IsSoftwareTouchProbeLatched(self, channel, pLatched)
        return ret, pLatched.value()



    def GetSoftwareTouchProbeCounterValue(self, channel):
        pLatched = uintp()
        pCounterValue = doublep()
        ret = _WMX3ApiPython.EventControl_GetSoftwareTouchProbeCounterValue(self, channel, pLatched, pCounterValue)
        return ret, pLatched.value(), pCounterValue.value()



    def SetHardwareTouchProbe(self, axis, enable, mode, triggerSource, channel):
        return _WMX3ApiPython.EventControl_SetHardwareTouchProbe(self, axis, enable, mode, triggerSource, channel)

    def GetHardwareTouchProbeStatus(self, channel):
        pStatus = EventControl_HardwareTouchProbeStatus()
        ret = _WMX3ApiPython.EventControl_GetHardwareTouchProbeStatus(self, channel, pStatus)
        return ret, pStatus



    def EnableHardwareTouchProbe(self, axis, enable):
        return _WMX3ApiPython.EventControl_EnableHardwareTouchProbe(self, axis, enable)

    def SetPSOConfig(self, channel, type, pSource, pOutput, minDurationMilliseconds):
        return _WMX3ApiPython.EventControl_SetPSOConfig(self, channel, type, pSource, pOutput, minDurationMilliseconds)

    def SetPSOConfig_Option(self, channel, type, pSource, pOutput, minDurationMilliseconds, pOption):
        return _WMX3ApiPython.EventControl_SetPSOConfig_Option(self, channel, type, pSource, pOutput, minDurationMilliseconds, pOption)

    def GetPSOConfig(self, channel):
        pCount = intp()
        pSource = EventControl_ComparatorSource()
        pOutput = EventControl_PSOOutput()
        pMinDurationMilliseconds = doublep()
        ret = _WMX3ApiPython.EventControl_GetPSOConfig(self, channel, pCount, pSource, pOutput, pMinDurationMilliseconds)
        return ret, pCount.value(), pSource, pOutput, pMinDurationMilliseconds.value()



    def GetPSOConfig_Option(self, channel):
        pCount = intp()
        pSource = EventControl_ComparatorSource()
        pOutput = EventControl_PSOOutput()
        pOption = EventControl_PSOOption()
        pMinDurationMilliseconds = doublep()
        ret = _WMX3ApiPython.EventControl_GetPSOConfig_Option(self, channel, pCount, pSource, pOutput, pMinDurationMilliseconds, pOption)
        return ret, pCount.value(), pSource, pOutput, pMinDurationMilliseconds.value(), pOption



    def SetPSOSingleData(self, channel, sData):
        return _WMX3ApiPython.EventControl_SetPSOSingleData(self, channel, sData)

    def SetPSOMultipleData(self, channel, count, pMData):
        return _WMX3ApiPython.EventControl_SetPSOMultipleData(self, channel, count, pMData)

    def SetPSOIntervalData(self, channel, rangeStart, rangeEnd, interval):
        return _WMX3ApiPython.EventControl_SetPSOIntervalData(self, channel, rangeStart, rangeEnd, interval)

    def GetPSOData(self, channel, maxCount):
        pCount = intp()
        pMData = []
        dataArray = doubleArray(maxCount)

        ret = _WMX3ApiPython.EventControl_GetPSOData(self, channel, pCount, dataArray, maxCount)
        if ret == 0 and pCount.value() > 0:
            for i in range(pCount.value()):
                pMData.append(dataArray[i])
            return ret, pCount.value(), pMData
        else:
            return ret, pCount.value(), []



    def GetPSODataCount(self, channel):
        pCount = intp()
        ret = _WMX3ApiPython.EventControl_GetPSODataCount(self, channel, pCount)
        return ret, pCount.value()



    def GetPSOIntervalData(self, channel):
        pRangeStart = doublep()
        pRangeEnd = doublep()
        pInterval = doublep()
        ret = _WMX3ApiPython.EventControl_GetPSOIntervalData(self, channel, pRangeStart, pRangeEnd, pInterval)
        return ret, pRangeStart.value(), pRangeEnd.value(), pInterval.value()



    def StartPSO(self, channel):
        return _WMX3ApiPython.EventControl_StartPSO(self, channel)

    def StopPSO(self, channel):
        return _WMX3ApiPython.EventControl_StopPSO(self, channel)

    def GetPSOStatus(self, channel):
        pStatus = EventControl_PSOStatus()
        ret = _WMX3ApiPython.EventControl_GetPSOStatus(self, channel, pStatus)
        return ret, pStatus



    def SetPlannedVelOverrideConfig(self, channel, type, pSource, axis):
        return _WMX3ApiPython.EventControl_SetPlannedVelOverrideConfig(self, channel, type, pSource, axis)

    def GetPlannedVelOverrideConfig(self, channel):
        pType = intp()
        pSource = EventControl_ComparatorSource()
        pAxis = intp()
        ret = _WMX3ApiPython.EventControl_GetPlannedVelOverrideConfig(self, channel, pType, pSource, pAxis)
        return ret, pType.value(), pSource, pAxis.value()



    def SetPlannedVelOverrideSingleData(self, channel, sData):
        return _WMX3ApiPython.EventControl_SetPlannedVelOverrideSingleData(self, channel, sData)

    def SetPlannedVelOverrideMultipleData(self, channel, count, pMData):
        return _WMX3ApiPython.EventControl_SetPlannedVelOverrideMultipleData(self, channel, count, pMData)

    def GetPlannedVelOverrideData(self, channel, maxCount):
        pCount = intp()
        pMData = []
        dataArray = EventControl_PlannedVelocityDataArray(maxCount)

        ret = _WMX3ApiPython.EventControl_GetPlannedVelOverrideData(self, channel, pCount, dataArray, maxCount)
        if ret == 0:
            for i in range(pCount.value()):
                pMData.append(dataArray[i])
            return ret, pCount.value(), pMData
        else:
            return ret, pCount.value(), []



    def GetPlannedVelOverrideDataCount(self, channel):
        pCount = intp()
        ret = _WMX3ApiPython.EventControl_GetPlannedVelOverrideDataCount(self, channel, pCount)
        return ret, pCount.value()



    def StartPlannedVelOverride(self, channel):
        return _WMX3ApiPython.EventControl_StartPlannedVelOverride(self, channel)

    def StopPlannedVelOverride(self, channel):
        return _WMX3ApiPython.EventControl_StopPlannedVelOverride(self, channel)

    def GetPlannedVelOverrideStatus(self, channel):
        pStatus = EventControl_PlannedVelocityStatus()
        ret = _WMX3ApiPython.EventControl_GetPlannedVelOverrideStatus(self, channel, pStatus)
        return ret, pStatus



# Register EventControl in _WMX3ApiPython:
_WMX3ApiPython.EventControl_swigregister(EventControl)
class AdvancedMotionErrorCode(ErrorCode):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    PositionNotOnPath = _WMX3ApiPython.AdvancedMotionErrorCode_PositionNotOnPath
    SplineModeNotSupported = _WMX3ApiPython.AdvancedMotionErrorCode_SplineModeNotSupported
    SplineStartingPositionNotCurrentPosition = _WMX3ApiPython.AdvancedMotionErrorCode_SplineStartingPositionNotCurrentPosition
    PathInterpolationChannelNotCleared = _WMX3ApiPython.AdvancedMotionErrorCode_PathInterpolationChannelNotCleared
    PathInterpolationConfigurationNotSet = _WMX3ApiPython.AdvancedMotionErrorCode_PathInterpolationConfigurationNotSet
    PathInterpolationAxesHaveBeenMoved = _WMX3ApiPython.AdvancedMotionErrorCode_PathInterpolationAxesHaveBeenMoved
    PathInterpolationAbnormalStop = _WMX3ApiPython.AdvancedMotionErrorCode_PathInterpolationAbnormalStop
    NotConstLinearVelocitySlave = _WMX3ApiPython.AdvancedMotionErrorCode_NotConstLinearVelocitySlave
    ConstLinearVelocityMinRTooSmall = _WMX3ApiPython.AdvancedMotionErrorCode_ConstLinearVelocityMinRTooSmall
    ConstLinearVelocityPositiveMaxRTooSmall = _WMX3ApiPython.AdvancedMotionErrorCode_ConstLinearVelocityPositiveMaxRTooSmall
    ConstLinearVelocityNegativeMaxRTooSmall = _WMX3ApiPython.AdvancedMotionErrorCode_ConstLinearVelocityNegativeMaxRTooSmall
    InvalidCurrentVelocity = _WMX3ApiPython.AdvancedMotionErrorCode_InvalidCurrentVelocity
    MasterPositionNotAscendingOrder = _WMX3ApiPython.AdvancedMotionErrorCode_MasterPositionNotAscendingOrder
    PositionNotWithinSingleTurnEncoderCount = _WMX3ApiPython.AdvancedMotionErrorCode_PositionNotWithinSingleTurnEncoderCount
    TimeBetweenPointsTooClose = _WMX3ApiPython.AdvancedMotionErrorCode_TimeBetweenPointsTooClose
    TotalTimeTooSmall = _WMX3ApiPython.AdvancedMotionErrorCode_TotalTimeTooSmall
    DimensionOutOfRange = _WMX3ApiPython.AdvancedMotionErrorCode_DimensionOutOfRange
    PointCountBelowMinimum = _WMX3ApiPython.AdvancedMotionErrorCode_PointCountBelowMinimum
    L1ArgumentOutOfRange = _WMX3ApiPython.AdvancedMotionErrorCode_L1ArgumentOutOfRange
    L2ArgumentOutOfRange = _WMX3ApiPython.AdvancedMotionErrorCode_L2ArgumentOutOfRange
    LdirArgumentOutOfRange = _WMX3ApiPython.AdvancedMotionErrorCode_LdirArgumentOutOfRange
    RzeroArgumentOutOfRange = _WMX3ApiPython.AdvancedMotionErrorCode_RzeroArgumentOutOfRange
    RspanArgumentOutOfRange = _WMX3ApiPython.AdvancedMotionErrorCode_RspanArgumentOutOfRange
    L1ArgumentGreaterThanL2 = _WMX3ApiPython.AdvancedMotionErrorCode_L1ArgumentGreaterThanL2
    SlaveCurrentPositionNotInRange = _WMX3ApiPython.AdvancedMotionErrorCode_SlaveCurrentPositionNotInRange
    OutputCountOutOfRange = _WMX3ApiPython.AdvancedMotionErrorCode_OutputCountOutOfRange
    OutputPointNotFound = _WMX3ApiPython.AdvancedMotionErrorCode_OutputPointNotFound
    ConfigurationNotSet = _WMX3ApiPython.AdvancedMotionErrorCode_ConfigurationNotSet
    SegmentTypeNotSupported = _WMX3ApiPython.AdvancedMotionErrorCode_SegmentTypeNotSupported
    AngleCorrectionProfileArgumentOutOfRange = _WMX3ApiPython.AdvancedMotionErrorCode_AngleCorrectionProfileArgumentOutOfRange
    AxisNotExecutingPathIntpl = _WMX3ApiPython.AdvancedMotionErrorCode_AxisNotExecutingPathIntpl
    AxisNotExecutingPathIntpl3D = _WMX3ApiPython.AdvancedMotionErrorCode_AxisNotExecutingPathIntpl3D
    VelocityMultiplierOutOfRange = _WMX3ApiPython.AdvancedMotionErrorCode_VelocityMultiplierOutOfRange
    NoCommandsInBuffer = _WMX3ApiPython.AdvancedMotionErrorCode_NoCommandsInBuffer
    DancerControlDerivativeSamplesOutOfRange = _WMX3ApiPython.AdvancedMotionErrorCode_DancerControlDerivativeSamplesOutOfRange
    DancerControlIntegralTimeOutOfRange = _WMX3ApiPython.AdvancedMotionErrorCode_DancerControlIntegralTimeOutOfRange
    DancerControlInputMinMaxDifferenceOutOfRange = _WMX3ApiPython.AdvancedMotionErrorCode_DancerControlInputMinMaxDifferenceOutOfRange
    FirstPointTimeNotZero = _WMX3ApiPython.AdvancedMotionErrorCode_FirstPointTimeNotZero
    PointTimeOutOfRange = _WMX3ApiPython.AdvancedMotionErrorCode_PointTimeOutOfRange
    PointTimeNotIncreasing = _WMX3ApiPython.AdvancedMotionErrorCode_PointTimeNotIncreasing
    SmoothRatioOutOfRange = _WMX3ApiPython.AdvancedMotionErrorCode_SmoothRatioOutOfRange
    TwoLinkMotionTypeOutOfRange = _WMX3ApiPython.AdvancedMotionErrorCode_TwoLinkMotionTypeOutOfRange
    OutputIOAddressOutOfRange = _WMX3ApiPython.AdvancedMotionErrorCode_OutputIOAddressOutOfRange
    OutputPointOutOfRange = _WMX3ApiPython.AdvancedMotionErrorCode_OutputPointOutOfRange
    TotalDistanceBelowMinimum = _WMX3ApiPython.AdvancedMotionErrorCode_TotalDistanceBelowMinimum
    DistanceBetweenPointsTooClose = _WMX3ApiPython.AdvancedMotionErrorCode_DistanceBetweenPointsTooClose
    AuxiliaryAxisOutOfRange = _WMX3ApiPython.AdvancedMotionErrorCode_AuxiliaryAxisOutOfRange
    AuxiliaryAxisCountOutOfRange = _WMX3ApiPython.AdvancedMotionErrorCode_AuxiliaryAxisCountOutOfRange

    def __init__(self):
        _WMX3ApiPython.AdvancedMotionErrorCode_swiginit(self, _WMX3ApiPython.new_AdvancedMotionErrorCode())
    __swig_destroy__ = _WMX3ApiPython.delete_AdvancedMotionErrorCode

# Register AdvancedMotionErrorCode in _WMX3ApiPython:
_WMX3ApiPython.AdvancedMotionErrorCode_swigregister(AdvancedMotionErrorCode)
class AdvMotion_SplinePoint(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def GetData(self, pSplinePoint):
        return _WMX3ApiPython.AdvMotion_SplinePoint_GetData(self, pSplinePoint)
    pos = property(_WMX3ApiPython.AdvMotion_SplinePoint_pos_get, _WMX3ApiPython.AdvMotion_SplinePoint_pos_set)

    def SetPos(self, index, value):
        return _WMX3ApiPython.AdvMotion_SplinePoint_SetPos(self, index, value)

    def GetPos(self, index):
        return _WMX3ApiPython.AdvMotion_SplinePoint_GetPos(self, index)

    def __init__(self):
        _WMX3ApiPython.AdvMotion_SplinePoint_swiginit(self, _WMX3ApiPython.new_AdvMotion_SplinePoint())
    __swig_destroy__ = _WMX3ApiPython.delete_AdvMotion_SplinePoint

# Register AdvMotion_SplinePoint in _WMX3ApiPython:
_WMX3ApiPython.AdvMotion_SplinePoint_swigregister(AdvMotion_SplinePoint)
class AdvMotion_PointTimeSplineCommand(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def GetData(self, pPointTimeSplineCommand):
        return _WMX3ApiPython.AdvMotion_PointTimeSplineCommand_GetData(self, pPointTimeSplineCommand)
    dimensionCount = property(_WMX3ApiPython.AdvMotion_PointTimeSplineCommand_dimensionCount_get, _WMX3ApiPython.AdvMotion_PointTimeSplineCommand_dimensionCount_set)
    axis = property(_WMX3ApiPython.AdvMotion_PointTimeSplineCommand_axis_get, _WMX3ApiPython.AdvMotion_PointTimeSplineCommand_axis_set)

    def SetAxis(self, index, value):
        return _WMX3ApiPython.AdvMotion_PointTimeSplineCommand_SetAxis(self, index, value)

    def GetAxis(self, index):
        return _WMX3ApiPython.AdvMotion_PointTimeSplineCommand_GetAxis(self, index)

    def __init__(self):
        _WMX3ApiPython.AdvMotion_PointTimeSplineCommand_swiginit(self, _WMX3ApiPython.new_AdvMotion_PointTimeSplineCommand())
    __swig_destroy__ = _WMX3ApiPython.delete_AdvMotion_PointTimeSplineCommand

# Register AdvMotion_PointTimeSplineCommand in _WMX3ApiPython:
_WMX3ApiPython.AdvMotion_PointTimeSplineCommand_swigregister(AdvMotion_PointTimeSplineCommand)
class AdvMotion_TotalTimeSplineCommand(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def GetData(self, pTotalTimeSplineCommand):
        return _WMX3ApiPython.AdvMotion_TotalTimeSplineCommand_GetData(self, pTotalTimeSplineCommand)
    dimensionCount = property(_WMX3ApiPython.AdvMotion_TotalTimeSplineCommand_dimensionCount_get, _WMX3ApiPython.AdvMotion_TotalTimeSplineCommand_dimensionCount_set)
    axis = property(_WMX3ApiPython.AdvMotion_TotalTimeSplineCommand_axis_get, _WMX3ApiPython.AdvMotion_TotalTimeSplineCommand_axis_set)

    def SetAxis(self, index, value):
        return _WMX3ApiPython.AdvMotion_TotalTimeSplineCommand_SetAxis(self, index, value)

    def GetAxis(self, index):
        return _WMX3ApiPython.AdvMotion_TotalTimeSplineCommand_GetAxis(self, index)
    totalTimeMilliseconds = property(_WMX3ApiPython.AdvMotion_TotalTimeSplineCommand_totalTimeMilliseconds_get, _WMX3ApiPython.AdvMotion_TotalTimeSplineCommand_totalTimeMilliseconds_set)
    ignoreDimensionForDistanceCalc = property(_WMX3ApiPython.AdvMotion_TotalTimeSplineCommand_ignoreDimensionForDistanceCalc_get, _WMX3ApiPython.AdvMotion_TotalTimeSplineCommand_ignoreDimensionForDistanceCalc_set)

    def SetIgnoreDimensionForDistanceCalc(self, index, value):
        return _WMX3ApiPython.AdvMotion_TotalTimeSplineCommand_SetIgnoreDimensionForDistanceCalc(self, index, value)

    def GetIgnoreDimensionForDistanceCalc(self, index):
        return _WMX3ApiPython.AdvMotion_TotalTimeSplineCommand_GetIgnoreDimensionForDistanceCalc(self, index)

    def __init__(self):
        _WMX3ApiPython.AdvMotion_TotalTimeSplineCommand_swiginit(self, _WMX3ApiPython.new_AdvMotion_TotalTimeSplineCommand())
    __swig_destroy__ = _WMX3ApiPython.delete_AdvMotion_TotalTimeSplineCommand

# Register AdvMotion_TotalTimeSplineCommand in _WMX3ApiPython:
_WMX3ApiPython.AdvMotion_TotalTimeSplineCommand_swigregister(AdvMotion_TotalTimeSplineCommand)
class AdvMotion_ProfileSplineCommand(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def GetData(self, pProfileSplineCommand):
        return _WMX3ApiPython.AdvMotion_ProfileSplineCommand_GetData(self, pProfileSplineCommand)
    dimensionCount = property(_WMX3ApiPython.AdvMotion_ProfileSplineCommand_dimensionCount_get, _WMX3ApiPython.AdvMotion_ProfileSplineCommand_dimensionCount_set)
    axis = property(_WMX3ApiPython.AdvMotion_ProfileSplineCommand_axis_get, _WMX3ApiPython.AdvMotion_ProfileSplineCommand_axis_set)

    def SetAxis(self, index, value):
        return _WMX3ApiPython.AdvMotion_ProfileSplineCommand_SetAxis(self, index, value)

    def GetAxis(self, index):
        return _WMX3ApiPython.AdvMotion_ProfileSplineCommand_GetAxis(self, index)
    profile = property(_WMX3ApiPython.AdvMotion_ProfileSplineCommand_profile_get, _WMX3ApiPython.AdvMotion_ProfileSplineCommand_profile_set)
    ignoreDimensionForDistanceCalc = property(_WMX3ApiPython.AdvMotion_ProfileSplineCommand_ignoreDimensionForDistanceCalc_get, _WMX3ApiPython.AdvMotion_ProfileSplineCommand_ignoreDimensionForDistanceCalc_set)

    def SetIgnoreDimensionForDistanceCalc(self, index, value):
        return _WMX3ApiPython.AdvMotion_ProfileSplineCommand_SetIgnoreDimensionForDistanceCalc(self, index, value)

    def GetIgnoreDimensionForDistanceCalc(self, index):
        return _WMX3ApiPython.AdvMotion_ProfileSplineCommand_GetIgnoreDimensionForDistanceCalc(self, index)
    sampleMultiplier = property(_WMX3ApiPython.AdvMotion_ProfileSplineCommand_sampleMultiplier_get, _WMX3ApiPython.AdvMotion_ProfileSplineCommand_sampleMultiplier_set)
    sampleMultiplierCubicDistribution = property(_WMX3ApiPython.AdvMotion_ProfileSplineCommand_sampleMultiplierCubicDistribution_get, _WMX3ApiPython.AdvMotion_ProfileSplineCommand_sampleMultiplierCubicDistribution_set)

    def __init__(self):
        _WMX3ApiPython.AdvMotion_ProfileSplineCommand_swiginit(self, _WMX3ApiPython.new_AdvMotion_ProfileSplineCommand())
    __swig_destroy__ = _WMX3ApiPython.delete_AdvMotion_ProfileSplineCommand

# Register AdvMotion_ProfileSplineCommand in _WMX3ApiPython:
_WMX3ApiPython.AdvMotion_ProfileSplineCommand_swigregister(AdvMotion_ProfileSplineCommand)
class AdvMotion_VelAccLimitedSplineCommand(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def GetData(self, pVelAccLimitedSplineCommand):
        return _WMX3ApiPython.AdvMotion_VelAccLimitedSplineCommand_GetData(self, pVelAccLimitedSplineCommand)
    dimensionCount = property(_WMX3ApiPython.AdvMotion_VelAccLimitedSplineCommand_dimensionCount_get, _WMX3ApiPython.AdvMotion_VelAccLimitedSplineCommand_dimensionCount_set)
    axis = property(_WMX3ApiPython.AdvMotion_VelAccLimitedSplineCommand_axis_get, _WMX3ApiPython.AdvMotion_VelAccLimitedSplineCommand_axis_set)

    def SetAxis(self, index, value):
        return _WMX3ApiPython.AdvMotion_VelAccLimitedSplineCommand_SetAxis(self, index, value)

    def GetAxis(self, index):
        return _WMX3ApiPython.AdvMotion_VelAccLimitedSplineCommand_GetAxis(self, index)
    velLimit = property(_WMX3ApiPython.AdvMotion_VelAccLimitedSplineCommand_velLimit_get, _WMX3ApiPython.AdvMotion_VelAccLimitedSplineCommand_velLimit_set)

    def SetVelLimit(self, index, value):
        return _WMX3ApiPython.AdvMotion_VelAccLimitedSplineCommand_SetVelLimit(self, index, value)

    def GetVelLimit(self, index):
        return _WMX3ApiPython.AdvMotion_VelAccLimitedSplineCommand_GetVelLimit(self, index)
    accLimit = property(_WMX3ApiPython.AdvMotion_VelAccLimitedSplineCommand_accLimit_get, _WMX3ApiPython.AdvMotion_VelAccLimitedSplineCommand_accLimit_set)

    def SetAccLimit(self, index, value):
        return _WMX3ApiPython.AdvMotion_VelAccLimitedSplineCommand_SetAccLimit(self, index, value)

    def GetAccLimit(self, index):
        return _WMX3ApiPython.AdvMotion_VelAccLimitedSplineCommand_GetAccLimit(self, index)
    compositeVel = property(_WMX3ApiPython.AdvMotion_VelAccLimitedSplineCommand_compositeVel_get, _WMX3ApiPython.AdvMotion_VelAccLimitedSplineCommand_compositeVel_set)
    compositeAcc = property(_WMX3ApiPython.AdvMotion_VelAccLimitedSplineCommand_compositeAcc_get, _WMX3ApiPython.AdvMotion_VelAccLimitedSplineCommand_compositeAcc_set)
    ignoreDimensionForDistanceCalc = property(_WMX3ApiPython.AdvMotion_VelAccLimitedSplineCommand_ignoreDimensionForDistanceCalc_get, _WMX3ApiPython.AdvMotion_VelAccLimitedSplineCommand_ignoreDimensionForDistanceCalc_set)

    def SetIgnoreDimensionForDistanceCalc(self, index, value):
        return _WMX3ApiPython.AdvMotion_VelAccLimitedSplineCommand_SetIgnoreDimensionForDistanceCalc(self, index, value)

    def GetIgnoreDimensionForDistanceCalc(self, index):
        return _WMX3ApiPython.AdvMotion_VelAccLimitedSplineCommand_GetIgnoreDimensionForDistanceCalc(self, index)
    sampleMultiplier = property(_WMX3ApiPython.AdvMotion_VelAccLimitedSplineCommand_sampleMultiplier_get, _WMX3ApiPython.AdvMotion_VelAccLimitedSplineCommand_sampleMultiplier_set)
    sampleMultiplierCubicDistribution = property(_WMX3ApiPython.AdvMotion_VelAccLimitedSplineCommand_sampleMultiplierCubicDistribution_get, _WMX3ApiPython.AdvMotion_VelAccLimitedSplineCommand_sampleMultiplierCubicDistribution_set)

    def __init__(self):
        _WMX3ApiPython.AdvMotion_VelAccLimitedSplineCommand_swiginit(self, _WMX3ApiPython.new_AdvMotion_VelAccLimitedSplineCommand())
    __swig_destroy__ = _WMX3ApiPython.delete_AdvMotion_VelAccLimitedSplineCommand

# Register AdvMotion_VelAccLimitedSplineCommand in _WMX3ApiPython:
_WMX3ApiPython.AdvMotion_VelAccLimitedSplineCommand_swigregister(AdvMotion_VelAccLimitedSplineCommand)
class AdvMotion_PVTPoint(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def GetData(self, pPVTPoint):
        return _WMX3ApiPython.AdvMotion_PVTPoint_GetData(self, pPVTPoint)
    pos = property(_WMX3ApiPython.AdvMotion_PVTPoint_pos_get, _WMX3ApiPython.AdvMotion_PVTPoint_pos_set)
    velocity = property(_WMX3ApiPython.AdvMotion_PVTPoint_velocity_get, _WMX3ApiPython.AdvMotion_PVTPoint_velocity_set)
    timeMilliseconds = property(_WMX3ApiPython.AdvMotion_PVTPoint_timeMilliseconds_get, _WMX3ApiPython.AdvMotion_PVTPoint_timeMilliseconds_set)

    def __init__(self):
        _WMX3ApiPython.AdvMotion_PVTPoint_swiginit(self, _WMX3ApiPython.new_AdvMotion_PVTPoint())
    __swig_destroy__ = _WMX3ApiPython.delete_AdvMotion_PVTPoint

# Register AdvMotion_PVTPoint in _WMX3ApiPython:
_WMX3ApiPython.AdvMotion_PVTPoint_swigregister(AdvMotion_PVTPoint)
class AdvMotion_PVTCommand(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def GetData(self, pPVTCommand):
        return _WMX3ApiPython.AdvMotion_PVTCommand_GetData(self, pPVTCommand)
    axis = property(_WMX3ApiPython.AdvMotion_PVTCommand_axis_get, _WMX3ApiPython.AdvMotion_PVTCommand_axis_set)
    pointCount = property(_WMX3ApiPython.AdvMotion_PVTCommand_pointCount_get, _WMX3ApiPython.AdvMotion_PVTCommand_pointCount_set)
    points = property(_WMX3ApiPython.AdvMotion_PVTCommand_points_get, _WMX3ApiPython.AdvMotion_PVTCommand_points_set)

    def SetPoints(self, index, value):
        return _WMX3ApiPython.AdvMotion_PVTCommand_SetPoints(self, index, value)

    def GetPoints(self, index):
        return _WMX3ApiPython.AdvMotion_PVTCommand_GetPoints(self, index)

    def __init__(self):
        _WMX3ApiPython.AdvMotion_PVTCommand_swiginit(self, _WMX3ApiPython.new_AdvMotion_PVTCommand())
    __swig_destroy__ = _WMX3ApiPython.delete_AdvMotion_PVTCommand

# Register AdvMotion_PVTCommand in _WMX3ApiPython:
_WMX3ApiPython.AdvMotion_PVTCommand_swigregister(AdvMotion_PVTCommand)
class AdvMotion_PVTAdditionalCommand(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def GetData(self, pPVTCommand):
        return _WMX3ApiPython.AdvMotion_PVTAdditionalCommand_GetData(self, pPVTCommand)
    pointCount = property(_WMX3ApiPython.AdvMotion_PVTAdditionalCommand_pointCount_get, _WMX3ApiPython.AdvMotion_PVTAdditionalCommand_pointCount_set)
    points = property(_WMX3ApiPython.AdvMotion_PVTAdditionalCommand_points_get, _WMX3ApiPython.AdvMotion_PVTAdditionalCommand_points_set)

    def SetPoints(self, index, value):
        return _WMX3ApiPython.AdvMotion_PVTAdditionalCommand_SetPoints(self, index, value)

    def GetPoints(self, index):
        return _WMX3ApiPython.AdvMotion_PVTAdditionalCommand_GetPoints(self, index)

    def __init__(self):
        _WMX3ApiPython.AdvMotion_PVTAdditionalCommand_swiginit(self, _WMX3ApiPython.new_AdvMotion_PVTAdditionalCommand())
    __swig_destroy__ = _WMX3ApiPython.delete_AdvMotion_PVTAdditionalCommand

# Register AdvMotion_PVTAdditionalCommand in _WMX3ApiPython:
_WMX3ApiPython.AdvMotion_PVTAdditionalCommand_swigregister(AdvMotion_PVTAdditionalCommand)
class AdvMotion_PVTIntplCommand(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def GetData(self, pPVTIntplCommand):
        return _WMX3ApiPython.AdvMotion_PVTIntplCommand_GetData(self, pPVTIntplCommand)
    axisCount = property(_WMX3ApiPython.AdvMotion_PVTIntplCommand_axisCount_get, _WMX3ApiPython.AdvMotion_PVTIntplCommand_axisCount_set)
    axis = property(_WMX3ApiPython.AdvMotion_PVTIntplCommand_axis_get, _WMX3ApiPython.AdvMotion_PVTIntplCommand_axis_set)

    def SetAxis(self, index, value):
        return _WMX3ApiPython.AdvMotion_PVTIntplCommand_SetAxis(self, index, value)

    def GetAxis(self, index):
        return _WMX3ApiPython.AdvMotion_PVTIntplCommand_GetAxis(self, index)
    pointCount = property(_WMX3ApiPython.AdvMotion_PVTIntplCommand_pointCount_get, _WMX3ApiPython.AdvMotion_PVTIntplCommand_pointCount_set)

    def SetPointCount(self, index, value):
        return _WMX3ApiPython.AdvMotion_PVTIntplCommand_SetPointCount(self, index, value)

    def GetPointCount(self, index):
        return _WMX3ApiPython.AdvMotion_PVTIntplCommand_GetPointCount(self, index)
    points = property(_WMX3ApiPython.AdvMotion_PVTIntplCommand_points_get, _WMX3ApiPython.AdvMotion_PVTIntplCommand_points_set)

    def SetPoints(self, index1, index2, value):
        return _WMX3ApiPython.AdvMotion_PVTIntplCommand_SetPoints(self, index1, index2, value)

    def GetPoints(self, index1, index2):
        return _WMX3ApiPython.AdvMotion_PVTIntplCommand_GetPoints(self, index1, index2)

    def __init__(self):
        _WMX3ApiPython.AdvMotion_PVTIntplCommand_swiginit(self, _WMX3ApiPython.new_AdvMotion_PVTIntplCommand())
    __swig_destroy__ = _WMX3ApiPython.delete_AdvMotion_PVTIntplCommand

# Register AdvMotion_PVTIntplCommand in _WMX3ApiPython:
_WMX3ApiPython.AdvMotion_PVTIntplCommand_swigregister(AdvMotion_PVTIntplCommand)
class AdvMotion_PVTIntplAdditionalCommand(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def GetData(self, pPVTIntplCommand):
        return _WMX3ApiPython.AdvMotion_PVTIntplAdditionalCommand_GetData(self, pPVTIntplCommand)
    axisCount = property(_WMX3ApiPython.AdvMotion_PVTIntplAdditionalCommand_axisCount_get, _WMX3ApiPython.AdvMotion_PVTIntplAdditionalCommand_axisCount_set)
    axis = property(_WMX3ApiPython.AdvMotion_PVTIntplAdditionalCommand_axis_get, _WMX3ApiPython.AdvMotion_PVTIntplAdditionalCommand_axis_set)

    def SetAxis(self, index, value):
        return _WMX3ApiPython.AdvMotion_PVTIntplAdditionalCommand_SetAxis(self, index, value)

    def GetAxis(self, index):
        return _WMX3ApiPython.AdvMotion_PVTIntplAdditionalCommand_GetAxis(self, index)
    pointCount = property(_WMX3ApiPython.AdvMotion_PVTIntplAdditionalCommand_pointCount_get, _WMX3ApiPython.AdvMotion_PVTIntplAdditionalCommand_pointCount_set)

    def SetPointCount(self, index, value):
        return _WMX3ApiPython.AdvMotion_PVTIntplAdditionalCommand_SetPointCount(self, index, value)

    def GetPointCount(self, index):
        return _WMX3ApiPython.AdvMotion_PVTIntplAdditionalCommand_GetPointCount(self, index)
    points = property(_WMX3ApiPython.AdvMotion_PVTIntplAdditionalCommand_points_get, _WMX3ApiPython.AdvMotion_PVTIntplAdditionalCommand_points_set)

    def SetPoints(self, index1, index2, value):
        return _WMX3ApiPython.AdvMotion_PVTIntplAdditionalCommand_SetPoints(self, index1, index2, value)

    def GetPoints(self, index1, index2):
        return _WMX3ApiPython.AdvMotion_PVTIntplAdditionalCommand_GetPoints(self, index1, index2)

    def __init__(self):
        _WMX3ApiPython.AdvMotion_PVTIntplAdditionalCommand_swiginit(self, _WMX3ApiPython.new_AdvMotion_PVTIntplAdditionalCommand())
    __swig_destroy__ = _WMX3ApiPython.delete_AdvMotion_PVTIntplAdditionalCommand

# Register AdvMotion_PVTIntplAdditionalCommand in _WMX3ApiPython:
_WMX3ApiPython.AdvMotion_PVTIntplAdditionalCommand_swigregister(AdvMotion_PVTIntplAdditionalCommand)
class AdvMotion_PTPoint(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def GetData(self, pPTPoint):
        return _WMX3ApiPython.AdvMotion_PTPoint_GetData(self, pPTPoint)
    pos = property(_WMX3ApiPython.AdvMotion_PTPoint_pos_get, _WMX3ApiPython.AdvMotion_PTPoint_pos_set)
    timeMilliseconds = property(_WMX3ApiPython.AdvMotion_PTPoint_timeMilliseconds_get, _WMX3ApiPython.AdvMotion_PTPoint_timeMilliseconds_set)

    def __init__(self):
        _WMX3ApiPython.AdvMotion_PTPoint_swiginit(self, _WMX3ApiPython.new_AdvMotion_PTPoint())
    __swig_destroy__ = _WMX3ApiPython.delete_AdvMotion_PTPoint

# Register AdvMotion_PTPoint in _WMX3ApiPython:
_WMX3ApiPython.AdvMotion_PTPoint_swigregister(AdvMotion_PTPoint)
class AdvMotion_PTCommand(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def GetData(self, pPTCommand):
        return _WMX3ApiPython.AdvMotion_PTCommand_GetData(self, pPTCommand)
    axis = property(_WMX3ApiPython.AdvMotion_PTCommand_axis_get, _WMX3ApiPython.AdvMotion_PTCommand_axis_set)
    pointCount = property(_WMX3ApiPython.AdvMotion_PTCommand_pointCount_get, _WMX3ApiPython.AdvMotion_PTCommand_pointCount_set)
    points = property(_WMX3ApiPython.AdvMotion_PTCommand_points_get, _WMX3ApiPython.AdvMotion_PTCommand_points_set)

    def SetPoints(self, index, value):
        return _WMX3ApiPython.AdvMotion_PTCommand_SetPoints(self, index, value)

    def GetPoints(self, index):
        return _WMX3ApiPython.AdvMotion_PTCommand_GetPoints(self, index)

    def __init__(self):
        _WMX3ApiPython.AdvMotion_PTCommand_swiginit(self, _WMX3ApiPython.new_AdvMotion_PTCommand())
    __swig_destroy__ = _WMX3ApiPython.delete_AdvMotion_PTCommand

# Register AdvMotion_PTCommand in _WMX3ApiPython:
_WMX3ApiPython.AdvMotion_PTCommand_swigregister(AdvMotion_PTCommand)
class AdvMotion_PTAdditionalCommand(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def GetData(self, pPTCommand):
        return _WMX3ApiPython.AdvMotion_PTAdditionalCommand_GetData(self, pPTCommand)
    pointCount = property(_WMX3ApiPython.AdvMotion_PTAdditionalCommand_pointCount_get, _WMX3ApiPython.AdvMotion_PTAdditionalCommand_pointCount_set)
    points = property(_WMX3ApiPython.AdvMotion_PTAdditionalCommand_points_get, _WMX3ApiPython.AdvMotion_PTAdditionalCommand_points_set)

    def SetPoints(self, index, value):
        return _WMX3ApiPython.AdvMotion_PTAdditionalCommand_SetPoints(self, index, value)

    def GetPoints(self, index):
        return _WMX3ApiPython.AdvMotion_PTAdditionalCommand_GetPoints(self, index)

    def __init__(self):
        _WMX3ApiPython.AdvMotion_PTAdditionalCommand_swiginit(self, _WMX3ApiPython.new_AdvMotion_PTAdditionalCommand())
    __swig_destroy__ = _WMX3ApiPython.delete_AdvMotion_PTAdditionalCommand

# Register AdvMotion_PTAdditionalCommand in _WMX3ApiPython:
_WMX3ApiPython.AdvMotion_PTAdditionalCommand_swigregister(AdvMotion_PTAdditionalCommand)
class AdvMotion_VTPoint(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def GetData(self, pVTPoint):
        return _WMX3ApiPython.AdvMotion_VTPoint_GetData(self, pVTPoint)
    velocity = property(_WMX3ApiPython.AdvMotion_VTPoint_velocity_get, _WMX3ApiPython.AdvMotion_VTPoint_velocity_set)
    timeMilliseconds = property(_WMX3ApiPython.AdvMotion_VTPoint_timeMilliseconds_get, _WMX3ApiPython.AdvMotion_VTPoint_timeMilliseconds_set)

    def __init__(self):
        _WMX3ApiPython.AdvMotion_VTPoint_swiginit(self, _WMX3ApiPython.new_AdvMotion_VTPoint())
    __swig_destroy__ = _WMX3ApiPython.delete_AdvMotion_VTPoint

# Register AdvMotion_VTPoint in _WMX3ApiPython:
_WMX3ApiPython.AdvMotion_VTPoint_swigregister(AdvMotion_VTPoint)
class AdvMotion_VTCommand(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def GetData(self, pVTCommand):
        return _WMX3ApiPython.AdvMotion_VTCommand_GetData(self, pVTCommand)
    axis = property(_WMX3ApiPython.AdvMotion_VTCommand_axis_get, _WMX3ApiPython.AdvMotion_VTCommand_axis_set)
    pointCount = property(_WMX3ApiPython.AdvMotion_VTCommand_pointCount_get, _WMX3ApiPython.AdvMotion_VTCommand_pointCount_set)
    points = property(_WMX3ApiPython.AdvMotion_VTCommand_points_get, _WMX3ApiPython.AdvMotion_VTCommand_points_set)

    def SetPoints(self, index, value):
        return _WMX3ApiPython.AdvMotion_VTCommand_SetPoints(self, index, value)

    def GetPoints(self, index):
        return _WMX3ApiPython.AdvMotion_VTCommand_GetPoints(self, index)

    def __init__(self):
        _WMX3ApiPython.AdvMotion_VTCommand_swiginit(self, _WMX3ApiPython.new_AdvMotion_VTCommand())
    __swig_destroy__ = _WMX3ApiPython.delete_AdvMotion_VTCommand

# Register AdvMotion_VTCommand in _WMX3ApiPython:
_WMX3ApiPython.AdvMotion_VTCommand_swigregister(AdvMotion_VTCommand)
class AdvMotion_VTAdditionalCommand(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def GetData(self, pVTCommand):
        return _WMX3ApiPython.AdvMotion_VTAdditionalCommand_GetData(self, pVTCommand)
    pointCount = property(_WMX3ApiPython.AdvMotion_VTAdditionalCommand_pointCount_get, _WMX3ApiPython.AdvMotion_VTAdditionalCommand_pointCount_set)
    points = property(_WMX3ApiPython.AdvMotion_VTAdditionalCommand_points_get, _WMX3ApiPython.AdvMotion_VTAdditionalCommand_points_set)

    def SetPoints(self, index, value):
        return _WMX3ApiPython.AdvMotion_VTAdditionalCommand_SetPoints(self, index, value)

    def GetPoints(self, index):
        return _WMX3ApiPython.AdvMotion_VTAdditionalCommand_GetPoints(self, index)

    def __init__(self):
        _WMX3ApiPython.AdvMotion_VTAdditionalCommand_swiginit(self, _WMX3ApiPython.new_AdvMotion_VTAdditionalCommand())
    __swig_destroy__ = _WMX3ApiPython.delete_AdvMotion_VTAdditionalCommand

# Register AdvMotion_VTAdditionalCommand in _WMX3ApiPython:
_WMX3ApiPython.AdvMotion_VTAdditionalCommand_swigregister(AdvMotion_VTAdditionalCommand)
class AdvMotion_ATPoint(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def GetData(self, pATPoint):
        return _WMX3ApiPython.AdvMotion_ATPoint_GetData(self, pATPoint)
    acc = property(_WMX3ApiPython.AdvMotion_ATPoint_acc_get, _WMX3ApiPython.AdvMotion_ATPoint_acc_set)
    timeMilliseconds = property(_WMX3ApiPython.AdvMotion_ATPoint_timeMilliseconds_get, _WMX3ApiPython.AdvMotion_ATPoint_timeMilliseconds_set)

    def __init__(self):
        _WMX3ApiPython.AdvMotion_ATPoint_swiginit(self, _WMX3ApiPython.new_AdvMotion_ATPoint())
    __swig_destroy__ = _WMX3ApiPython.delete_AdvMotion_ATPoint

# Register AdvMotion_ATPoint in _WMX3ApiPython:
_WMX3ApiPython.AdvMotion_ATPoint_swigregister(AdvMotion_ATPoint)
class AdvMotion_ATCommand(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def GetData(self, pATCommand):
        return _WMX3ApiPython.AdvMotion_ATCommand_GetData(self, pATCommand)
    axis = property(_WMX3ApiPython.AdvMotion_ATCommand_axis_get, _WMX3ApiPython.AdvMotion_ATCommand_axis_set)
    pointCount = property(_WMX3ApiPython.AdvMotion_ATCommand_pointCount_get, _WMX3ApiPython.AdvMotion_ATCommand_pointCount_set)
    points = property(_WMX3ApiPython.AdvMotion_ATCommand_points_get, _WMX3ApiPython.AdvMotion_ATCommand_points_set)

    def SetPoints(self, index, value):
        return _WMX3ApiPython.AdvMotion_ATCommand_SetPoints(self, index, value)

    def GetPoints(self, index):
        return _WMX3ApiPython.AdvMotion_ATCommand_GetPoints(self, index)

    def __init__(self):
        _WMX3ApiPython.AdvMotion_ATCommand_swiginit(self, _WMX3ApiPython.new_AdvMotion_ATCommand())
    __swig_destroy__ = _WMX3ApiPython.delete_AdvMotion_ATCommand

# Register AdvMotion_ATCommand in _WMX3ApiPython:
_WMX3ApiPython.AdvMotion_ATCommand_swigregister(AdvMotion_ATCommand)
class AdvMotion_ATAdditionalCommand(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def GetData(self, pATCommand):
        return _WMX3ApiPython.AdvMotion_ATAdditionalCommand_GetData(self, pATCommand)
    pointCount = property(_WMX3ApiPython.AdvMotion_ATAdditionalCommand_pointCount_get, _WMX3ApiPython.AdvMotion_ATAdditionalCommand_pointCount_set)
    points = property(_WMX3ApiPython.AdvMotion_ATAdditionalCommand_points_get, _WMX3ApiPython.AdvMotion_ATAdditionalCommand_points_set)

    def SetPoints(self, index, value):
        return _WMX3ApiPython.AdvMotion_ATAdditionalCommand_SetPoints(self, index, value)

    def GetPoints(self, index):
        return _WMX3ApiPython.AdvMotion_ATAdditionalCommand_GetPoints(self, index)

    def __init__(self):
        _WMX3ApiPython.AdvMotion_ATAdditionalCommand_swiginit(self, _WMX3ApiPython.new_AdvMotion_ATAdditionalCommand())
    __swig_destroy__ = _WMX3ApiPython.delete_AdvMotion_ATAdditionalCommand

# Register AdvMotion_ATAdditionalCommand in _WMX3ApiPython:
_WMX3ApiPython.AdvMotion_ATAdditionalCommand_swigregister(AdvMotion_ATAdditionalCommand)
class AdvMotion_PathIntplSegmentType(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Linear = _WMX3ApiPython.AdvMotion_PathIntplSegmentType_Linear
    Circular = _WMX3ApiPython.AdvMotion_PathIntplSegmentType_Circular
    Pause = _WMX3ApiPython.AdvMotion_PathIntplSegmentType_Pause

    def __init__(self):
        _WMX3ApiPython.AdvMotion_PathIntplSegmentType_swiginit(self, _WMX3ApiPython.new_AdvMotion_PathIntplSegmentType())
    __swig_destroy__ = _WMX3ApiPython.delete_AdvMotion_PathIntplSegmentType

# Register AdvMotion_PathIntplSegmentType in _WMX3ApiPython:
_WMX3ApiPython.AdvMotion_PathIntplSegmentType_swigregister(AdvMotion_PathIntplSegmentType)
class AdvMotion_PathIntplOutputType(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Immediate = _WMX3ApiPython.AdvMotion_PathIntplOutputType_Immediate
    RemainingTime = _WMX3ApiPython.AdvMotion_PathIntplOutputType_RemainingTime
    CompletedTime = _WMX3ApiPython.AdvMotion_PathIntplOutputType_CompletedTime
    RemainingDist = _WMX3ApiPython.AdvMotion_PathIntplOutputType_RemainingDist
    CompletedDist = _WMX3ApiPython.AdvMotion_PathIntplOutputType_CompletedDist
    DistanceRatio = _WMX3ApiPython.AdvMotion_PathIntplOutputType_DistanceRatio

    def __init__(self):
        _WMX3ApiPython.AdvMotion_PathIntplOutputType_swiginit(self, _WMX3ApiPython.new_AdvMotion_PathIntplOutputType())
    __swig_destroy__ = _WMX3ApiPython.delete_AdvMotion_PathIntplOutputType

# Register AdvMotion_PathIntplOutputType in _WMX3ApiPython:
_WMX3ApiPython.AdvMotion_PathIntplOutputType_swigregister(AdvMotion_PathIntplOutputType)
class AdvMotion_PathIntplOutputSource(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    IOOutput = _WMX3ApiPython.AdvMotion_PathIntplOutputSource_IOOutput
    UserMemory = _WMX3ApiPython.AdvMotion_PathIntplOutputSource_UserMemory

    def __init__(self):
        _WMX3ApiPython.AdvMotion_PathIntplOutputSource_swiginit(self, _WMX3ApiPython.new_AdvMotion_PathIntplOutputSource())
    __swig_destroy__ = _WMX3ApiPython.delete_AdvMotion_PathIntplOutputSource

# Register AdvMotion_PathIntplOutputSource in _WMX3ApiPython:
_WMX3ApiPython.AdvMotion_PathIntplOutputSource_swigregister(AdvMotion_PathIntplOutputSource)
class AdvMotion_PathIntplCoordinateType(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Absolute = _WMX3ApiPython.AdvMotion_PathIntplCoordinateType_Absolute
    RelativeFromStart = _WMX3ApiPython.AdvMotion_PathIntplCoordinateType_RelativeFromStart
    RelativeFromEnd = _WMX3ApiPython.AdvMotion_PathIntplCoordinateType_RelativeFromEnd

    def __init__(self):
        _WMX3ApiPython.AdvMotion_PathIntplCoordinateType_swiginit(self, _WMX3ApiPython.new_AdvMotion_PathIntplCoordinateType())
    __swig_destroy__ = _WMX3ApiPython.delete_AdvMotion_PathIntplCoordinateType

# Register AdvMotion_PathIntplCoordinateType in _WMX3ApiPython:
_WMX3ApiPython.AdvMotion_PathIntplCoordinateType_swigregister(AdvMotion_PathIntplCoordinateType)
class AdvMotion_PathIntplCommand(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def GetData(self, pPathIntplCommand):
        return _WMX3ApiPython.AdvMotion_PathIntplCommand_GetData(self, pPathIntplCommand)
    axis = property(_WMX3ApiPython.AdvMotion_PathIntplCommand_axis_get, _WMX3ApiPython.AdvMotion_PathIntplCommand_axis_set)

    def SetAxis(self, index, value):
        return _WMX3ApiPython.AdvMotion_PathIntplCommand_SetAxis(self, index, value)

    def GetAxis(self, index):
        return _WMX3ApiPython.AdvMotion_PathIntplCommand_GetAxis(self, index)
    profile = property(_WMX3ApiPython.AdvMotion_PathIntplCommand_profile_get, _WMX3ApiPython.AdvMotion_PathIntplCommand_profile_set)

    def SetProfile(self, index, value):
        return _WMX3ApiPython.AdvMotion_PathIntplCommand_SetProfile(self, index, value)

    def GetProfile(self, index):
        return _WMX3ApiPython.AdvMotion_PathIntplCommand_GetProfile(self, index)
    numPoints = property(_WMX3ApiPython.AdvMotion_PathIntplCommand_numPoints_get, _WMX3ApiPython.AdvMotion_PathIntplCommand_numPoints_set)
    type = property(_WMX3ApiPython.AdvMotion_PathIntplCommand_type_get, _WMX3ApiPython.AdvMotion_PathIntplCommand_type_set)

    def SetType(self, index, value):
        return _WMX3ApiPython.AdvMotion_PathIntplCommand_SetType(self, index, value)

    def GetType(self, index):
        return _WMX3ApiPython.AdvMotion_PathIntplCommand_GetType(self, index)
    direction = property(_WMX3ApiPython.AdvMotion_PathIntplCommand_direction_get, _WMX3ApiPython.AdvMotion_PathIntplCommand_direction_set)

    def SetDirection(self, index, value):
        return _WMX3ApiPython.AdvMotion_PathIntplCommand_SetDirection(self, index, value)

    def GetDirection(self, index):
        return _WMX3ApiPython.AdvMotion_PathIntplCommand_GetDirection(self, index)
    target = property(_WMX3ApiPython.AdvMotion_PathIntplCommand_target_get, _WMX3ApiPython.AdvMotion_PathIntplCommand_target_set)

    def SetTarget(self, index1, index2, value):
        return _WMX3ApiPython.AdvMotion_PathIntplCommand_SetTarget(self, index1, index2, value)

    def GetTarget(self, index1, index2):
        return _WMX3ApiPython.AdvMotion_PathIntplCommand_GetTarget(self, index1, index2)
    centerPos = property(_WMX3ApiPython.AdvMotion_PathIntplCommand_centerPos_get, _WMX3ApiPython.AdvMotion_PathIntplCommand_centerPos_set)

    def SetCenterPos(self, index1, index2, value):
        return _WMX3ApiPython.AdvMotion_PathIntplCommand_SetCenterPos(self, index1, index2, value)

    def GetCenterPos(self, index1, index2):
        return _WMX3ApiPython.AdvMotion_PathIntplCommand_GetCenterPos(self, index1, index2)
    timeMilliseconds = property(_WMX3ApiPython.AdvMotion_PathIntplCommand_timeMilliseconds_get, _WMX3ApiPython.AdvMotion_PathIntplCommand_timeMilliseconds_set)

    def SetTimeMilliseconds(self, index, value):
        return _WMX3ApiPython.AdvMotion_PathIntplCommand_SetTimeMilliseconds(self, index, value)

    def GetTimeMilliseconds(self, index):
        return _WMX3ApiPython.AdvMotion_PathIntplCommand_GetTimeMilliseconds(self, index)
    enableAutoSmooth = property(_WMX3ApiPython.AdvMotion_PathIntplCommand_enableAutoSmooth_get, _WMX3ApiPython.AdvMotion_PathIntplCommand_enableAutoSmooth_set)
    autoSmoothRadius = property(_WMX3ApiPython.AdvMotion_PathIntplCommand_autoSmoothRadius_get, _WMX3ApiPython.AdvMotion_PathIntplCommand_autoSmoothRadius_set)

    def SetAutoSmoothRadius(self, index, value):
        return _WMX3ApiPython.AdvMotion_PathIntplCommand_SetAutoSmoothRadius(self, index, value)

    def GetAutoSmoothRadius(self, index):
        return _WMX3ApiPython.AdvMotion_PathIntplCommand_GetAutoSmoothRadius(self, index)
    enableConstProfile = property(_WMX3ApiPython.AdvMotion_PathIntplCommand_enableConstProfile_get, _WMX3ApiPython.AdvMotion_PathIntplCommand_enableConstProfile_set)
    numOutputs = property(_WMX3ApiPython.AdvMotion_PathIntplCommand_numOutputs_get, _WMX3ApiPython.AdvMotion_PathIntplCommand_numOutputs_set)
    outputType = property(_WMX3ApiPython.AdvMotion_PathIntplCommand_outputType_get, _WMX3ApiPython.AdvMotion_PathIntplCommand_outputType_set)

    def SetOutputType(self, index, value):
        return _WMX3ApiPython.AdvMotion_PathIntplCommand_SetOutputType(self, index, value)

    def GetOutputType(self, index):
        return _WMX3ApiPython.AdvMotion_PathIntplCommand_GetOutputType(self, index)
    outputPoint = property(_WMX3ApiPython.AdvMotion_PathIntplCommand_outputPoint_get, _WMX3ApiPython.AdvMotion_PathIntplCommand_outputPoint_set)

    def SetOutputPoint(self, index, value):
        return _WMX3ApiPython.AdvMotion_PathIntplCommand_SetOutputPoint(self, index, value)

    def GetOutputPoint(self, index):
        return _WMX3ApiPython.AdvMotion_PathIntplCommand_GetOutputPoint(self, index)
    outputTriggerValue = property(_WMX3ApiPython.AdvMotion_PathIntplCommand_outputTriggerValue_get, _WMX3ApiPython.AdvMotion_PathIntplCommand_outputTriggerValue_set)

    def SetOutputTriggerValue(self, index, value):
        return _WMX3ApiPython.AdvMotion_PathIntplCommand_SetOutputTriggerValue(self, index, value)

    def GetOutputTriggerValue(self, index):
        return _WMX3ApiPython.AdvMotion_PathIntplCommand_GetOutputTriggerValue(self, index)
    outputSource = property(_WMX3ApiPython.AdvMotion_PathIntplCommand_outputSource_get, _WMX3ApiPython.AdvMotion_PathIntplCommand_outputSource_set)

    def SetOutputSource(self, index, value):
        return _WMX3ApiPython.AdvMotion_PathIntplCommand_SetOutputSource(self, index, value)

    def GetOutputSource(self, index):
        return _WMX3ApiPython.AdvMotion_PathIntplCommand_GetOutputSource(self, index)
    outputByteAddr = property(_WMX3ApiPython.AdvMotion_PathIntplCommand_outputByteAddr_get, _WMX3ApiPython.AdvMotion_PathIntplCommand_outputByteAddr_set)

    def SetOutputByteAddr(self, index, value):
        return _WMX3ApiPython.AdvMotion_PathIntplCommand_SetOutputByteAddr(self, index, value)

    def GetOutputByteAddr(self, index):
        return _WMX3ApiPython.AdvMotion_PathIntplCommand_GetOutputByteAddr(self, index)
    outputBitAddr = property(_WMX3ApiPython.AdvMotion_PathIntplCommand_outputBitAddr_get, _WMX3ApiPython.AdvMotion_PathIntplCommand_outputBitAddr_set)

    def SetOutputBitAddr(self, index, value):
        return _WMX3ApiPython.AdvMotion_PathIntplCommand_SetOutputBitAddr(self, index, value)

    def GetOutputBitAddr(self, index):
        return _WMX3ApiPython.AdvMotion_PathIntplCommand_GetOutputBitAddr(self, index)
    outputValue = property(_WMX3ApiPython.AdvMotion_PathIntplCommand_outputValue_get, _WMX3ApiPython.AdvMotion_PathIntplCommand_outputValue_set)

    def SetOutputValue(self, index, value):
        return _WMX3ApiPython.AdvMotion_PathIntplCommand_SetOutputValue(self, index, value)

    def GetOutputValue(self, index):
        return _WMX3ApiPython.AdvMotion_PathIntplCommand_GetOutputValue(self, index)

    def __init__(self):
        _WMX3ApiPython.AdvMotion_PathIntplCommand_swiginit(self, _WMX3ApiPython.new_AdvMotion_PathIntplCommand())
    __swig_destroy__ = _WMX3ApiPython.delete_AdvMotion_PathIntplCommand

# Register AdvMotion_PathIntplCommand in _WMX3ApiPython:
_WMX3ApiPython.AdvMotion_PathIntplCommand_swigregister(AdvMotion_PathIntplCommand)
class AdvMotion_PathIntplAdditionalCommand(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def SetData(self, pPathIntplAdditionalCommand):
        return _WMX3ApiPython.AdvMotion_PathIntplAdditionalCommand_SetData(self, pPathIntplAdditionalCommand)

    def GetData(self, pPathIntplAdditionalCommand):
        return _WMX3ApiPython.AdvMotion_PathIntplAdditionalCommand_GetData(self, pPathIntplAdditionalCommand)
    profile = property(_WMX3ApiPython.AdvMotion_PathIntplAdditionalCommand_profile_get, _WMX3ApiPython.AdvMotion_PathIntplAdditionalCommand_profile_set)

    def SetProfile(self, index, value):
        return _WMX3ApiPython.AdvMotion_PathIntplAdditionalCommand_SetProfile(self, index, value)

    def GetProfile(self, index):
        return _WMX3ApiPython.AdvMotion_PathIntplAdditionalCommand_GetProfile(self, index)
    numPoints = property(_WMX3ApiPython.AdvMotion_PathIntplAdditionalCommand_numPoints_get, _WMX3ApiPython.AdvMotion_PathIntplAdditionalCommand_numPoints_set)
    type = property(_WMX3ApiPython.AdvMotion_PathIntplAdditionalCommand_type_get, _WMX3ApiPython.AdvMotion_PathIntplAdditionalCommand_type_set)

    def SetType(self, index, value):
        return _WMX3ApiPython.AdvMotion_PathIntplAdditionalCommand_SetType(self, index, value)

    def GetType(self, index):
        return _WMX3ApiPython.AdvMotion_PathIntplAdditionalCommand_GetType(self, index)
    direction = property(_WMX3ApiPython.AdvMotion_PathIntplAdditionalCommand_direction_get, _WMX3ApiPython.AdvMotion_PathIntplAdditionalCommand_direction_set)

    def SetDirection(self, index, value):
        return _WMX3ApiPython.AdvMotion_PathIntplAdditionalCommand_SetDirection(self, index, value)

    def GetDirection(self, index):
        return _WMX3ApiPython.AdvMotion_PathIntplAdditionalCommand_GetDirection(self, index)
    target = property(_WMX3ApiPython.AdvMotion_PathIntplAdditionalCommand_target_get, _WMX3ApiPython.AdvMotion_PathIntplAdditionalCommand_target_set)

    def SetTarget(self, index1, index2, value):
        return _WMX3ApiPython.AdvMotion_PathIntplAdditionalCommand_SetTarget(self, index1, index2, value)

    def GetTarget(self, index1, index2):
        return _WMX3ApiPython.AdvMotion_PathIntplAdditionalCommand_GetTarget(self, index1, index2)
    centerPos = property(_WMX3ApiPython.AdvMotion_PathIntplAdditionalCommand_centerPos_get, _WMX3ApiPython.AdvMotion_PathIntplAdditionalCommand_centerPos_set)

    def SetCenterPos(self, index1, index2, value):
        return _WMX3ApiPython.AdvMotion_PathIntplAdditionalCommand_SetCenterPos(self, index1, index2, value)

    def GetCenterPos(self, index1, index2):
        return _WMX3ApiPython.AdvMotion_PathIntplAdditionalCommand_GetCenterPos(self, index1, index2)
    timeMilliseconds = property(_WMX3ApiPython.AdvMotion_PathIntplAdditionalCommand_timeMilliseconds_get, _WMX3ApiPython.AdvMotion_PathIntplAdditionalCommand_timeMilliseconds_set)

    def SetTimeMilliseconds(self, index, value):
        return _WMX3ApiPython.AdvMotion_PathIntplAdditionalCommand_SetTimeMilliseconds(self, index, value)

    def GetTimeMilliseconds(self, index):
        return _WMX3ApiPython.AdvMotion_PathIntplAdditionalCommand_GetTimeMilliseconds(self, index)
    autoSmoothRadius = property(_WMX3ApiPython.AdvMotion_PathIntplAdditionalCommand_autoSmoothRadius_get, _WMX3ApiPython.AdvMotion_PathIntplAdditionalCommand_autoSmoothRadius_set)

    def SetAutoSmoothRadius(self, index, value):
        return _WMX3ApiPython.AdvMotion_PathIntplAdditionalCommand_SetAutoSmoothRadius(self, index, value)

    def GetAutoSmoothRadius(self, index):
        return _WMX3ApiPython.AdvMotion_PathIntplAdditionalCommand_GetAutoSmoothRadius(self, index)

    def __init__(self):
        _WMX3ApiPython.AdvMotion_PathIntplAdditionalCommand_swiginit(self, _WMX3ApiPython.new_AdvMotion_PathIntplAdditionalCommand())
    __swig_destroy__ = _WMX3ApiPython.delete_AdvMotion_PathIntplAdditionalCommand

# Register AdvMotion_PathIntplAdditionalCommand in _WMX3ApiPython:
_WMX3ApiPython.AdvMotion_PathIntplAdditionalCommand_swigregister(AdvMotion_PathIntplAdditionalCommand)
class AdvMotion_PathIntpl3DCommand(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def GetData(self, pPathIntpl3DCommand):
        return _WMX3ApiPython.AdvMotion_PathIntpl3DCommand_GetData(self, pPathIntpl3DCommand)
    axis = property(_WMX3ApiPython.AdvMotion_PathIntpl3DCommand_axis_get, _WMX3ApiPython.AdvMotion_PathIntpl3DCommand_axis_set)

    def SetAxis(self, index, value):
        return _WMX3ApiPython.AdvMotion_PathIntpl3DCommand_SetAxis(self, index, value)

    def GetAxis(self, index):
        return _WMX3ApiPython.AdvMotion_PathIntpl3DCommand_GetAxis(self, index)
    profile = property(_WMX3ApiPython.AdvMotion_PathIntpl3DCommand_profile_get, _WMX3ApiPython.AdvMotion_PathIntpl3DCommand_profile_set)

    def SetProfile(self, index, value):
        return _WMX3ApiPython.AdvMotion_PathIntpl3DCommand_SetProfile(self, index, value)

    def GetProfile(self, index):
        return _WMX3ApiPython.AdvMotion_PathIntpl3DCommand_GetProfile(self, index)
    numPoints = property(_WMX3ApiPython.AdvMotion_PathIntpl3DCommand_numPoints_get, _WMX3ApiPython.AdvMotion_PathIntpl3DCommand_numPoints_set)
    type = property(_WMX3ApiPython.AdvMotion_PathIntpl3DCommand_type_get, _WMX3ApiPython.AdvMotion_PathIntpl3DCommand_type_set)

    def SetType(self, index, value):
        return _WMX3ApiPython.AdvMotion_PathIntpl3DCommand_SetType(self, index, value)

    def GetType(self, index):
        return _WMX3ApiPython.AdvMotion_PathIntpl3DCommand_GetType(self, index)
    target = property(_WMX3ApiPython.AdvMotion_PathIntpl3DCommand_target_get, _WMX3ApiPython.AdvMotion_PathIntpl3DCommand_target_set)

    def SetTarget(self, index1, index2, value):
        return _WMX3ApiPython.AdvMotion_PathIntpl3DCommand_SetTarget(self, index1, index2, value)

    def GetTarget(self, index1, index2):
        return _WMX3ApiPython.AdvMotion_PathIntpl3DCommand_GetTarget(self, index1, index2)
    circleIntermediateTarget = property(_WMX3ApiPython.AdvMotion_PathIntpl3DCommand_circleIntermediateTarget_get, _WMX3ApiPython.AdvMotion_PathIntpl3DCommand_circleIntermediateTarget_set)

    def SetCircleIntermediateTarget(self, index1, index2, value):
        return _WMX3ApiPython.AdvMotion_PathIntpl3DCommand_SetCircleIntermediateTarget(self, index1, index2, value)

    def GetCircleIntermediateTarget(self, index1, index2):
        return _WMX3ApiPython.AdvMotion_PathIntpl3DCommand_GetCircleIntermediateTarget(self, index1, index2)
    timeMilliseconds = property(_WMX3ApiPython.AdvMotion_PathIntpl3DCommand_timeMilliseconds_get, _WMX3ApiPython.AdvMotion_PathIntpl3DCommand_timeMilliseconds_set)

    def SetTimeMilliseconds(self, index, value):
        return _WMX3ApiPython.AdvMotion_PathIntpl3DCommand_SetTimeMilliseconds(self, index, value)

    def GetTimeMilliseconds(self, index):
        return _WMX3ApiPython.AdvMotion_PathIntpl3DCommand_GetTimeMilliseconds(self, index)
    enableAutoSmooth = property(_WMX3ApiPython.AdvMotion_PathIntpl3DCommand_enableAutoSmooth_get, _WMX3ApiPython.AdvMotion_PathIntpl3DCommand_enableAutoSmooth_set)
    autoSmoothRadius = property(_WMX3ApiPython.AdvMotion_PathIntpl3DCommand_autoSmoothRadius_get, _WMX3ApiPython.AdvMotion_PathIntpl3DCommand_autoSmoothRadius_set)

    def SetAutoSmoothRadius(self, index, value):
        return _WMX3ApiPython.AdvMotion_PathIntpl3DCommand_SetAutoSmoothRadius(self, index, value)

    def GetAutoSmoothRadius(self, index):
        return _WMX3ApiPython.AdvMotion_PathIntpl3DCommand_GetAutoSmoothRadius(self, index)
    enableConstProfile = property(_WMX3ApiPython.AdvMotion_PathIntpl3DCommand_enableConstProfile_get, _WMX3ApiPython.AdvMotion_PathIntpl3DCommand_enableConstProfile_set)
    numOutputs = property(_WMX3ApiPython.AdvMotion_PathIntpl3DCommand_numOutputs_get, _WMX3ApiPython.AdvMotion_PathIntpl3DCommand_numOutputs_set)
    outputType = property(_WMX3ApiPython.AdvMotion_PathIntpl3DCommand_outputType_get, _WMX3ApiPython.AdvMotion_PathIntpl3DCommand_outputType_set)

    def SetOutputType(self, index, value):
        return _WMX3ApiPython.AdvMotion_PathIntpl3DCommand_SetOutputType(self, index, value)

    def GetOutputType(self, index):
        return _WMX3ApiPython.AdvMotion_PathIntpl3DCommand_GetOutputType(self, index)
    outputPoint = property(_WMX3ApiPython.AdvMotion_PathIntpl3DCommand_outputPoint_get, _WMX3ApiPython.AdvMotion_PathIntpl3DCommand_outputPoint_set)

    def SetOutputPoint(self, index, value):
        return _WMX3ApiPython.AdvMotion_PathIntpl3DCommand_SetOutputPoint(self, index, value)

    def GetOutputPoint(self, index):
        return _WMX3ApiPython.AdvMotion_PathIntpl3DCommand_GetOutputPoint(self, index)
    outputTriggerValue = property(_WMX3ApiPython.AdvMotion_PathIntpl3DCommand_outputTriggerValue_get, _WMX3ApiPython.AdvMotion_PathIntpl3DCommand_outputTriggerValue_set)

    def SetOutputTriggerValue(self, index, value):
        return _WMX3ApiPython.AdvMotion_PathIntpl3DCommand_SetOutputTriggerValue(self, index, value)

    def GetOutputTriggerValue(self, index):
        return _WMX3ApiPython.AdvMotion_PathIntpl3DCommand_GetOutputTriggerValue(self, index)
    outputSource = property(_WMX3ApiPython.AdvMotion_PathIntpl3DCommand_outputSource_get, _WMX3ApiPython.AdvMotion_PathIntpl3DCommand_outputSource_set)

    def SetOutputSource(self, index, value):
        return _WMX3ApiPython.AdvMotion_PathIntpl3DCommand_SetOutputSource(self, index, value)

    def GetOutputSource(self, index):
        return _WMX3ApiPython.AdvMotion_PathIntpl3DCommand_GetOutputSource(self, index)
    outputByteAddr = property(_WMX3ApiPython.AdvMotion_PathIntpl3DCommand_outputByteAddr_get, _WMX3ApiPython.AdvMotion_PathIntpl3DCommand_outputByteAddr_set)

    def SetOutputByteAddr(self, index, value):
        return _WMX3ApiPython.AdvMotion_PathIntpl3DCommand_SetOutputByteAddr(self, index, value)

    def GetOutputByteAddr(self, index):
        return _WMX3ApiPython.AdvMotion_PathIntpl3DCommand_GetOutputByteAddr(self, index)
    outputBitAddr = property(_WMX3ApiPython.AdvMotion_PathIntpl3DCommand_outputBitAddr_get, _WMX3ApiPython.AdvMotion_PathIntpl3DCommand_outputBitAddr_set)

    def SetOutputBitAddr(self, index, value):
        return _WMX3ApiPython.AdvMotion_PathIntpl3DCommand_SetOutputBitAddr(self, index, value)

    def GetOutputBitAddr(self, index):
        return _WMX3ApiPython.AdvMotion_PathIntpl3DCommand_GetOutputBitAddr(self, index)
    outputValue = property(_WMX3ApiPython.AdvMotion_PathIntpl3DCommand_outputValue_get, _WMX3ApiPython.AdvMotion_PathIntpl3DCommand_outputValue_set)

    def SetOutputValue(self, index, value):
        return _WMX3ApiPython.AdvMotion_PathIntpl3DCommand_SetOutputValue(self, index, value)

    def GetOutputValue(self, index):
        return _WMX3ApiPython.AdvMotion_PathIntpl3DCommand_GetOutputValue(self, index)

    def __init__(self):
        _WMX3ApiPython.AdvMotion_PathIntpl3DCommand_swiginit(self, _WMX3ApiPython.new_AdvMotion_PathIntpl3DCommand())
    __swig_destroy__ = _WMX3ApiPython.delete_AdvMotion_PathIntpl3DCommand

# Register AdvMotion_PathIntpl3DCommand in _WMX3ApiPython:
_WMX3ApiPython.AdvMotion_PathIntpl3DCommand_swigregister(AdvMotion_PathIntpl3DCommand)
class AdvMotion_PathIntpl3DAdditionalCommand(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def SetData(self, pPathIntpl3DAdditionalCommand):
        return _WMX3ApiPython.AdvMotion_PathIntpl3DAdditionalCommand_SetData(self, pPathIntpl3DAdditionalCommand)

    def GetData(self, pPathIntpl3DAdditionalCommand):
        return _WMX3ApiPython.AdvMotion_PathIntpl3DAdditionalCommand_GetData(self, pPathIntpl3DAdditionalCommand)
    profile = property(_WMX3ApiPython.AdvMotion_PathIntpl3DAdditionalCommand_profile_get, _WMX3ApiPython.AdvMotion_PathIntpl3DAdditionalCommand_profile_set)

    def SetProfile(self, index, value):
        return _WMX3ApiPython.AdvMotion_PathIntpl3DAdditionalCommand_SetProfile(self, index, value)

    def GetProfile(self, index):
        return _WMX3ApiPython.AdvMotion_PathIntpl3DAdditionalCommand_GetProfile(self, index)
    numPoints = property(_WMX3ApiPython.AdvMotion_PathIntpl3DAdditionalCommand_numPoints_get, _WMX3ApiPython.AdvMotion_PathIntpl3DAdditionalCommand_numPoints_set)
    type = property(_WMX3ApiPython.AdvMotion_PathIntpl3DAdditionalCommand_type_get, _WMX3ApiPython.AdvMotion_PathIntpl3DAdditionalCommand_type_set)

    def SetType(self, index, value):
        return _WMX3ApiPython.AdvMotion_PathIntpl3DAdditionalCommand_SetType(self, index, value)

    def GetType(self, index):
        return _WMX3ApiPython.AdvMotion_PathIntpl3DAdditionalCommand_GetType(self, index)
    target = property(_WMX3ApiPython.AdvMotion_PathIntpl3DAdditionalCommand_target_get, _WMX3ApiPython.AdvMotion_PathIntpl3DAdditionalCommand_target_set)

    def SetTarget(self, index1, index2, value):
        return _WMX3ApiPython.AdvMotion_PathIntpl3DAdditionalCommand_SetTarget(self, index1, index2, value)

    def GetTarget(self, index1, index2):
        return _WMX3ApiPython.AdvMotion_PathIntpl3DAdditionalCommand_GetTarget(self, index1, index2)
    circleIntermediateTarget = property(_WMX3ApiPython.AdvMotion_PathIntpl3DAdditionalCommand_circleIntermediateTarget_get, _WMX3ApiPython.AdvMotion_PathIntpl3DAdditionalCommand_circleIntermediateTarget_set)

    def SetCircleIntermediateTarget(self, index1, index2, value):
        return _WMX3ApiPython.AdvMotion_PathIntpl3DAdditionalCommand_SetCircleIntermediateTarget(self, index1, index2, value)

    def GetCircleIntermediateTarget(self, index1, index2):
        return _WMX3ApiPython.AdvMotion_PathIntpl3DAdditionalCommand_GetCircleIntermediateTarget(self, index1, index2)
    timeMilliseconds = property(_WMX3ApiPython.AdvMotion_PathIntpl3DAdditionalCommand_timeMilliseconds_get, _WMX3ApiPython.AdvMotion_PathIntpl3DAdditionalCommand_timeMilliseconds_set)

    def SetTimeMilliseconds(self, index, value):
        return _WMX3ApiPython.AdvMotion_PathIntpl3DAdditionalCommand_SetTimeMilliseconds(self, index, value)

    def GetTimeMilliseconds(self, index):
        return _WMX3ApiPython.AdvMotion_PathIntpl3DAdditionalCommand_GetTimeMilliseconds(self, index)
    autoSmoothRadius = property(_WMX3ApiPython.AdvMotion_PathIntpl3DAdditionalCommand_autoSmoothRadius_get, _WMX3ApiPython.AdvMotion_PathIntpl3DAdditionalCommand_autoSmoothRadius_set)

    def SetAutoSmoothRadius(self, index, value):
        return _WMX3ApiPython.AdvMotion_PathIntpl3DAdditionalCommand_SetAutoSmoothRadius(self, index, value)

    def GetAutoSmoothRadius(self, index):
        return _WMX3ApiPython.AdvMotion_PathIntpl3DAdditionalCommand_GetAutoSmoothRadius(self, index)

    def __init__(self):
        _WMX3ApiPython.AdvMotion_PathIntpl3DAdditionalCommand_swiginit(self, _WMX3ApiPython.new_AdvMotion_PathIntpl3DAdditionalCommand())
    __swig_destroy__ = _WMX3ApiPython.delete_AdvMotion_PathIntpl3DAdditionalCommand

# Register AdvMotion_PathIntpl3DAdditionalCommand in _WMX3ApiPython:
_WMX3ApiPython.AdvMotion_PathIntpl3DAdditionalCommand_swigregister(AdvMotion_PathIntpl3DAdditionalCommand)
class AdvMotion_PathIntplWithRotationConfiguration(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def GetData(self, pPathIntplWithRotationConfiguration):
        return _WMX3ApiPython.AdvMotion_PathIntplWithRotationConfiguration_GetData(self, pPathIntplWithRotationConfiguration)
    axis = property(_WMX3ApiPython.AdvMotion_PathIntplWithRotationConfiguration_axis_get, _WMX3ApiPython.AdvMotion_PathIntplWithRotationConfiguration_axis_set)

    def SetAxis(self, index, value):
        return _WMX3ApiPython.AdvMotion_PathIntplWithRotationConfiguration_SetAxis(self, index, value)

    def GetAxis(self, index):
        return _WMX3ApiPython.AdvMotion_PathIntplWithRotationConfiguration_GetAxis(self, index)
    enableAutoSmooth = property(_WMX3ApiPython.AdvMotion_PathIntplWithRotationConfiguration_enableAutoSmooth_get, _WMX3ApiPython.AdvMotion_PathIntplWithRotationConfiguration_enableAutoSmooth_set)
    axisCoordinateFlip = property(_WMX3ApiPython.AdvMotion_PathIntplWithRotationConfiguration_axisCoordinateFlip_get, _WMX3ApiPython.AdvMotion_PathIntplWithRotationConfiguration_axisCoordinateFlip_set)

    def SetAxisCoordinateFlip(self, index, value):
        return _WMX3ApiPython.AdvMotion_PathIntplWithRotationConfiguration_SetAxisCoordinateFlip(self, index, value)

    def GetAxisCoordinateFlip(self, index):
        return _WMX3ApiPython.AdvMotion_PathIntplWithRotationConfiguration_GetAxisCoordinateFlip(self, index)
    rotationalAxis = property(_WMX3ApiPython.AdvMotion_PathIntplWithRotationConfiguration_rotationalAxis_get, _WMX3ApiPython.AdvMotion_PathIntplWithRotationConfiguration_rotationalAxis_set)
    rotationalAxisPolarity = property(_WMX3ApiPython.AdvMotion_PathIntplWithRotationConfiguration_rotationalAxisPolarity_get, _WMX3ApiPython.AdvMotion_PathIntplWithRotationConfiguration_rotationalAxisPolarity_set)
    disableRotationalAxis = property(_WMX3ApiPython.AdvMotion_PathIntplWithRotationConfiguration_disableRotationalAxis_get, _WMX3ApiPython.AdvMotion_PathIntplWithRotationConfiguration_disableRotationalAxis_set)
    disableXYRotationalMotion = property(_WMX3ApiPython.AdvMotion_PathIntplWithRotationConfiguration_disableXYRotationalMotion_get, _WMX3ApiPython.AdvMotion_PathIntplWithRotationConfiguration_disableXYRotationalMotion_set)
    centerOfRotation = property(_WMX3ApiPython.AdvMotion_PathIntplWithRotationConfiguration_centerOfRotation_get, _WMX3ApiPython.AdvMotion_PathIntplWithRotationConfiguration_centerOfRotation_set)

    def SetCenterOfRotation(self, index, value):
        return _WMX3ApiPython.AdvMotion_PathIntplWithRotationConfiguration_SetCenterOfRotation(self, index, value)

    def GetCenterOfRotation(self, index):
        return _WMX3ApiPython.AdvMotion_PathIntplWithRotationConfiguration_GetCenterOfRotation(self, index)
    coordinateType = property(_WMX3ApiPython.AdvMotion_PathIntplWithRotationConfiguration_coordinateType_get, _WMX3ApiPython.AdvMotion_PathIntplWithRotationConfiguration_coordinateType_set)
    enableZAxis = property(_WMX3ApiPython.AdvMotion_PathIntplWithRotationConfiguration_enableZAxis_get, _WMX3ApiPython.AdvMotion_PathIntplWithRotationConfiguration_enableZAxis_set)
    zAxis = property(_WMX3ApiPython.AdvMotion_PathIntplWithRotationConfiguration_zAxis_get, _WMX3ApiPython.AdvMotion_PathIntplWithRotationConfiguration_zAxis_set)
    enableConstProfile = property(_WMX3ApiPython.AdvMotion_PathIntplWithRotationConfiguration_enableConstProfile_get, _WMX3ApiPython.AdvMotion_PathIntplWithRotationConfiguration_enableConstProfile_set)
    enableLocalCenterOfRotation = property(_WMX3ApiPython.AdvMotion_PathIntplWithRotationConfiguration_enableLocalCenterOfRotation_get, _WMX3ApiPython.AdvMotion_PathIntplWithRotationConfiguration_enableLocalCenterOfRotation_set)
    angleCorrectionMinimumAngle = property(_WMX3ApiPython.AdvMotion_PathIntplWithRotationConfiguration_angleCorrectionMinimumAngle_get, _WMX3ApiPython.AdvMotion_PathIntplWithRotationConfiguration_angleCorrectionMinimumAngle_set)
    angleCorrectionProfile = property(_WMX3ApiPython.AdvMotion_PathIntplWithRotationConfiguration_angleCorrectionProfile_get, _WMX3ApiPython.AdvMotion_PathIntplWithRotationConfiguration_angleCorrectionProfile_set)
    numOutputs = property(_WMX3ApiPython.AdvMotion_PathIntplWithRotationConfiguration_numOutputs_get, _WMX3ApiPython.AdvMotion_PathIntplWithRotationConfiguration_numOutputs_set)
    outputType = property(_WMX3ApiPython.AdvMotion_PathIntplWithRotationConfiguration_outputType_get, _WMX3ApiPython.AdvMotion_PathIntplWithRotationConfiguration_outputType_set)

    def SetOutputType(self, index, value):
        return _WMX3ApiPython.AdvMotion_PathIntplWithRotationConfiguration_SetOutputType(self, index, value)

    def GetOutputType(self, index):
        return _WMX3ApiPython.AdvMotion_PathIntplWithRotationConfiguration_GetOutputType(self, index)
    outputPoint = property(_WMX3ApiPython.AdvMotion_PathIntplWithRotationConfiguration_outputPoint_get, _WMX3ApiPython.AdvMotion_PathIntplWithRotationConfiguration_outputPoint_set)

    def SetOutputPoint(self, index, value):
        return _WMX3ApiPython.AdvMotion_PathIntplWithRotationConfiguration_SetOutputPoint(self, index, value)

    def GetOutputPoint(self, index):
        return _WMX3ApiPython.AdvMotion_PathIntplWithRotationConfiguration_GetOutputPoint(self, index)
    outputTriggerValue = property(_WMX3ApiPython.AdvMotion_PathIntplWithRotationConfiguration_outputTriggerValue_get, _WMX3ApiPython.AdvMotion_PathIntplWithRotationConfiguration_outputTriggerValue_set)

    def SetOutputTriggerValue(self, index, value):
        return _WMX3ApiPython.AdvMotion_PathIntplWithRotationConfiguration_SetOutputTriggerValue(self, index, value)

    def GetOutputTriggerValue(self, index):
        return _WMX3ApiPython.AdvMotion_PathIntplWithRotationConfiguration_GetOutputTriggerValue(self, index)
    outputSource = property(_WMX3ApiPython.AdvMotion_PathIntplWithRotationConfiguration_outputSource_get, _WMX3ApiPython.AdvMotion_PathIntplWithRotationConfiguration_outputSource_set)

    def SetOutputSource(self, index, value):
        return _WMX3ApiPython.AdvMotion_PathIntplWithRotationConfiguration_SetOutputSource(self, index, value)

    def GetOutputSource(self, index):
        return _WMX3ApiPython.AdvMotion_PathIntplWithRotationConfiguration_GetOutputSource(self, index)
    outputByteAddr = property(_WMX3ApiPython.AdvMotion_PathIntplWithRotationConfiguration_outputByteAddr_get, _WMX3ApiPython.AdvMotion_PathIntplWithRotationConfiguration_outputByteAddr_set)

    def SetOutputByteAddr(self, index, value):
        return _WMX3ApiPython.AdvMotion_PathIntplWithRotationConfiguration_SetOutputByteAddr(self, index, value)

    def GetOutputByteAddr(self, index):
        return _WMX3ApiPython.AdvMotion_PathIntplWithRotationConfiguration_GetOutputByteAddr(self, index)
    outputBitAddr = property(_WMX3ApiPython.AdvMotion_PathIntplWithRotationConfiguration_outputBitAddr_get, _WMX3ApiPython.AdvMotion_PathIntplWithRotationConfiguration_outputBitAddr_set)

    def SetOutputBitAddr(self, index, value):
        return _WMX3ApiPython.AdvMotion_PathIntplWithRotationConfiguration_SetOutputBitAddr(self, index, value)

    def GetOutputBitAddr(self, index):
        return _WMX3ApiPython.AdvMotion_PathIntplWithRotationConfiguration_GetOutputBitAddr(self, index)
    outputValue = property(_WMX3ApiPython.AdvMotion_PathIntplWithRotationConfiguration_outputValue_get, _WMX3ApiPython.AdvMotion_PathIntplWithRotationConfiguration_outputValue_set)

    def SetOutputValue(self, index, value):
        return _WMX3ApiPython.AdvMotion_PathIntplWithRotationConfiguration_SetOutputValue(self, index, value)

    def GetOutputValue(self, index):
        return _WMX3ApiPython.AdvMotion_PathIntplWithRotationConfiguration_GetOutputValue(self, index)

    def __init__(self):
        _WMX3ApiPython.AdvMotion_PathIntplWithRotationConfiguration_swiginit(self, _WMX3ApiPython.new_AdvMotion_PathIntplWithRotationConfiguration())
    __swig_destroy__ = _WMX3ApiPython.delete_AdvMotion_PathIntplWithRotationConfiguration

# Register AdvMotion_PathIntplWithRotationConfiguration in _WMX3ApiPython:
_WMX3ApiPython.AdvMotion_PathIntplWithRotationConfiguration_swigregister(AdvMotion_PathIntplWithRotationConfiguration)
class AdvMotion_PathIntplWithRotationCommandPoint(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def GetData(self, pPathIntplWithRotationCommandPoint):
        return _WMX3ApiPython.AdvMotion_PathIntplWithRotationCommandPoint_GetData(self, pPathIntplWithRotationCommandPoint)
    type = property(_WMX3ApiPython.AdvMotion_PathIntplWithRotationCommandPoint_type_get, _WMX3ApiPython.AdvMotion_PathIntplWithRotationCommandPoint_type_set)
    profile = property(_WMX3ApiPython.AdvMotion_PathIntplWithRotationCommandPoint_profile_get, _WMX3ApiPython.AdvMotion_PathIntplWithRotationCommandPoint_profile_set)
    direction = property(_WMX3ApiPython.AdvMotion_PathIntplWithRotationCommandPoint_direction_get, _WMX3ApiPython.AdvMotion_PathIntplWithRotationCommandPoint_direction_set)
    target = property(_WMX3ApiPython.AdvMotion_PathIntplWithRotationCommandPoint_target_get, _WMX3ApiPython.AdvMotion_PathIntplWithRotationCommandPoint_target_set)

    def SetTarget(self, index, value):
        return _WMX3ApiPython.AdvMotion_PathIntplWithRotationCommandPoint_SetTarget(self, index, value)

    def GetTarget(self, index):
        return _WMX3ApiPython.AdvMotion_PathIntplWithRotationCommandPoint_GetTarget(self, index)
    centerPos = property(_WMX3ApiPython.AdvMotion_PathIntplWithRotationCommandPoint_centerPos_get, _WMX3ApiPython.AdvMotion_PathIntplWithRotationCommandPoint_centerPos_set)

    def SetCenterPos(self, index, value):
        return _WMX3ApiPython.AdvMotion_PathIntplWithRotationCommandPoint_SetCenterPos(self, index, value)

    def GetCenterPos(self, index):
        return _WMX3ApiPython.AdvMotion_PathIntplWithRotationCommandPoint_GetCenterPos(self, index)
    autoSmoothRadius = property(_WMX3ApiPython.AdvMotion_PathIntplWithRotationCommandPoint_autoSmoothRadius_get, _WMX3ApiPython.AdvMotion_PathIntplWithRotationCommandPoint_autoSmoothRadius_set)
    zAxisTarget = property(_WMX3ApiPython.AdvMotion_PathIntplWithRotationCommandPoint_zAxisTarget_get, _WMX3ApiPython.AdvMotion_PathIntplWithRotationCommandPoint_zAxisTarget_set)
    useLocalCenterOfRotation = property(_WMX3ApiPython.AdvMotion_PathIntplWithRotationCommandPoint_useLocalCenterOfRotation_get, _WMX3ApiPython.AdvMotion_PathIntplWithRotationCommandPoint_useLocalCenterOfRotation_set)
    localCenterOfRotationDirection = property(_WMX3ApiPython.AdvMotion_PathIntplWithRotationCommandPoint_localCenterOfRotationDirection_get, _WMX3ApiPython.AdvMotion_PathIntplWithRotationCommandPoint_localCenterOfRotationDirection_set)
    localCenterOfRotation = property(_WMX3ApiPython.AdvMotion_PathIntplWithRotationCommandPoint_localCenterOfRotation_get, _WMX3ApiPython.AdvMotion_PathIntplWithRotationCommandPoint_localCenterOfRotation_set)

    def SetLocalCenterOfRotation(self, index, value):
        return _WMX3ApiPython.AdvMotion_PathIntplWithRotationCommandPoint_SetLocalCenterOfRotation(self, index, value)

    def GetLocalCenterOfRotation(self, index):
        return _WMX3ApiPython.AdvMotion_PathIntplWithRotationCommandPoint_GetLocalCenterOfRotation(self, index)

    def __init__(self):
        _WMX3ApiPython.AdvMotion_PathIntplWithRotationCommandPoint_swiginit(self, _WMX3ApiPython.new_AdvMotion_PathIntplWithRotationCommandPoint())
    __swig_destroy__ = _WMX3ApiPython.delete_AdvMotion_PathIntplWithRotationCommandPoint

# Register AdvMotion_PathIntplWithRotationCommandPoint in _WMX3ApiPython:
_WMX3ApiPython.AdvMotion_PathIntplWithRotationCommandPoint_swigregister(AdvMotion_PathIntplWithRotationCommandPoint)
class AdvMotion_PathIntplWithRotationCommand(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def GetData(self, pPathIntplWithRotationCommand):
        return _WMX3ApiPython.AdvMotion_PathIntplWithRotationCommand_GetData(self, pPathIntplWithRotationCommand)
    numPoints = property(_WMX3ApiPython.AdvMotion_PathIntplWithRotationCommand_numPoints_get, _WMX3ApiPython.AdvMotion_PathIntplWithRotationCommand_numPoints_set)
    point = property(_WMX3ApiPython.AdvMotion_PathIntplWithRotationCommand_point_get, _WMX3ApiPython.AdvMotion_PathIntplWithRotationCommand_point_set)

    def SetPoint(self, index, value):
        return _WMX3ApiPython.AdvMotion_PathIntplWithRotationCommand_SetPoint(self, index, value)

    def GetPoint(self, index):
        return _WMX3ApiPython.AdvMotion_PathIntplWithRotationCommand_GetPoint(self, index)

    def __init__(self):
        _WMX3ApiPython.AdvMotion_PathIntplWithRotationCommand_swiginit(self, _WMX3ApiPython.new_AdvMotion_PathIntplWithRotationCommand())
    __swig_destroy__ = _WMX3ApiPython.delete_AdvMotion_PathIntplWithRotationCommand

# Register AdvMotion_PathIntplWithRotationCommand in _WMX3ApiPython:
_WMX3ApiPython.AdvMotion_PathIntplWithRotationCommand_swigregister(AdvMotion_PathIntplWithRotationCommand)
class AdvMotion_PathIntplWithRotationState(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Idle = _WMX3ApiPython.AdvMotion_PathIntplWithRotationState_Idle
    Executing = _WMX3ApiPython.AdvMotion_PathIntplWithRotationState_Executing

    def __init__(self):
        _WMX3ApiPython.AdvMotion_PathIntplWithRotationState_swiginit(self, _WMX3ApiPython.new_AdvMotion_PathIntplWithRotationState())
    __swig_destroy__ = _WMX3ApiPython.delete_AdvMotion_PathIntplWithRotationState

# Register AdvMotion_PathIntplWithRotationState in _WMX3ApiPython:
_WMX3ApiPython.AdvMotion_PathIntplWithRotationState_swigregister(AdvMotion_PathIntplWithRotationState)
class AdvMotion_PathIntplWithRotationStatus(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def GetData(self, pPathIntplWithRotationStatus):
        return _WMX3ApiPython.AdvMotion_PathIntplWithRotationStatus_GetData(self, pPathIntplWithRotationStatus)

    def SetData(self, pPathIntplWithRotationStatus):
        return _WMX3ApiPython.AdvMotion_PathIntplWithRotationStatus_SetData(self, pPathIntplWithRotationStatus)
    state = property(_WMX3ApiPython.AdvMotion_PathIntplWithRotationStatus_state_get, _WMX3ApiPython.AdvMotion_PathIntplWithRotationStatus_state_set)
    freeBuffer = property(_WMX3ApiPython.AdvMotion_PathIntplWithRotationStatus_freeBuffer_get, _WMX3ApiPython.AdvMotion_PathIntplWithRotationStatus_freeBuffer_set)
    executedBuffer = property(_WMX3ApiPython.AdvMotion_PathIntplWithRotationStatus_executedBuffer_get, _WMX3ApiPython.AdvMotion_PathIntplWithRotationStatus_executedBuffer_set)
    maxBuffer = property(_WMX3ApiPython.AdvMotion_PathIntplWithRotationStatus_maxBuffer_get, _WMX3ApiPython.AdvMotion_PathIntplWithRotationStatus_maxBuffer_set)
    totalBuffer = property(_WMX3ApiPython.AdvMotion_PathIntplWithRotationStatus_totalBuffer_get, _WMX3ApiPython.AdvMotion_PathIntplWithRotationStatus_totalBuffer_set)
    executedCommandCount = property(_WMX3ApiPython.AdvMotion_PathIntplWithRotationStatus_executedCommandCount_get, _WMX3ApiPython.AdvMotion_PathIntplWithRotationStatus_executedCommandCount_set)
    totalCommandCount = property(_WMX3ApiPython.AdvMotion_PathIntplWithRotationStatus_totalCommandCount_get, _WMX3ApiPython.AdvMotion_PathIntplWithRotationStatus_totalCommandCount_set)
    pos = property(_WMX3ApiPython.AdvMotion_PathIntplWithRotationStatus_pos_get, _WMX3ApiPython.AdvMotion_PathIntplWithRotationStatus_pos_set)
    totalDist = property(_WMX3ApiPython.AdvMotion_PathIntplWithRotationStatus_totalDist_get, _WMX3ApiPython.AdvMotion_PathIntplWithRotationStatus_totalDist_set)

    def __init__(self):
        _WMX3ApiPython.AdvMotion_PathIntplWithRotationStatus_swiginit(self, _WMX3ApiPython.new_AdvMotion_PathIntplWithRotationStatus())
    __swig_destroy__ = _WMX3ApiPython.delete_AdvMotion_PathIntplWithRotationStatus

# Register AdvMotion_PathIntplWithRotationStatus in _WMX3ApiPython:
_WMX3ApiPython.AdvMotion_PathIntplWithRotationStatus_swigregister(AdvMotion_PathIntplWithRotationStatus)
class AdvMotion_PathIntplLookaheadSegmentType(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Linear = _WMX3ApiPython.AdvMotion_PathIntplLookaheadSegmentType_Linear
    CenterAndLengthCircular = _WMX3ApiPython.AdvMotion_PathIntplLookaheadSegmentType_CenterAndLengthCircular
    CenterAndEndCircular = _WMX3ApiPython.AdvMotion_PathIntplLookaheadSegmentType_CenterAndEndCircular
    ThroughAndEndCircular = _WMX3ApiPython.AdvMotion_PathIntplLookaheadSegmentType_ThroughAndEndCircular
    LengthAndEndCircular = _WMX3ApiPython.AdvMotion_PathIntplLookaheadSegmentType_LengthAndEndCircular
    RadiusAndEndCircular = _WMX3ApiPython.AdvMotion_PathIntplLookaheadSegmentType_RadiusAndEndCircular
    ThroughAndEnd3DCircular = _WMX3ApiPython.AdvMotion_PathIntplLookaheadSegmentType_ThroughAndEnd3DCircular
    Sleep = _WMX3ApiPython.AdvMotion_PathIntplLookaheadSegmentType_Sleep
    SetOutputBit = _WMX3ApiPython.AdvMotion_PathIntplLookaheadSegmentType_SetOutputBit

    def __init__(self):
        _WMX3ApiPython.AdvMotion_PathIntplLookaheadSegmentType_swiginit(self, _WMX3ApiPython.new_AdvMotion_PathIntplLookaheadSegmentType())
    __swig_destroy__ = _WMX3ApiPython.delete_AdvMotion_PathIntplLookaheadSegmentType

# Register AdvMotion_PathIntplLookaheadSegmentType in _WMX3ApiPython:
_WMX3ApiPython.AdvMotion_PathIntplLookaheadSegmentType_swigregister(AdvMotion_PathIntplLookaheadSegmentType)
class AdvMotion_PathIntplLookaheadCoordinateType(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Absolute = _WMX3ApiPython.AdvMotion_PathIntplLookaheadCoordinateType_Absolute
    RelativeFromPreviousPoint = _WMX3ApiPython.AdvMotion_PathIntplLookaheadCoordinateType_RelativeFromPreviousPoint
    RelativeFromStart = _WMX3ApiPython.AdvMotion_PathIntplLookaheadCoordinateType_RelativeFromStart

    def __init__(self):
        _WMX3ApiPython.AdvMotion_PathIntplLookaheadCoordinateType_swiginit(self, _WMX3ApiPython.new_AdvMotion_PathIntplLookaheadCoordinateType())
    __swig_destroy__ = _WMX3ApiPython.delete_AdvMotion_PathIntplLookaheadCoordinateType

# Register AdvMotion_PathIntplLookaheadCoordinateType in _WMX3ApiPython:
_WMX3ApiPython.AdvMotion_PathIntplLookaheadCoordinateType_swigregister(AdvMotion_PathIntplLookaheadCoordinateType)
class AdvMotion_PathIntplLookaheadConfiguration(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def GetData(self, pPathIntplLookaheadConfiguration):
        return _WMX3ApiPython.AdvMotion_PathIntplLookaheadConfiguration_GetData(self, pPathIntplLookaheadConfiguration)
    axisCount = property(_WMX3ApiPython.AdvMotion_PathIntplLookaheadConfiguration_axisCount_get, _WMX3ApiPython.AdvMotion_PathIntplLookaheadConfiguration_axisCount_set)
    axis = property(_WMX3ApiPython.AdvMotion_PathIntplLookaheadConfiguration_axis_get, _WMX3ApiPython.AdvMotion_PathIntplLookaheadConfiguration_axis_set)

    def SetAxis(self, index, value):
        return _WMX3ApiPython.AdvMotion_PathIntplLookaheadConfiguration_SetAxis(self, index, value)

    def GetAxis(self, index):
        return _WMX3ApiPython.AdvMotion_PathIntplLookaheadConfiguration_GetAxis(self, index)
    velocityLimit = property(_WMX3ApiPython.AdvMotion_PathIntplLookaheadConfiguration_velocityLimit_get, _WMX3ApiPython.AdvMotion_PathIntplLookaheadConfiguration_velocityLimit_set)

    def SetVelocityLimit(self, index, value):
        return _WMX3ApiPython.AdvMotion_PathIntplLookaheadConfiguration_SetVelocityLimit(self, index, value)

    def GetVelocityLimit(self, index):
        return _WMX3ApiPython.AdvMotion_PathIntplLookaheadConfiguration_GetVelocityLimit(self, index)
    accLimit = property(_WMX3ApiPython.AdvMotion_PathIntplLookaheadConfiguration_accLimit_get, _WMX3ApiPython.AdvMotion_PathIntplLookaheadConfiguration_accLimit_set)

    def SetAccLimit(self, index, value):
        return _WMX3ApiPython.AdvMotion_PathIntplLookaheadConfiguration_SetAccLimit(self, index, value)

    def GetAccLimit(self, index):
        return _WMX3ApiPython.AdvMotion_PathIntplLookaheadConfiguration_GetAccLimit(self, index)
    compositeVel = property(_WMX3ApiPython.AdvMotion_PathIntplLookaheadConfiguration_compositeVel_get, _WMX3ApiPython.AdvMotion_PathIntplLookaheadConfiguration_compositeVel_set)
    compositeAcc = property(_WMX3ApiPython.AdvMotion_PathIntplLookaheadConfiguration_compositeAcc_get, _WMX3ApiPython.AdvMotion_PathIntplLookaheadConfiguration_compositeAcc_set)
    sampleDistance = property(_WMX3ApiPython.AdvMotion_PathIntplLookaheadConfiguration_sampleDistance_get, _WMX3ApiPython.AdvMotion_PathIntplLookaheadConfiguration_sampleDistance_set)
    setOverrideTime = property(_WMX3ApiPython.AdvMotion_PathIntplLookaheadConfiguration_setOverrideTime_get, _WMX3ApiPython.AdvMotion_PathIntplLookaheadConfiguration_setOverrideTime_set)
    overrideTimePointsPerMillisecond = property(_WMX3ApiPython.AdvMotion_PathIntplLookaheadConfiguration_overrideTimePointsPerMillisecond_get, _WMX3ApiPython.AdvMotion_PathIntplLookaheadConfiguration_overrideTimePointsPerMillisecond_set)
    setAngleTolerance = property(_WMX3ApiPython.AdvMotion_PathIntplLookaheadConfiguration_setAngleTolerance_get, _WMX3ApiPython.AdvMotion_PathIntplLookaheadConfiguration_setAngleTolerance_set)
    angleToleranceDegrees = property(_WMX3ApiPython.AdvMotion_PathIntplLookaheadConfiguration_angleToleranceDegrees_get, _WMX3ApiPython.AdvMotion_PathIntplLookaheadConfiguration_angleToleranceDegrees_set)
    coordinateType = property(_WMX3ApiPython.AdvMotion_PathIntplLookaheadConfiguration_coordinateType_get, _WMX3ApiPython.AdvMotion_PathIntplLookaheadConfiguration_coordinateType_set)
    stopOnEmptyBuffer = property(_WMX3ApiPython.AdvMotion_PathIntplLookaheadConfiguration_stopOnEmptyBuffer_get, _WMX3ApiPython.AdvMotion_PathIntplLookaheadConfiguration_stopOnEmptyBuffer_set)
    setSmoothingTime = property(_WMX3ApiPython.AdvMotion_PathIntplLookaheadConfiguration_setSmoothingTime_get, _WMX3ApiPython.AdvMotion_PathIntplLookaheadConfiguration_setSmoothingTime_set)
    smoothingTimeMilliseconds = property(_WMX3ApiPython.AdvMotion_PathIntplLookaheadConfiguration_smoothingTimeMilliseconds_get, _WMX3ApiPython.AdvMotion_PathIntplLookaheadConfiguration_smoothingTimeMilliseconds_set)

    def __init__(self):
        _WMX3ApiPython.AdvMotion_PathIntplLookaheadConfiguration_swiginit(self, _WMX3ApiPython.new_AdvMotion_PathIntplLookaheadConfiguration())
    __swig_destroy__ = _WMX3ApiPython.delete_AdvMotion_PathIntplLookaheadConfiguration

# Register AdvMotion_PathIntplLookaheadConfiguration in _WMX3ApiPython:
_WMX3ApiPython.AdvMotion_PathIntplLookaheadConfiguration_swigregister(AdvMotion_PathIntplLookaheadConfiguration)
class AdvMotion_PathIntplLookaheadCommandPoint_Data_linear(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    axisCount = property(_WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_linear_axisCount_get, _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_linear_axisCount_set)
    axis = property(_WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_linear_axis_get, _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_linear_axis_set)

    def SetAxis(self, index, value):
        return _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_linear_SetAxis(self, index, value)

    def GetAxis(self, index):
        return _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_linear_GetAxis(self, index)
    target = property(_WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_linear_target_get, _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_linear_target_set)

    def SetTarget(self, index, value):
        return _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_linear_SetTarget(self, index, value)

    def GetTarget(self, index):
        return _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_linear_GetTarget(self, index)
    smoothRadius = property(_WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_linear_smoothRadius_get, _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_linear_smoothRadius_set)
    setSegmentCompositeVel = property(_WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_linear_setSegmentCompositeVel_get, _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_linear_setSegmentCompositeVel_set)
    segmentCompositeVel = property(_WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_linear_segmentCompositeVel_get, _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_linear_segmentCompositeVel_set)
    auxiliaryAxisCount = property(_WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_linear_auxiliaryAxisCount_get, _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_linear_auxiliaryAxisCount_set)
    auxiliaryAxis = property(_WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_linear_auxiliaryAxis_get, _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_linear_auxiliaryAxis_set)

    def SetAuxiliaryAxis(self, index, value):
        return _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_linear_SetAuxiliaryAxis(self, index, value)

    def GetAuxiliaryAxis(self, index):
        return _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_linear_GetAuxiliaryAxis(self, index)
    auxiliaryTarget = property(_WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_linear_auxiliaryTarget_get, _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_linear_auxiliaryTarget_set)

    def SetAuxiliaryTarget(self, index, value):
        return _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_linear_SetAuxiliaryTarget(self, index, value)

    def GetAuxiliaryTarget(self, index):
        return _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_linear_GetAuxiliaryTarget(self, index)

    def __init__(self):
        _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_linear_swiginit(self, _WMX3ApiPython.new_AdvMotion_PathIntplLookaheadCommandPoint_Data_linear())
    __swig_destroy__ = _WMX3ApiPython.delete_AdvMotion_PathIntplLookaheadCommandPoint_Data_linear

# Register AdvMotion_PathIntplLookaheadCommandPoint_Data_linear in _WMX3ApiPython:
_WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_linear_swigregister(AdvMotion_PathIntplLookaheadCommandPoint_Data_linear)
class AdvMotion_PathIntplLookaheadCommandPoint_Data_centerAndLengthCircular(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    axis = property(_WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_centerAndLengthCircular_axis_get, _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_centerAndLengthCircular_axis_set)

    def SetAxis(self, index, value):
        return _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_centerAndLengthCircular_SetAxis(self, index, value)

    def GetAxis(self, index):
        return _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_centerAndLengthCircular_GetAxis(self, index)
    centerPos = property(_WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_centerAndLengthCircular_centerPos_get, _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_centerAndLengthCircular_centerPos_set)

    def SetCenterPos(self, index, value):
        return _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_centerAndLengthCircular_SetCenterPos(self, index, value)

    def GetCenterPos(self, index):
        return _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_centerAndLengthCircular_GetCenterPos(self, index)
    arcLengthDegree = property(_WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_centerAndLengthCircular_arcLengthDegree_get, _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_centerAndLengthCircular_arcLengthDegree_set)
    clockwise = property(_WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_centerAndLengthCircular_clockwise_get, _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_centerAndLengthCircular_clockwise_set)
    setSegmentCompositeVel = property(_WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_centerAndLengthCircular_setSegmentCompositeVel_get, _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_centerAndLengthCircular_setSegmentCompositeVel_set)
    segmentCompositeVel = property(_WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_centerAndLengthCircular_segmentCompositeVel_get, _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_centerAndLengthCircular_segmentCompositeVel_set)
    auxiliaryAxisCount = property(_WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_centerAndLengthCircular_auxiliaryAxisCount_get, _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_centerAndLengthCircular_auxiliaryAxisCount_set)
    auxiliaryAxis = property(_WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_centerAndLengthCircular_auxiliaryAxis_get, _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_centerAndLengthCircular_auxiliaryAxis_set)

    def SetAuxiliaryAxis(self, index, value):
        return _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_centerAndLengthCircular_SetAuxiliaryAxis(self, index, value)

    def GetAuxiliaryAxis(self, index):
        return _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_centerAndLengthCircular_GetAuxiliaryAxis(self, index)
    auxiliaryTarget = property(_WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_centerAndLengthCircular_auxiliaryTarget_get, _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_centerAndLengthCircular_auxiliaryTarget_set)

    def SetAuxiliaryTarget(self, index, value):
        return _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_centerAndLengthCircular_SetAuxiliaryTarget(self, index, value)

    def GetAuxiliaryTarget(self, index):
        return _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_centerAndLengthCircular_GetAuxiliaryTarget(self, index)

    def __init__(self):
        _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_centerAndLengthCircular_swiginit(self, _WMX3ApiPython.new_AdvMotion_PathIntplLookaheadCommandPoint_Data_centerAndLengthCircular())
    __swig_destroy__ = _WMX3ApiPython.delete_AdvMotion_PathIntplLookaheadCommandPoint_Data_centerAndLengthCircular

# Register AdvMotion_PathIntplLookaheadCommandPoint_Data_centerAndLengthCircular in _WMX3ApiPython:
_WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_centerAndLengthCircular_swigregister(AdvMotion_PathIntplLookaheadCommandPoint_Data_centerAndLengthCircular)
class AdvMotion_PathIntplLookaheadCommandPoint_Data_centerAndEndCircular(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    axis = property(_WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_centerAndEndCircular_axis_get, _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_centerAndEndCircular_axis_set)

    def SetAxis(self, index, value):
        return _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_centerAndEndCircular_SetAxis(self, index, value)

    def GetAxis(self, index):
        return _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_centerAndEndCircular_GetAxis(self, index)
    centerPos = property(_WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_centerAndEndCircular_centerPos_get, _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_centerAndEndCircular_centerPos_set)

    def SetCenterPos(self, index, value):
        return _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_centerAndEndCircular_SetCenterPos(self, index, value)

    def GetCenterPos(self, index):
        return _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_centerAndEndCircular_GetCenterPos(self, index)
    endPos = property(_WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_centerAndEndCircular_endPos_get, _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_centerAndEndCircular_endPos_set)

    def SetEndPos(self, index, value):
        return _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_centerAndEndCircular_SetEndPos(self, index, value)

    def GetEndPos(self, index):
        return _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_centerAndEndCircular_GetEndPos(self, index)
    clockwise = property(_WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_centerAndEndCircular_clockwise_get, _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_centerAndEndCircular_clockwise_set)
    setSegmentCompositeVel = property(_WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_centerAndEndCircular_setSegmentCompositeVel_get, _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_centerAndEndCircular_setSegmentCompositeVel_set)
    segmentCompositeVel = property(_WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_centerAndEndCircular_segmentCompositeVel_get, _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_centerAndEndCircular_segmentCompositeVel_set)
    auxiliaryAxisCount = property(_WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_centerAndEndCircular_auxiliaryAxisCount_get, _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_centerAndEndCircular_auxiliaryAxisCount_set)
    auxiliaryAxis = property(_WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_centerAndEndCircular_auxiliaryAxis_get, _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_centerAndEndCircular_auxiliaryAxis_set)

    def SetAuxiliaryAxis(self, index, value):
        return _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_centerAndEndCircular_SetAuxiliaryAxis(self, index, value)

    def GetAuxiliaryAxis(self, index):
        return _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_centerAndEndCircular_GetAuxiliaryAxis(self, index)
    auxiliaryTarget = property(_WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_centerAndEndCircular_auxiliaryTarget_get, _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_centerAndEndCircular_auxiliaryTarget_set)

    def SetAuxiliaryTarget(self, index, value):
        return _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_centerAndEndCircular_SetAuxiliaryTarget(self, index, value)

    def GetAuxiliaryTarget(self, index):
        return _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_centerAndEndCircular_GetAuxiliaryTarget(self, index)

    def __init__(self):
        _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_centerAndEndCircular_swiginit(self, _WMX3ApiPython.new_AdvMotion_PathIntplLookaheadCommandPoint_Data_centerAndEndCircular())
    __swig_destroy__ = _WMX3ApiPython.delete_AdvMotion_PathIntplLookaheadCommandPoint_Data_centerAndEndCircular

# Register AdvMotion_PathIntplLookaheadCommandPoint_Data_centerAndEndCircular in _WMX3ApiPython:
_WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_centerAndEndCircular_swigregister(AdvMotion_PathIntplLookaheadCommandPoint_Data_centerAndEndCircular)
class AdvMotion_PathIntplLookaheadCommandPoint_Data_throughAndEndCircular(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    axis = property(_WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_throughAndEndCircular_axis_get, _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_throughAndEndCircular_axis_set)

    def SetAxis(self, index, value):
        return _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_throughAndEndCircular_SetAxis(self, index, value)

    def GetAxis(self, index):
        return _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_throughAndEndCircular_GetAxis(self, index)
    throughPos = property(_WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_throughAndEndCircular_throughPos_get, _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_throughAndEndCircular_throughPos_set)

    def SetThroughPos(self, index, value):
        return _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_throughAndEndCircular_SetThroughPos(self, index, value)

    def GetThroughPos(self, index):
        return _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_throughAndEndCircular_GetThroughPos(self, index)
    endPos = property(_WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_throughAndEndCircular_endPos_get, _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_throughAndEndCircular_endPos_set)

    def SetEndPos(self, index, value):
        return _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_throughAndEndCircular_SetEndPos(self, index, value)

    def GetEndPos(self, index):
        return _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_throughAndEndCircular_GetEndPos(self, index)
    setSegmentCompositeVel = property(_WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_throughAndEndCircular_setSegmentCompositeVel_get, _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_throughAndEndCircular_setSegmentCompositeVel_set)
    segmentCompositeVel = property(_WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_throughAndEndCircular_segmentCompositeVel_get, _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_throughAndEndCircular_segmentCompositeVel_set)
    auxiliaryAxisCount = property(_WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_throughAndEndCircular_auxiliaryAxisCount_get, _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_throughAndEndCircular_auxiliaryAxisCount_set)
    auxiliaryAxis = property(_WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_throughAndEndCircular_auxiliaryAxis_get, _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_throughAndEndCircular_auxiliaryAxis_set)

    def SetAuxiliaryAxis(self, index, value):
        return _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_throughAndEndCircular_SetAuxiliaryAxis(self, index, value)

    def GetAuxiliaryAxis(self, index):
        return _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_throughAndEndCircular_GetAuxiliaryAxis(self, index)
    auxiliaryTarget = property(_WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_throughAndEndCircular_auxiliaryTarget_get, _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_throughAndEndCircular_auxiliaryTarget_set)

    def SetAuxiliaryTarget(self, index, value):
        return _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_throughAndEndCircular_SetAuxiliaryTarget(self, index, value)

    def GetAuxiliaryTarget(self, index):
        return _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_throughAndEndCircular_GetAuxiliaryTarget(self, index)

    def __init__(self):
        _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_throughAndEndCircular_swiginit(self, _WMX3ApiPython.new_AdvMotion_PathIntplLookaheadCommandPoint_Data_throughAndEndCircular())
    __swig_destroy__ = _WMX3ApiPython.delete_AdvMotion_PathIntplLookaheadCommandPoint_Data_throughAndEndCircular

# Register AdvMotion_PathIntplLookaheadCommandPoint_Data_throughAndEndCircular in _WMX3ApiPython:
_WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_throughAndEndCircular_swigregister(AdvMotion_PathIntplLookaheadCommandPoint_Data_throughAndEndCircular)
class AdvMotion_PathIntplLookaheadCommandPoint_Data_lengthAndEndCircular(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    axis = property(_WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_lengthAndEndCircular_axis_get, _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_lengthAndEndCircular_axis_set)

    def SetAxis(self, index, value):
        return _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_lengthAndEndCircular_SetAxis(self, index, value)

    def GetAxis(self, index):
        return _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_lengthAndEndCircular_GetAxis(self, index)
    endPos = property(_WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_lengthAndEndCircular_endPos_get, _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_lengthAndEndCircular_endPos_set)

    def SetEndPos(self, index, value):
        return _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_lengthAndEndCircular_SetEndPos(self, index, value)

    def GetEndPos(self, index):
        return _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_lengthAndEndCircular_GetEndPos(self, index)
    arcLengthDegree = property(_WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_lengthAndEndCircular_arcLengthDegree_get, _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_lengthAndEndCircular_arcLengthDegree_set)
    clockwise = property(_WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_lengthAndEndCircular_clockwise_get, _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_lengthAndEndCircular_clockwise_set)
    setSegmentCompositeVel = property(_WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_lengthAndEndCircular_setSegmentCompositeVel_get, _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_lengthAndEndCircular_setSegmentCompositeVel_set)
    segmentCompositeVel = property(_WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_lengthAndEndCircular_segmentCompositeVel_get, _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_lengthAndEndCircular_segmentCompositeVel_set)
    auxiliaryAxisCount = property(_WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_lengthAndEndCircular_auxiliaryAxisCount_get, _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_lengthAndEndCircular_auxiliaryAxisCount_set)
    auxiliaryAxis = property(_WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_lengthAndEndCircular_auxiliaryAxis_get, _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_lengthAndEndCircular_auxiliaryAxis_set)

    def SetAuxiliaryAxis(self, index, value):
        return _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_lengthAndEndCircular_SetAuxiliaryAxis(self, index, value)

    def GetAuxiliaryAxis(self, index):
        return _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_lengthAndEndCircular_GetAuxiliaryAxis(self, index)
    auxiliaryTarget = property(_WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_lengthAndEndCircular_auxiliaryTarget_get, _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_lengthAndEndCircular_auxiliaryTarget_set)

    def SetAuxiliaryTarget(self, index, value):
        return _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_lengthAndEndCircular_SetAuxiliaryTarget(self, index, value)

    def GetAuxiliaryTarget(self, index):
        return _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_lengthAndEndCircular_GetAuxiliaryTarget(self, index)

    def __init__(self):
        _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_lengthAndEndCircular_swiginit(self, _WMX3ApiPython.new_AdvMotion_PathIntplLookaheadCommandPoint_Data_lengthAndEndCircular())
    __swig_destroy__ = _WMX3ApiPython.delete_AdvMotion_PathIntplLookaheadCommandPoint_Data_lengthAndEndCircular

# Register AdvMotion_PathIntplLookaheadCommandPoint_Data_lengthAndEndCircular in _WMX3ApiPython:
_WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_lengthAndEndCircular_swigregister(AdvMotion_PathIntplLookaheadCommandPoint_Data_lengthAndEndCircular)
class AdvMotion_PathIntplLookaheadCommandPoint_Data_radiusAndEndCircular(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    axis = property(_WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_radiusAndEndCircular_axis_get, _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_radiusAndEndCircular_axis_set)

    def SetAxis(self, index, value):
        return _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_radiusAndEndCircular_SetAxis(self, index, value)

    def GetAxis(self, index):
        return _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_radiusAndEndCircular_GetAxis(self, index)
    endPos = property(_WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_radiusAndEndCircular_endPos_get, _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_radiusAndEndCircular_endPos_set)

    def SetEndPos(self, index, value):
        return _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_radiusAndEndCircular_SetEndPos(self, index, value)

    def GetEndPos(self, index):
        return _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_radiusAndEndCircular_GetEndPos(self, index)
    radius = property(_WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_radiusAndEndCircular_radius_get, _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_radiusAndEndCircular_radius_set)
    clockwise = property(_WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_radiusAndEndCircular_clockwise_get, _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_radiusAndEndCircular_clockwise_set)
    setSegmentCompositeVel = property(_WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_radiusAndEndCircular_setSegmentCompositeVel_get, _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_radiusAndEndCircular_setSegmentCompositeVel_set)
    segmentCompositeVel = property(_WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_radiusAndEndCircular_segmentCompositeVel_get, _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_radiusAndEndCircular_segmentCompositeVel_set)
    auxiliaryAxisCount = property(_WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_radiusAndEndCircular_auxiliaryAxisCount_get, _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_radiusAndEndCircular_auxiliaryAxisCount_set)
    auxiliaryAxis = property(_WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_radiusAndEndCircular_auxiliaryAxis_get, _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_radiusAndEndCircular_auxiliaryAxis_set)

    def SetAuxiliaryAxis(self, index, value):
        return _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_radiusAndEndCircular_SetAuxiliaryAxis(self, index, value)

    def GetAuxiliaryAxis(self, index):
        return _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_radiusAndEndCircular_GetAuxiliaryAxis(self, index)
    auxiliaryTarget = property(_WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_radiusAndEndCircular_auxiliaryTarget_get, _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_radiusAndEndCircular_auxiliaryTarget_set)

    def SetAuxiliaryTarget(self, index, value):
        return _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_radiusAndEndCircular_SetAuxiliaryTarget(self, index, value)

    def GetAuxiliaryTarget(self, index):
        return _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_radiusAndEndCircular_GetAuxiliaryTarget(self, index)

    def __init__(self):
        _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_radiusAndEndCircular_swiginit(self, _WMX3ApiPython.new_AdvMotion_PathIntplLookaheadCommandPoint_Data_radiusAndEndCircular())
    __swig_destroy__ = _WMX3ApiPython.delete_AdvMotion_PathIntplLookaheadCommandPoint_Data_radiusAndEndCircular

# Register AdvMotion_PathIntplLookaheadCommandPoint_Data_radiusAndEndCircular in _WMX3ApiPython:
_WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_radiusAndEndCircular_swigregister(AdvMotion_PathIntplLookaheadCommandPoint_Data_radiusAndEndCircular)
class AdvMotion_PathIntplLookaheadCommandPoint_Data_throughAndEnd3DCircular(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    axis = property(_WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_throughAndEnd3DCircular_axis_get, _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_throughAndEnd3DCircular_axis_set)

    def SetAxis(self, index, value):
        return _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_throughAndEnd3DCircular_SetAxis(self, index, value)

    def GetAxis(self, index):
        return _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_throughAndEnd3DCircular_GetAxis(self, index)
    throughPos = property(_WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_throughAndEnd3DCircular_throughPos_get, _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_throughAndEnd3DCircular_throughPos_set)

    def SetThroughPos(self, index, value):
        return _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_throughAndEnd3DCircular_SetThroughPos(self, index, value)

    def GetThroughPos(self, index):
        return _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_throughAndEnd3DCircular_GetThroughPos(self, index)
    endPos = property(_WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_throughAndEnd3DCircular_endPos_get, _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_throughAndEnd3DCircular_endPos_set)

    def SetEndPos(self, index, value):
        return _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_throughAndEnd3DCircular_SetEndPos(self, index, value)

    def GetEndPos(self, index):
        return _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_throughAndEnd3DCircular_GetEndPos(self, index)
    setSegmentCompositeVel = property(_WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_throughAndEnd3DCircular_setSegmentCompositeVel_get, _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_throughAndEnd3DCircular_setSegmentCompositeVel_set)
    segmentCompositeVel = property(_WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_throughAndEnd3DCircular_segmentCompositeVel_get, _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_throughAndEnd3DCircular_segmentCompositeVel_set)
    auxiliaryAxisCount = property(_WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_throughAndEnd3DCircular_auxiliaryAxisCount_get, _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_throughAndEnd3DCircular_auxiliaryAxisCount_set)
    auxiliaryAxis = property(_WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_throughAndEnd3DCircular_auxiliaryAxis_get, _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_throughAndEnd3DCircular_auxiliaryAxis_set)

    def SetAuxiliaryAxis(self, index, value):
        return _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_throughAndEnd3DCircular_SetAuxiliaryAxis(self, index, value)

    def GetAuxiliaryAxis(self, index):
        return _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_throughAndEnd3DCircular_GetAuxiliaryAxis(self, index)
    auxiliaryTarget = property(_WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_throughAndEnd3DCircular_auxiliaryTarget_get, _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_throughAndEnd3DCircular_auxiliaryTarget_set)

    def SetAuxiliaryTarget(self, index, value):
        return _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_throughAndEnd3DCircular_SetAuxiliaryTarget(self, index, value)

    def GetAuxiliaryTarget(self, index):
        return _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_throughAndEnd3DCircular_GetAuxiliaryTarget(self, index)

    def __init__(self):
        _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_throughAndEnd3DCircular_swiginit(self, _WMX3ApiPython.new_AdvMotion_PathIntplLookaheadCommandPoint_Data_throughAndEnd3DCircular())
    __swig_destroy__ = _WMX3ApiPython.delete_AdvMotion_PathIntplLookaheadCommandPoint_Data_throughAndEnd3DCircular

# Register AdvMotion_PathIntplLookaheadCommandPoint_Data_throughAndEnd3DCircular in _WMX3ApiPython:
_WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_throughAndEnd3DCircular_swigregister(AdvMotion_PathIntplLookaheadCommandPoint_Data_throughAndEnd3DCircular)
class AdvMotion_PathIntplLookaheadCommandPoint_Data_sleep(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    milliseconds = property(_WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_sleep_milliseconds_get, _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_sleep_milliseconds_set)

    def __init__(self):
        _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_sleep_swiginit(self, _WMX3ApiPython.new_AdvMotion_PathIntplLookaheadCommandPoint_Data_sleep())
    __swig_destroy__ = _WMX3ApiPython.delete_AdvMotion_PathIntplLookaheadCommandPoint_Data_sleep

# Register AdvMotion_PathIntplLookaheadCommandPoint_Data_sleep in _WMX3ApiPython:
_WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_sleep_swigregister(AdvMotion_PathIntplLookaheadCommandPoint_Data_sleep)
class AdvMotion_PathIntplLookaheadCommandPoint_Data_setOutputBit(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    type = property(_WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_setOutputBit_type_get, _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_setOutputBit_type_set)
    triggerValue = property(_WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_setOutputBit_triggerValue_get, _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_setOutputBit_triggerValue_set)
    source = property(_WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_setOutputBit_source_get, _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_setOutputBit_source_set)
    byteAddress = property(_WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_setOutputBit_byteAddress_get, _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_setOutputBit_byteAddress_set)
    bitAddress = property(_WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_setOutputBit_bitAddress_get, _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_setOutputBit_bitAddress_set)
    value = property(_WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_setOutputBit_value_get, _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_setOutputBit_value_set)

    def __init__(self):
        _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_setOutputBit_swiginit(self, _WMX3ApiPython.new_AdvMotion_PathIntplLookaheadCommandPoint_Data_setOutputBit())
    __swig_destroy__ = _WMX3ApiPython.delete_AdvMotion_PathIntplLookaheadCommandPoint_Data_setOutputBit

# Register AdvMotion_PathIntplLookaheadCommandPoint_Data_setOutputBit in _WMX3ApiPython:
_WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_Data_setOutputBit_swigregister(AdvMotion_PathIntplLookaheadCommandPoint_Data_setOutputBit)
class AdvMotion_PathIntplLookaheadCommandPoint(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    type = property(_WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_type_get, _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_type_set)

    def GetData(self, pPathIntplLookaheadCommandPoint):
        return _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_GetData(self, pPathIntplLookaheadCommandPoint)
    linear = property(_WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_linear_get, _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_linear_set)
    centerAndLengthCircular = property(_WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_centerAndLengthCircular_get, _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_centerAndLengthCircular_set)
    centerAndEndCircular = property(_WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_centerAndEndCircular_get, _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_centerAndEndCircular_set)
    throughAndEndCircular = property(_WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_throughAndEndCircular_get, _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_throughAndEndCircular_set)
    lengthAndEndCircular = property(_WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_lengthAndEndCircular_get, _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_lengthAndEndCircular_set)
    radiusAndEndCircular = property(_WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_radiusAndEndCircular_get, _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_radiusAndEndCircular_set)
    throughAndEnd3DCircular = property(_WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_throughAndEnd3DCircular_get, _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_throughAndEnd3DCircular_set)
    sleep = property(_WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_sleep_get, _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_sleep_set)
    setOutputBit = property(_WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_setOutputBit_get, _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_setOutputBit_set)

    def __init__(self):
        _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_swiginit(self, _WMX3ApiPython.new_AdvMotion_PathIntplLookaheadCommandPoint())
    __swig_destroy__ = _WMX3ApiPython.delete_AdvMotion_PathIntplLookaheadCommandPoint

# Register AdvMotion_PathIntplLookaheadCommandPoint in _WMX3ApiPython:
_WMX3ApiPython.AdvMotion_PathIntplLookaheadCommandPoint_swigregister(AdvMotion_PathIntplLookaheadCommandPoint)
class AdvMotion_PathIntplLookaheadCommand(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def GetData(self, pPathIntplLookaheadCommand):
        return _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommand_GetData(self, pPathIntplLookaheadCommand)
    numPoints = property(_WMX3ApiPython.AdvMotion_PathIntplLookaheadCommand_numPoints_get, _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommand_numPoints_set)
    point = property(_WMX3ApiPython.AdvMotion_PathIntplLookaheadCommand_point_get, _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommand_point_set)

    def SetPoint(self, index, value):
        return _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommand_SetPoint(self, index, value)

    def GetPoint(self, index):
        return _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommand_GetPoint(self, index)

    def __init__(self):
        _WMX3ApiPython.AdvMotion_PathIntplLookaheadCommand_swiginit(self, _WMX3ApiPython.new_AdvMotion_PathIntplLookaheadCommand())
    __swig_destroy__ = _WMX3ApiPython.delete_AdvMotion_PathIntplLookaheadCommand

# Register AdvMotion_PathIntplLookaheadCommand in _WMX3ApiPython:
_WMX3ApiPython.AdvMotion_PathIntplLookaheadCommand_swigregister(AdvMotion_PathIntplLookaheadCommand)
class AdvMotion_PathIntplLookaheadState(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Idle = _WMX3ApiPython.AdvMotion_PathIntplLookaheadState_Idle
    Executing = _WMX3ApiPython.AdvMotion_PathIntplLookaheadState_Executing
    Stopping = _WMX3ApiPython.AdvMotion_PathIntplLookaheadState_Stopping
    Stopped = _WMX3ApiPython.AdvMotion_PathIntplLookaheadState_Stopped

    def __init__(self):
        _WMX3ApiPython.AdvMotion_PathIntplLookaheadState_swiginit(self, _WMX3ApiPython.new_AdvMotion_PathIntplLookaheadState())
    __swig_destroy__ = _WMX3ApiPython.delete_AdvMotion_PathIntplLookaheadState

# Register AdvMotion_PathIntplLookaheadState in _WMX3ApiPython:
_WMX3ApiPython.AdvMotion_PathIntplLookaheadState_swigregister(AdvMotion_PathIntplLookaheadState)
class AdvMotion_PathIntplLookaheadStatus(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def GetData(self, pPathIntplLookaheadStatus):
        return _WMX3ApiPython.AdvMotion_PathIntplLookaheadStatus_GetData(self, pPathIntplLookaheadStatus)

    def SetData(self, pPathIntplLookaheadStatus):
        return _WMX3ApiPython.AdvMotion_PathIntplLookaheadStatus_SetData(self, pPathIntplLookaheadStatus)
    state = property(_WMX3ApiPython.AdvMotion_PathIntplLookaheadStatus_state_get, _WMX3ApiPython.AdvMotion_PathIntplLookaheadStatus_state_set)
    remainBuffer = property(_WMX3ApiPython.AdvMotion_PathIntplLookaheadStatus_remainBuffer_get, _WMX3ApiPython.AdvMotion_PathIntplLookaheadStatus_remainBuffer_set)
    freeBuffer = property(_WMX3ApiPython.AdvMotion_PathIntplLookaheadStatus_freeBuffer_get, _WMX3ApiPython.AdvMotion_PathIntplLookaheadStatus_freeBuffer_set)
    executedBuffer = property(_WMX3ApiPython.AdvMotion_PathIntplLookaheadStatus_executedBuffer_get, _WMX3ApiPython.AdvMotion_PathIntplLookaheadStatus_executedBuffer_set)
    maxBuffer = property(_WMX3ApiPython.AdvMotion_PathIntplLookaheadStatus_maxBuffer_get, _WMX3ApiPython.AdvMotion_PathIntplLookaheadStatus_maxBuffer_set)
    remainCommandCount = property(_WMX3ApiPython.AdvMotion_PathIntplLookaheadStatus_remainCommandCount_get, _WMX3ApiPython.AdvMotion_PathIntplLookaheadStatus_remainCommandCount_set)
    executedCommandCount = property(_WMX3ApiPython.AdvMotion_PathIntplLookaheadStatus_executedCommandCount_get, _WMX3ApiPython.AdvMotion_PathIntplLookaheadStatus_executedCommandCount_set)
    totalCommandCount = property(_WMX3ApiPython.AdvMotion_PathIntplLookaheadStatus_totalCommandCount_get, _WMX3ApiPython.AdvMotion_PathIntplLookaheadStatus_totalCommandCount_set)
    lastOverrideTimeMilliseconds = property(_WMX3ApiPython.AdvMotion_PathIntplLookaheadStatus_lastOverrideTimeMilliseconds_get, _WMX3ApiPython.AdvMotion_PathIntplLookaheadStatus_lastOverrideTimeMilliseconds_set)
    lastOverridePointsPerMillisecond = property(_WMX3ApiPython.AdvMotion_PathIntplLookaheadStatus_lastOverridePointsPerMillisecond_get, _WMX3ApiPython.AdvMotion_PathIntplLookaheadStatus_lastOverridePointsPerMillisecond_set)

    def __init__(self):
        _WMX3ApiPython.AdvMotion_PathIntplLookaheadStatus_swiginit(self, _WMX3ApiPython.new_AdvMotion_PathIntplLookaheadStatus())
    __swig_destroy__ = _WMX3ApiPython.delete_AdvMotion_PathIntplLookaheadStatus

# Register AdvMotion_PathIntplLookaheadStatus in _WMX3ApiPython:
_WMX3ApiPython.AdvMotion_PathIntplLookaheadStatus_swigregister(AdvMotion_PathIntplLookaheadStatus)
class AdvMotion_PosCommand(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def GetData(self, pPosCommand):
        return _WMX3ApiPython.AdvMotion_PosCommand_GetData(self, pPosCommand)
    axis = property(_WMX3ApiPython.AdvMotion_PosCommand_axis_get, _WMX3ApiPython.AdvMotion_PosCommand_axis_set)
    target = property(_WMX3ApiPython.AdvMotion_PosCommand_target_get, _WMX3ApiPython.AdvMotion_PosCommand_target_set)
    profile = property(_WMX3ApiPython.AdvMotion_PosCommand_profile_get, _WMX3ApiPython.AdvMotion_PosCommand_profile_set)

    def __init__(self):
        _WMX3ApiPython.AdvMotion_PosCommand_swiginit(self, _WMX3ApiPython.new_AdvMotion_PosCommand())
    __swig_destroy__ = _WMX3ApiPython.delete_AdvMotion_PosCommand

# Register AdvMotion_PosCommand in _WMX3ApiPython:
_WMX3ApiPython.AdvMotion_PosCommand_swigregister(AdvMotion_PosCommand)
class AdvMotion_CoordinatedPosCommand(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def GetData(self, pCoordinatedPosCommand):
        return _WMX3ApiPython.AdvMotion_CoordinatedPosCommand_GetData(self, pCoordinatedPosCommand)
    posCommand = property(_WMX3ApiPython.AdvMotion_CoordinatedPosCommand_posCommand_get, _WMX3ApiPython.AdvMotion_CoordinatedPosCommand_posCommand_set)
    axis2 = property(_WMX3ApiPython.AdvMotion_CoordinatedPosCommand_axis2_get, _WMX3ApiPython.AdvMotion_CoordinatedPosCommand_axis2_set)
    axis2Target = property(_WMX3ApiPython.AdvMotion_CoordinatedPosCommand_axis2Target_get, _WMX3ApiPython.AdvMotion_CoordinatedPosCommand_axis2Target_set)
    axis2SmoothRatio = property(_WMX3ApiPython.AdvMotion_CoordinatedPosCommand_axis2SmoothRatio_get, _WMX3ApiPython.AdvMotion_CoordinatedPosCommand_axis2SmoothRatio_set)

    def __init__(self):
        _WMX3ApiPython.AdvMotion_CoordinatedPosCommand_swiginit(self, _WMX3ApiPython.new_AdvMotion_CoordinatedPosCommand())
    __swig_destroy__ = _WMX3ApiPython.delete_AdvMotion_CoordinatedPosCommand

# Register AdvMotion_CoordinatedPosCommand in _WMX3ApiPython:
_WMX3ApiPython.AdvMotion_CoordinatedPosCommand_swigregister(AdvMotion_CoordinatedPosCommand)
class AdvMotion_CoordinatedJerkRatioPosCommand(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def GetData(self, pCoordinatedJerkRatioPosCommand):
        return _WMX3ApiPython.AdvMotion_CoordinatedJerkRatioPosCommand_GetData(self, pCoordinatedJerkRatioPosCommand)
    posCommand = property(_WMX3ApiPython.AdvMotion_CoordinatedJerkRatioPosCommand_posCommand_get, _WMX3ApiPython.AdvMotion_CoordinatedJerkRatioPosCommand_posCommand_set)
    followerAxisCount = property(_WMX3ApiPython.AdvMotion_CoordinatedJerkRatioPosCommand_followerAxisCount_get, _WMX3ApiPython.AdvMotion_CoordinatedJerkRatioPosCommand_followerAxisCount_set)
    followerAxis = property(_WMX3ApiPython.AdvMotion_CoordinatedJerkRatioPosCommand_followerAxis_get, _WMX3ApiPython.AdvMotion_CoordinatedJerkRatioPosCommand_followerAxis_set)

    def SetFollowerAxis(self, index, value):
        return _WMX3ApiPython.AdvMotion_CoordinatedJerkRatioPosCommand_SetFollowerAxis(self, index, value)

    def GetFollowerAxis(self, index):
        return _WMX3ApiPython.AdvMotion_CoordinatedJerkRatioPosCommand_GetFollowerAxis(self, index)
    followerAxisTarget = property(_WMX3ApiPython.AdvMotion_CoordinatedJerkRatioPosCommand_followerAxisTarget_get, _WMX3ApiPython.AdvMotion_CoordinatedJerkRatioPosCommand_followerAxisTarget_set)

    def SetFollowerAxisTarget(self, index, value):
        return _WMX3ApiPython.AdvMotion_CoordinatedJerkRatioPosCommand_SetFollowerAxisTarget(self, index, value)

    def GetFollowerAxisTarget(self, index):
        return _WMX3ApiPython.AdvMotion_CoordinatedJerkRatioPosCommand_GetFollowerAxisTarget(self, index)
    followerAxisAcc = property(_WMX3ApiPython.AdvMotion_CoordinatedJerkRatioPosCommand_followerAxisAcc_get, _WMX3ApiPython.AdvMotion_CoordinatedJerkRatioPosCommand_followerAxisAcc_set)

    def SetFollowerAxisAcc(self, index, value):
        return _WMX3ApiPython.AdvMotion_CoordinatedJerkRatioPosCommand_SetFollowerAxisAcc(self, index, value)

    def GetFollowerAxisAcc(self, index):
        return _WMX3ApiPython.AdvMotion_CoordinatedJerkRatioPosCommand_GetFollowerAxisAcc(self, index)
    followerAxisJerkAccRatio = property(_WMX3ApiPython.AdvMotion_CoordinatedJerkRatioPosCommand_followerAxisJerkAccRatio_get, _WMX3ApiPython.AdvMotion_CoordinatedJerkRatioPosCommand_followerAxisJerkAccRatio_set)

    def SetFollowerAxisJerkAccRatio(self, index, value):
        return _WMX3ApiPython.AdvMotion_CoordinatedJerkRatioPosCommand_SetFollowerAxisJerkAccRatio(self, index, value)

    def GetFollowerAxisJerkAccRatio(self, index):
        return _WMX3ApiPython.AdvMotion_CoordinatedJerkRatioPosCommand_GetFollowerAxisJerkAccRatio(self, index)

    def __init__(self):
        _WMX3ApiPython.AdvMotion_CoordinatedJerkRatioPosCommand_swiginit(self, _WMX3ApiPython.new_AdvMotion_CoordinatedJerkRatioPosCommand())
    __swig_destroy__ = _WMX3ApiPython.delete_AdvMotion_CoordinatedJerkRatioPosCommand

# Register AdvMotion_CoordinatedJerkRatioPosCommand in _WMX3ApiPython:
_WMX3ApiPython.AdvMotion_CoordinatedJerkRatioPosCommand_swigregister(AdvMotion_CoordinatedJerkRatioPosCommand)
class AdvMotion_TwoLinkLinearCommand(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def GetData(self, pTwoLinkLinearCommand):
        return _WMX3ApiPython.AdvMotion_TwoLinkLinearCommand_GetData(self, pTwoLinkLinearCommand)
    axis = property(_WMX3ApiPython.AdvMotion_TwoLinkLinearCommand_axis_get, _WMX3ApiPython.AdvMotion_TwoLinkLinearCommand_axis_set)
    target = property(_WMX3ApiPython.AdvMotion_TwoLinkLinearCommand_target_get, _WMX3ApiPython.AdvMotion_TwoLinkLinearCommand_target_set)
    masterProfile = property(_WMX3ApiPython.AdvMotion_TwoLinkLinearCommand_masterProfile_get, _WMX3ApiPython.AdvMotion_TwoLinkLinearCommand_masterProfile_set)
    L1 = property(_WMX3ApiPython.AdvMotion_TwoLinkLinearCommand_L1_get, _WMX3ApiPython.AdvMotion_TwoLinkLinearCommand_L1_set)
    L2 = property(_WMX3ApiPython.AdvMotion_TwoLinkLinearCommand_L2_get, _WMX3ApiPython.AdvMotion_TwoLinkLinearCommand_L2_set)
    Lzero = property(_WMX3ApiPython.AdvMotion_TwoLinkLinearCommand_Lzero_get, _WMX3ApiPython.AdvMotion_TwoLinkLinearCommand_Lzero_set)
    Lpolarity = property(_WMX3ApiPython.AdvMotion_TwoLinkLinearCommand_Lpolarity_get, _WMX3ApiPython.AdvMotion_TwoLinkLinearCommand_Lpolarity_set)
    Rspan = property(_WMX3ApiPython.AdvMotion_TwoLinkLinearCommand_Rspan_get, _WMX3ApiPython.AdvMotion_TwoLinkLinearCommand_Rspan_set)
    Rzero = property(_WMX3ApiPython.AdvMotion_TwoLinkLinearCommand_Rzero_get, _WMX3ApiPython.AdvMotion_TwoLinkLinearCommand_Rzero_set)
    specifyTargetInRotaryCoordinates = property(_WMX3ApiPython.AdvMotion_TwoLinkLinearCommand_specifyTargetInRotaryCoordinates_get, _WMX3ApiPython.AdvMotion_TwoLinkLinearCommand_specifyTargetInRotaryCoordinates_set)

    def __init__(self):
        _WMX3ApiPython.AdvMotion_TwoLinkLinearCommand_swiginit(self, _WMX3ApiPython.new_AdvMotion_TwoLinkLinearCommand())
    __swig_destroy__ = _WMX3ApiPython.delete_AdvMotion_TwoLinkLinearCommand

# Register AdvMotion_TwoLinkLinearCommand in _WMX3ApiPython:
_WMX3ApiPython.AdvMotion_TwoLinkLinearCommand_swigregister(AdvMotion_TwoLinkLinearCommand)
class AdvMotion_TwoLinkRotaryCommand(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def GetData(self, pTwoLinkRotaryCommand):
        return _WMX3ApiPython.AdvMotion_TwoLinkRotaryCommand_GetData(self, pTwoLinkRotaryCommand)
    axis = property(_WMX3ApiPython.AdvMotion_TwoLinkRotaryCommand_axis_get, _WMX3ApiPython.AdvMotion_TwoLinkRotaryCommand_axis_set)
    target = property(_WMX3ApiPython.AdvMotion_TwoLinkRotaryCommand_target_get, _WMX3ApiPython.AdvMotion_TwoLinkRotaryCommand_target_set)
    masterProfile = property(_WMX3ApiPython.AdvMotion_TwoLinkRotaryCommand_masterProfile_get, _WMX3ApiPython.AdvMotion_TwoLinkRotaryCommand_masterProfile_set)
    L1 = property(_WMX3ApiPython.AdvMotion_TwoLinkRotaryCommand_L1_get, _WMX3ApiPython.AdvMotion_TwoLinkRotaryCommand_L1_set)
    L2 = property(_WMX3ApiPython.AdvMotion_TwoLinkRotaryCommand_L2_get, _WMX3ApiPython.AdvMotion_TwoLinkRotaryCommand_L2_set)
    Lzero = property(_WMX3ApiPython.AdvMotion_TwoLinkRotaryCommand_Lzero_get, _WMX3ApiPython.AdvMotion_TwoLinkRotaryCommand_Lzero_set)
    Lpolarity = property(_WMX3ApiPython.AdvMotion_TwoLinkRotaryCommand_Lpolarity_get, _WMX3ApiPython.AdvMotion_TwoLinkRotaryCommand_Lpolarity_set)
    Rzero = property(_WMX3ApiPython.AdvMotion_TwoLinkRotaryCommand_Rzero_get, _WMX3ApiPython.AdvMotion_TwoLinkRotaryCommand_Rzero_set)
    specifyTargetInLinearCoordinates = property(_WMX3ApiPython.AdvMotion_TwoLinkRotaryCommand_specifyTargetInLinearCoordinates_get, _WMX3ApiPython.AdvMotion_TwoLinkRotaryCommand_specifyTargetInLinearCoordinates_set)

    def __init__(self):
        _WMX3ApiPython.AdvMotion_TwoLinkRotaryCommand_swiginit(self, _WMX3ApiPython.new_AdvMotion_TwoLinkRotaryCommand())
    __swig_destroy__ = _WMX3ApiPython.delete_AdvMotion_TwoLinkRotaryCommand

# Register AdvMotion_TwoLinkRotaryCommand in _WMX3ApiPython:
_WMX3ApiPython.AdvMotion_TwoLinkRotaryCommand_swigregister(AdvMotion_TwoLinkRotaryCommand)
class AdvMotion_SimulatePathIntplCommand(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def GetData(self, pSimulatePathIntplCommand):
        return _WMX3ApiPython.AdvMotion_SimulatePathIntplCommand_GetData(self, pSimulatePathIntplCommand)
    axis = property(_WMX3ApiPython.AdvMotion_SimulatePathIntplCommand_axis_get, _WMX3ApiPython.AdvMotion_SimulatePathIntplCommand_axis_set)

    def SetAxis(self, index, value):
        return _WMX3ApiPython.AdvMotion_SimulatePathIntplCommand_SetAxis(self, index, value)

    def GetAxis(self, index):
        return _WMX3ApiPython.AdvMotion_SimulatePathIntplCommand_GetAxis(self, index)
    profile = property(_WMX3ApiPython.AdvMotion_SimulatePathIntplCommand_profile_get, _WMX3ApiPython.AdvMotion_SimulatePathIntplCommand_profile_set)

    def SetProfile(self, index, value):
        return _WMX3ApiPython.AdvMotion_SimulatePathIntplCommand_SetProfile(self, index, value)

    def GetProfile(self, index):
        return _WMX3ApiPython.AdvMotion_SimulatePathIntplCommand_GetProfile(self, index)
    numPoints = property(_WMX3ApiPython.AdvMotion_SimulatePathIntplCommand_numPoints_get, _WMX3ApiPython.AdvMotion_SimulatePathIntplCommand_numPoints_set)
    type = property(_WMX3ApiPython.AdvMotion_SimulatePathIntplCommand_type_get, _WMX3ApiPython.AdvMotion_SimulatePathIntplCommand_type_set)

    def SetType(self, index, value):
        return _WMX3ApiPython.AdvMotion_SimulatePathIntplCommand_SetType(self, index, value)

    def GetType(self, index):
        return _WMX3ApiPython.AdvMotion_SimulatePathIntplCommand_GetType(self, index)
    direction = property(_WMX3ApiPython.AdvMotion_SimulatePathIntplCommand_direction_get, _WMX3ApiPython.AdvMotion_SimulatePathIntplCommand_direction_set)

    def SetDirection(self, index, value):
        return _WMX3ApiPython.AdvMotion_SimulatePathIntplCommand_SetDirection(self, index, value)

    def GetDirection(self, index):
        return _WMX3ApiPython.AdvMotion_SimulatePathIntplCommand_GetDirection(self, index)
    target = property(_WMX3ApiPython.AdvMotion_SimulatePathIntplCommand_target_get, _WMX3ApiPython.AdvMotion_SimulatePathIntplCommand_target_set)

    def SetTarget(self, index1, index2, value):
        return _WMX3ApiPython.AdvMotion_SimulatePathIntplCommand_SetTarget(self, index1, index2, value)

    def GetTarget(self, index1, index2):
        return _WMX3ApiPython.AdvMotion_SimulatePathIntplCommand_GetTarget(self, index1, index2)
    centerPos = property(_WMX3ApiPython.AdvMotion_SimulatePathIntplCommand_centerPos_get, _WMX3ApiPython.AdvMotion_SimulatePathIntplCommand_centerPos_set)

    def SetCenterPos(self, index1, index2, value):
        return _WMX3ApiPython.AdvMotion_SimulatePathIntplCommand_SetCenterPos(self, index1, index2, value)

    def GetCenterPos(self, index1, index2):
        return _WMX3ApiPython.AdvMotion_SimulatePathIntplCommand_GetCenterPos(self, index1, index2)
    timeMilliseconds = property(_WMX3ApiPython.AdvMotion_SimulatePathIntplCommand_timeMilliseconds_get, _WMX3ApiPython.AdvMotion_SimulatePathIntplCommand_timeMilliseconds_set)

    def SetTimeMilliseconds(self, index, value):
        return _WMX3ApiPython.AdvMotion_SimulatePathIntplCommand_SetTimeMilliseconds(self, index, value)

    def GetTimeMilliseconds(self, index):
        return _WMX3ApiPython.AdvMotion_SimulatePathIntplCommand_GetTimeMilliseconds(self, index)
    enableAutoSmooth = property(_WMX3ApiPython.AdvMotion_SimulatePathIntplCommand_enableAutoSmooth_get, _WMX3ApiPython.AdvMotion_SimulatePathIntplCommand_enableAutoSmooth_set)
    autoSmoothRadius = property(_WMX3ApiPython.AdvMotion_SimulatePathIntplCommand_autoSmoothRadius_get, _WMX3ApiPython.AdvMotion_SimulatePathIntplCommand_autoSmoothRadius_set)

    def SetAutoSmoothRadius(self, index, value):
        return _WMX3ApiPython.AdvMotion_SimulatePathIntplCommand_SetAutoSmoothRadius(self, index, value)

    def GetAutoSmoothRadius(self, index):
        return _WMX3ApiPython.AdvMotion_SimulatePathIntplCommand_GetAutoSmoothRadius(self, index)
    enableConstProfile = property(_WMX3ApiPython.AdvMotion_SimulatePathIntplCommand_enableConstProfile_get, _WMX3ApiPython.AdvMotion_SimulatePathIntplCommand_enableConstProfile_set)
    setStartPos = property(_WMX3ApiPython.AdvMotion_SimulatePathIntplCommand_setStartPos_get, _WMX3ApiPython.AdvMotion_SimulatePathIntplCommand_setStartPos_set)
    startPos = property(_WMX3ApiPython.AdvMotion_SimulatePathIntplCommand_startPos_get, _WMX3ApiPython.AdvMotion_SimulatePathIntplCommand_startPos_set)

    def SetStartPos(self, index, value):
        return _WMX3ApiPython.AdvMotion_SimulatePathIntplCommand_SetStartPos(self, index, value)

    def GetStartPos(self, index):
        return _WMX3ApiPython.AdvMotion_SimulatePathIntplCommand_GetStartPos(self, index)

    def __init__(self):
        _WMX3ApiPython.AdvMotion_SimulatePathIntplCommand_swiginit(self, _WMX3ApiPython.new_AdvMotion_SimulatePathIntplCommand())
    __swig_destroy__ = _WMX3ApiPython.delete_AdvMotion_SimulatePathIntplCommand

# Register AdvMotion_SimulatePathIntplCommand in _WMX3ApiPython:
_WMX3ApiPython.AdvMotion_SimulatePathIntplCommand_swigregister(AdvMotion_SimulatePathIntplCommand)
class AdvMotion_SimulatePathIntpl3DCommand(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def GetData(self, simulatePathIntpl3DCommand):
        return _WMX3ApiPython.AdvMotion_SimulatePathIntpl3DCommand_GetData(self, simulatePathIntpl3DCommand)
    axis = property(_WMX3ApiPython.AdvMotion_SimulatePathIntpl3DCommand_axis_get, _WMX3ApiPython.AdvMotion_SimulatePathIntpl3DCommand_axis_set)

    def SetAxis(self, index, value):
        return _WMX3ApiPython.AdvMotion_SimulatePathIntpl3DCommand_SetAxis(self, index, value)

    def GetAxis(self, index):
        return _WMX3ApiPython.AdvMotion_SimulatePathIntpl3DCommand_GetAxis(self, index)
    profile = property(_WMX3ApiPython.AdvMotion_SimulatePathIntpl3DCommand_profile_get, _WMX3ApiPython.AdvMotion_SimulatePathIntpl3DCommand_profile_set)

    def SetProfile(self, index, value):
        return _WMX3ApiPython.AdvMotion_SimulatePathIntpl3DCommand_SetProfile(self, index, value)

    def GetProfile(self, index):
        return _WMX3ApiPython.AdvMotion_SimulatePathIntpl3DCommand_GetProfile(self, index)
    numPoints = property(_WMX3ApiPython.AdvMotion_SimulatePathIntpl3DCommand_numPoints_get, _WMX3ApiPython.AdvMotion_SimulatePathIntpl3DCommand_numPoints_set)
    type = property(_WMX3ApiPython.AdvMotion_SimulatePathIntpl3DCommand_type_get, _WMX3ApiPython.AdvMotion_SimulatePathIntpl3DCommand_type_set)

    def SetType(self, index, value):
        return _WMX3ApiPython.AdvMotion_SimulatePathIntpl3DCommand_SetType(self, index, value)

    def GetType(self, index):
        return _WMX3ApiPython.AdvMotion_SimulatePathIntpl3DCommand_GetType(self, index)
    target = property(_WMX3ApiPython.AdvMotion_SimulatePathIntpl3DCommand_target_get, _WMX3ApiPython.AdvMotion_SimulatePathIntpl3DCommand_target_set)

    def SetTarget(self, index1, index2, value):
        return _WMX3ApiPython.AdvMotion_SimulatePathIntpl3DCommand_SetTarget(self, index1, index2, value)

    def GetTarget(self, index1, index2):
        return _WMX3ApiPython.AdvMotion_SimulatePathIntpl3DCommand_GetTarget(self, index1, index2)
    circleIntermediateTarget = property(_WMX3ApiPython.AdvMotion_SimulatePathIntpl3DCommand_circleIntermediateTarget_get, _WMX3ApiPython.AdvMotion_SimulatePathIntpl3DCommand_circleIntermediateTarget_set)

    def SetCircleIntermediateTarget(self, index1, index2, value):
        return _WMX3ApiPython.AdvMotion_SimulatePathIntpl3DCommand_SetCircleIntermediateTarget(self, index1, index2, value)

    def GetCircleIntermediateTarget(self, index1, index2):
        return _WMX3ApiPython.AdvMotion_SimulatePathIntpl3DCommand_GetCircleIntermediateTarget(self, index1, index2)
    timeMilliseconds = property(_WMX3ApiPython.AdvMotion_SimulatePathIntpl3DCommand_timeMilliseconds_get, _WMX3ApiPython.AdvMotion_SimulatePathIntpl3DCommand_timeMilliseconds_set)

    def SetTimeMilliseconds(self, index, value):
        return _WMX3ApiPython.AdvMotion_SimulatePathIntpl3DCommand_SetTimeMilliseconds(self, index, value)

    def GetTimeMilliseconds(self, index):
        return _WMX3ApiPython.AdvMotion_SimulatePathIntpl3DCommand_GetTimeMilliseconds(self, index)
    enableAutoSmooth = property(_WMX3ApiPython.AdvMotion_SimulatePathIntpl3DCommand_enableAutoSmooth_get, _WMX3ApiPython.AdvMotion_SimulatePathIntpl3DCommand_enableAutoSmooth_set)
    autoSmoothRadius = property(_WMX3ApiPython.AdvMotion_SimulatePathIntpl3DCommand_autoSmoothRadius_get, _WMX3ApiPython.AdvMotion_SimulatePathIntpl3DCommand_autoSmoothRadius_set)

    def SetAutoSmoothRadius(self, index, value):
        return _WMX3ApiPython.AdvMotion_SimulatePathIntpl3DCommand_SetAutoSmoothRadius(self, index, value)

    def GetAutoSmoothRadius(self, index):
        return _WMX3ApiPython.AdvMotion_SimulatePathIntpl3DCommand_GetAutoSmoothRadius(self, index)
    enableConstProfile = property(_WMX3ApiPython.AdvMotion_SimulatePathIntpl3DCommand_enableConstProfile_get, _WMX3ApiPython.AdvMotion_SimulatePathIntpl3DCommand_enableConstProfile_set)
    setStartPos = property(_WMX3ApiPython.AdvMotion_SimulatePathIntpl3DCommand_setStartPos_get, _WMX3ApiPython.AdvMotion_SimulatePathIntpl3DCommand_setStartPos_set)
    startPos = property(_WMX3ApiPython.AdvMotion_SimulatePathIntpl3DCommand_startPos_get, _WMX3ApiPython.AdvMotion_SimulatePathIntpl3DCommand_startPos_set)

    def SetStartPos(self, index, value):
        return _WMX3ApiPython.AdvMotion_SimulatePathIntpl3DCommand_SetStartPos(self, index, value)

    def GetStartPos(self, index):
        return _WMX3ApiPython.AdvMotion_SimulatePathIntpl3DCommand_GetStartPos(self, index)

    def __init__(self):
        _WMX3ApiPython.AdvMotion_SimulatePathIntpl3DCommand_swiginit(self, _WMX3ApiPython.new_AdvMotion_SimulatePathIntpl3DCommand())
    __swig_destroy__ = _WMX3ApiPython.delete_AdvMotion_SimulatePathIntpl3DCommand

# Register AdvMotion_SimulatePathIntpl3DCommand in _WMX3ApiPython:
_WMX3ApiPython.AdvMotion_SimulatePathIntpl3DCommand_swigregister(AdvMotion_SimulatePathIntpl3DCommand)
class AdvMotion(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, advMotion):
        _WMX3ApiPython.AdvMotion_swiginit(self, _WMX3ApiPython.new_AdvMotion(advMotion))
    __swig_destroy__ = _WMX3ApiPython.delete_AdvMotion

    def IsDeviceValid(self):
        return _WMX3ApiPython.AdvMotion_IsDeviceValid(self)

    def CreateSplineBuffer(self, channel, points):
        return _WMX3ApiPython.AdvMotion_CreateSplineBuffer(self, channel, points)

    def FreeSplineBuffer(self, channel):
        return _WMX3ApiPython.AdvMotion_FreeSplineBuffer(self, channel)

    def GetSplineBufferPoints(self, channel):
        pPoints = uintp()
        ret = _WMX3ApiPython.AdvMotion_GetSplineBufferPoints(self, channel, pPoints)
        return ret, pPoints.value()



    def GetSplineBytesPerPoint(self):
        pBytes = uintp()
        ret = _WMX3ApiPython.AdvMotion_GetSplineBytesPerPoint(self, pBytes)
        return ret, pBytes.value()



    def StartCSplinePos_PointTime(self, channel, pSplineCommand, numPoints, pPoint, pPointTimeMilliseconds):
        return _WMX3ApiPython.AdvMotion_StartCSplinePos_PointTime(self, channel, pSplineCommand, numPoints, pPoint, pPointTimeMilliseconds)

    def StartCSplinePos_TotalTime(self, channel, pSplineCommand, numPoints, pPoint):
        return _WMX3ApiPython.AdvMotion_StartCSplinePos_TotalTime(self, channel, pSplineCommand, numPoints, pPoint)

    def StartCSplinePos_Profile(self, channel, pSplineCommand, numPoints, pPoint):
        return _WMX3ApiPython.AdvMotion_StartCSplinePos_Profile(self, channel, pSplineCommand, numPoints, pPoint)

    def StartCSplinePos_VelAccLimited(self, channel, pSplineCommand, numPoints, pPoint):
        return _WMX3ApiPython.AdvMotion_StartCSplinePos_VelAccLimited(self, channel, pSplineCommand, numPoints, pPoint)

    def StartCSplineMov_PointTime(self, channel, pSplineCommand, numPoints, pPoint, pPointTimeMilliseconds):
        return _WMX3ApiPython.AdvMotion_StartCSplineMov_PointTime(self, channel, pSplineCommand, numPoints, pPoint, pPointTimeMilliseconds)

    def StartCSplineMov_TotalTime(self, channel, pSplineCommand, numPoints, pPoint):
        return _WMX3ApiPython.AdvMotion_StartCSplineMov_TotalTime(self, channel, pSplineCommand, numPoints, pPoint)

    def StartCSplineMov_Profile(self, channel, pSplineCommand, numPoints, pPoint):
        return _WMX3ApiPython.AdvMotion_StartCSplineMov_Profile(self, channel, pSplineCommand, numPoints, pPoint)

    def StartCSplineMov_VelAccLimited(self, channel, pSplineCommand, numPoints, pPoint):
        return _WMX3ApiPython.AdvMotion_StartCSplineMov_VelAccLimited(self, channel, pSplineCommand, numPoints, pPoint)

    def StartCBSplinePos_PointTime(self, channel, pSplineCommand, numPoints, pPoint, pPointTimeMilliseconds):
        return _WMX3ApiPython.AdvMotion_StartCBSplinePos_PointTime(self, channel, pSplineCommand, numPoints, pPoint, pPointTimeMilliseconds)

    def StartCBSplinePos_TotalTime(self, channel, pSplineCommand, numPoints, pPoint):
        return _WMX3ApiPython.AdvMotion_StartCBSplinePos_TotalTime(self, channel, pSplineCommand, numPoints, pPoint)

    def StartCBSplinePos_Profile(self, channel, pSplineCommand, numPoints, pPoint):
        return _WMX3ApiPython.AdvMotion_StartCBSplinePos_Profile(self, channel, pSplineCommand, numPoints, pPoint)

    def StartCBSplinePos_VelAccLimited(self, channel, pSplineCommand, numPoints, pPoint):
        return _WMX3ApiPython.AdvMotion_StartCBSplinePos_VelAccLimited(self, channel, pSplineCommand, numPoints, pPoint)

    def StartCBSplineMov_PointTime(self, channel, pSplineCommand, numPoints, pPoint, pPointTimeMilliseconds):
        return _WMX3ApiPython.AdvMotion_StartCBSplineMov_PointTime(self, channel, pSplineCommand, numPoints, pPoint, pPointTimeMilliseconds)

    def StartCBSplineMov_TotalTime(self, channel, pSplineCommand, numPoints, pPoint):
        return _WMX3ApiPython.AdvMotion_StartCBSplineMov_TotalTime(self, channel, pSplineCommand, numPoints, pPoint)

    def StartCBSplineMov_Profile(self, channel, pSplineCommand, numPoints, pPoint):
        return _WMX3ApiPython.AdvMotion_StartCBSplineMov_Profile(self, channel, pSplineCommand, numPoints, pPoint)

    def StartCBSplineMov_VelAccLimited(self, channel, pSplineCommand, numPoints, pPoint):
        return _WMX3ApiPython.AdvMotion_StartCBSplineMov_VelAccLimited(self, channel, pSplineCommand, numPoints, pPoint)

    def CreatePVTBuffer(self, axis, points):
        return _WMX3ApiPython.AdvMotion_CreatePVTBuffer(self, axis, points)

    def FreePVTBuffer(self, axis):
        return _WMX3ApiPython.AdvMotion_FreePVTBuffer(self, axis)

    def GetPVTBufferPoints(self, axis):
        pPoints = uintp()
        ret = _WMX3ApiPython.AdvMotion_GetPVTBufferPoints(self, axis, pPoints)
        return ret, pPoints.value()



    def GetPVTBytesPerPoint(self):
        pBytes = uintp()
        ret = _WMX3ApiPython.AdvMotion_GetPVTBytesPerPoint(self, pBytes)
        return ret, pBytes.value()



    def StartPVT(self, *args):
        return _WMX3ApiPython.AdvMotion_StartPVT(self, *args)

    def StartPVT_Intpl(self, *args):
        return _WMX3ApiPython.AdvMotion_StartPVT_Intpl(self, *args)

    def StartPT(self, *args):
        return _WMX3ApiPython.AdvMotion_StartPT(self, *args)

    def StartVT(self, *args):
        return _WMX3ApiPython.AdvMotion_StartVT(self, *args)

    def StartAT(self, *args):
        return _WMX3ApiPython.AdvMotion_StartAT(self, *args)

    def CreatePathIntplBuffer(self, axis, points):
        return _WMX3ApiPython.AdvMotion_CreatePathIntplBuffer(self, axis, points)

    def FreePathIntplBuffer(self, axis):
        return _WMX3ApiPython.AdvMotion_FreePathIntplBuffer(self, axis)

    def GetPathIntplBufferPoints(self, axis, pPoints):
        return _WMX3ApiPython.AdvMotion_GetPathIntplBufferPoints(self, axis, pPoints)

    def GetPathIntplBytesPerPoint(self, pBytes):
        return _WMX3ApiPython.AdvMotion_GetPathIntplBytesPerPoint(self, pBytes)

    def OverridePathIntplVelocityMultiplier(self, axis, multiplier):
        return _WMX3ApiPython.AdvMotion_OverridePathIntplVelocityMultiplier(self, axis, multiplier)

    def StartPathIntplPos(self, *args):
        return _WMX3ApiPython.AdvMotion_StartPathIntplPos(self, *args)

    def StartPathIntplMov(self, *args):
        return _WMX3ApiPython.AdvMotion_StartPathIntplMov(self, *args)

    def StartPathIntplPos_Trigger(self, *args):
        return _WMX3ApiPython.AdvMotion_StartPathIntplPos_Trigger(self, *args)

    def StartPathIntplMov_Trigger(self, *args):
        return _WMX3ApiPython.AdvMotion_StartPathIntplMov_Trigger(self, *args)

    def StartPathIntplPos_TriggerEvents(self, *args):
        return _WMX3ApiPython.AdvMotion_StartPathIntplPos_TriggerEvents(self, *args)

    def StartPathIntplMov_TriggerEvents(self, *args):
        return _WMX3ApiPython.AdvMotion_StartPathIntplMov_TriggerEvents(self, *args)

    def StartPathIntpl3DPos(self, *args):
        return _WMX3ApiPython.AdvMotion_StartPathIntpl3DPos(self, *args)

    def StartPathIntpl3DMov(self, *args):
        return _WMX3ApiPython.AdvMotion_StartPathIntpl3DMov(self, *args)

    def StartPathIntpl3DPos_Trigger(self, *args):
        return _WMX3ApiPython.AdvMotion_StartPathIntpl3DPos_Trigger(self, *args)

    def StartPathIntpl3DMov_Trigger(self, *args):
        return _WMX3ApiPython.AdvMotion_StartPathIntpl3DMov_Trigger(self, *args)

    def StartPathIntpl3DPos_TriggerEvents(self, *args):
        return _WMX3ApiPython.AdvMotion_StartPathIntpl3DPos_TriggerEvents(self, *args)

    def StartPathIntpl3DMov_TriggerEvents(self, *args):
        return _WMX3ApiPython.AdvMotion_StartPathIntpl3DMov_TriggerEvents(self, *args)

    def OverridePathIntpl3DVelocityMultiplier(self, axis, multiplier):
        return _WMX3ApiPython.AdvMotion_OverridePathIntpl3DVelocityMultiplier(self, axis, multiplier)

    def CreatePathIntplWithRotationBuffer(self, channel, points):
        return _WMX3ApiPython.AdvMotion_CreatePathIntplWithRotationBuffer(self, channel, points)

    def FreePathIntplWithRotationBuffer(self, channel):
        return _WMX3ApiPython.AdvMotion_FreePathIntplWithRotationBuffer(self, channel)

    def GetPathIntplWithRotationBytesPerPoint(self):
        pBytes = uintp()
        ret = _WMX3ApiPython.AdvMotion_GetPathIntplWithRotationBytesPerPoint(self, pBytes)
        return ret, pBytes.value()



    def SetPathIntplWithRotationConfiguration(self, channel, pConfig):
        return _WMX3ApiPython.AdvMotion_SetPathIntplWithRotationConfiguration(self, channel, pConfig)

    def AddPathIntplWithRotationCommand(self, channel, pCommand):
        return _WMX3ApiPython.AdvMotion_AddPathIntplWithRotationCommand(self, channel, pCommand)

    def StartPathIntplWithRotation(self, channel):
        return _WMX3ApiPython.AdvMotion_StartPathIntplWithRotation(self, channel)

    def StartPathIntplWithRotation_Trigger(self, channel, pTrigger):
        return _WMX3ApiPython.AdvMotion_StartPathIntplWithRotation_Trigger(self, channel, pTrigger)

    def StartPathIntplWithRotation_TriggerEvents(self, channel, pTriggerEvents):
        return _WMX3ApiPython.AdvMotion_StartPathIntplWithRotation_TriggerEvents(self, channel, pTriggerEvents)

    def StartPathIntplWithRotation_Pos(self, channel, pos):
        return _WMX3ApiPython.AdvMotion_StartPathIntplWithRotation_Pos(self, channel, pos)

    def StartPathIntplWithRotation_Pos_Trigger(self, channel, pos, pTrigger):
        return _WMX3ApiPython.AdvMotion_StartPathIntplWithRotation_Pos_Trigger(self, channel, pos, pTrigger)

    def StartPathIntplWithRotation_Pos_TriggerEvents(self, channel, pos, pTriggerEvents):
        return _WMX3ApiPython.AdvMotion_StartPathIntplWithRotation_Pos_TriggerEvents(self, channel, pos, pTriggerEvents)

    def StartPathIntplWithRotation_Point(self, channel, point):
        return _WMX3ApiPython.AdvMotion_StartPathIntplWithRotation_Point(self, channel, point)

    def StartPathIntplWithRotation_Point_Trigger(self, channel, point, pTrigger):
        return _WMX3ApiPython.AdvMotion_StartPathIntplWithRotation_Point_Trigger(self, channel, point, pTrigger)

    def StartPathIntplWithRotation_Point_TriggerEvents(self, channel, point, pTriggerEvents):
        return _WMX3ApiPython.AdvMotion_StartPathIntplWithRotation_Point_TriggerEvents(self, channel, point, pTriggerEvents)

    def ClearPathIntplWithRotation(self, channel):
        return _WMX3ApiPython.AdvMotion_ClearPathIntplWithRotation(self, channel)

    def GetPathIntplWithRotationStatus(self, channel):
        pStatus = AdvMotion_PathIntplWithRotationStatus()
        ret = _WMX3ApiPython.AdvMotion_GetPathIntplWithRotationStatus(self, channel, pStatus)
        return ret, pStatus



    def CreatePathIntplLookaheadBuffer(self, channel, points):
        return _WMX3ApiPython.AdvMotion_CreatePathIntplLookaheadBuffer(self, channel, points)

    def FreePathIntplLookaheadBuffer(self, channel):
        return _WMX3ApiPython.AdvMotion_FreePathIntplLookaheadBuffer(self, channel)

    def GetPathIntplLookaheadBytesPerPoint(self):
        pBytes = uintp()
        ret = _WMX3ApiPython.AdvMotion_GetPathIntplLookaheadBytesPerPoint(self, pBytes)
        return ret, pBytes.value()



    def SetPathIntplLookaheadConfiguration(self, channel, pConfig):
        return _WMX3ApiPython.AdvMotion_SetPathIntplLookaheadConfiguration(self, channel, pConfig)

    def AddPathIntplLookaheadCommand(self, channel, pCommand):
        return _WMX3ApiPython.AdvMotion_AddPathIntplLookaheadCommand(self, channel, pCommand)

    def StartPathIntplLookahead(self, channel):
        return _WMX3ApiPython.AdvMotion_StartPathIntplLookahead(self, channel)

    def StopPathIntplLookahead(self, channel):
        return _WMX3ApiPython.AdvMotion_StopPathIntplLookahead(self, channel)

    def ClearPathIntplLookahead(self, channel):
        return _WMX3ApiPython.AdvMotion_ClearPathIntplLookahead(self, channel)

    def GetPathIntplLookaheadStatus(self, channel):
        pStatus = AdvMotion_PathIntplLookaheadStatus()
        ret = _WMX3ApiPython.AdvMotion_GetPathIntplLookaheadStatus(self, channel, pStatus)
        return ret, pStatus



    def StartCoordinatedPos(self, *args):
        return _WMX3ApiPython.AdvMotion_StartCoordinatedPos(self, *args)

    def StartCoordinatedPos_JerkRatio(self, pPosCommand):
        return _WMX3ApiPython.AdvMotion_StartCoordinatedPos_JerkRatio(self, pPosCommand)

    def StartTwoLinkLinearPos(self, pTwoLinkCommand):
        return _WMX3ApiPython.AdvMotion_StartTwoLinkLinearPos(self, pTwoLinkCommand)

    def StartTwoLinkLinearMov(self, pTwoLinkCommand):
        return _WMX3ApiPython.AdvMotion_StartTwoLinkLinearMov(self, pTwoLinkCommand)

    def StartTwoLinkRotaryPos(self, pTwoLinkCommand):
        return _WMX3ApiPython.AdvMotion_StartTwoLinkRotaryPos(self, pTwoLinkCommand)

    def StartTwoLinkRotaryMov(self, pTwoLinkCommand):
        return _WMX3ApiPython.AdvMotion_StartTwoLinkRotaryMov(self, pTwoLinkCommand)

    def StartTwoLinkUntetheredLinearPos(self, pTwoLinkCommand):
        return _WMX3ApiPython.AdvMotion_StartTwoLinkUntetheredLinearPos(self, pTwoLinkCommand)

    def StartTwoLinkUntetheredLinearMov(self, pTwoLinkCommand):
        return _WMX3ApiPython.AdvMotion_StartTwoLinkUntetheredLinearMov(self, pTwoLinkCommand)

    def StartTwoLinkUntetheredRotaryPos(self, pTwoLinkCommand):
        return _WMX3ApiPython.AdvMotion_StartTwoLinkUntetheredRotaryPos(self, pTwoLinkCommand)

    def StartTwoLinkUntetheredRotaryMov(self, pTwoLinkCommand):
        return _WMX3ApiPython.AdvMotion_StartTwoLinkUntetheredRotaryMov(self, pTwoLinkCommand)

    def SimulatePosAtTime(self, pPathIntplCommand, timeMilliseconds):
        pPos1 = doublep()
        pPos2 = doublep()
        pMoveDistance = doublep()
        pRemainDistance = doublep()
        pTotalDistance = doublep()
        ret = _WMX3ApiPython.AdvMotion_SimulatePosAtTime(self, pPathIntplCommand, timeMilliseconds, pPos1, pPos2, pMoveDistance, pRemainDistance, pTotalDistance)
        return ret, pPos1.value(), pPos2.value(), pMoveDistance.value(), pRemainDistance.value(), pTotalDistance.value()



    def SimulateTimeAtPos(self, pPathIntplCommand, specificPos1, specificPos2, minimumSearchIndex):
        pMoveTimeMilliseconds = doublep()
        pRemainTimeMilliseconds = doublep()
        pTotalTimeMilliseconds = doublep()
        ret = _WMX3ApiPython.AdvMotion_SimulateTimeAtPos(self, pPathIntplCommand, specificPos1, specificPos2, minimumSearchIndex , pMoveTimeMilliseconds, pRemainTimeMilliseconds, pTotalTimeMilliseconds)
        return ret, pMoveTimeMilliseconds.value(), pRemainTimeMilliseconds.value(), pTotalTimeMilliseconds.value()



    def SimulateTimeAtDist(self, pPathIntplCommand, specificDistance):
        pMoveTimeMilliseconds = doublep()
        pRemainTimeMilliseconds = doublep()
        pTotalTimeMilliseconds = doublep()
        ret = _WMX3ApiPython.AdvMotion_SimulateTimeAtDist(self, pPathIntplCommand, specificDistance, pMoveTimeMilliseconds, pRemainTimeMilliseconds, pTotalTimeMilliseconds)
        return ret, pMoveTimeMilliseconds.value(), pRemainTimeMilliseconds.value(), pTotalTimeMilliseconds.value()



    def SimulatePosAtTime(self, pPathIntplCommand, timeMilliseconds):
        pPos1 = doublep()
        pPos2 = doublep()
        pPos3 = doublep()
        pMoveDistance = doublep()
        pRemainDistance = doublep()
        pTotalDistance = doublep()
        ret = _WMX3ApiPython.AdvMotion_SimulatePosAtTime_3D(self, pPathIntplCommand, timeMilliseconds, pPos1, pPos2, pPos3, pMoveDistance, pRemainDistance, pTotalDistance)
        return ret, pPos1.value(), pPos2.value(), pMoveDistance.value(), pRemainDistance.value(), pTotalDistance.value()



    def SimulateTimeAtPos(self, pPathIntplCommand, specificPos1, specificPos2, specificPos3, minimumSearchIndex):
        pMoveTimeMilliseconds = doublep()
        pRemainTimeMilliseconds = doublep()
        pTotalTimeMilliseconds = doublep()
        ret = _WMX3ApiPython.AdvMotion_SimulateTimeAtPos_3D(self, pPathIntplCommand, specificPos1, specificPos2, specificPos3, minimumSearchIndex , pMoveTimeMilliseconds, pRemainTimeMilliseconds, pTotalTimeMilliseconds)
        return ret, pMoveTimeMilliseconds.value(), pRemainTimeMilliseconds.value(), pTotalTimeMilliseconds.value()



    def SimulateTimeAtDist(self, pPathIntplCommand, specificDistance):
        pMoveTimeMilliseconds = doublep()
        pRemainTimeMilliseconds = doublep()
        pTotalTimeMilliseconds = doublep()
        ret = _WMX3ApiPython.AdvMotion_SimulateTimeAtDist_3D(self, pPathIntplCommand, specificDistance, pMoveTimeMilliseconds, pRemainTimeMilliseconds, pTotalTimeMilliseconds)
        return ret, pMoveTimeMilliseconds.value(), pRemainTimeMilliseconds.value(), pTotalTimeMilliseconds.value()



# Register AdvMotion in _WMX3ApiPython:
_WMX3ApiPython.AdvMotion_swigregister(AdvMotion)
class AdvVelocity(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, advMotion):
        _WMX3ApiPython.AdvVelocity_swiginit(self, _WMX3ApiPython.new_AdvVelocity(advMotion))
    __swig_destroy__ = _WMX3ApiPython.delete_AdvVelocity

    def IsDeviceValid(self):
        return _WMX3ApiPython.AdvVelocity_IsDeviceValid(self)

    def SetConstantLinearVel(self, masterAxis, slaveAxis, centerPos, minR, positiveMaxR, negativeMaxR, constLinVel, initVelVariance):
        return _WMX3ApiPython.AdvVelocity_SetConstantLinearVel(self, masterAxis, slaveAxis, centerPos, minR, positiveMaxR, negativeMaxR, constLinVel, initVelVariance)

    def ResolveConstantLinearVel(self, axis):
        return _WMX3ApiPython.AdvVelocity_ResolveConstantLinearVel(self, axis)

# Register AdvVelocity in _WMX3ApiPython:
_WMX3ApiPython.AdvVelocity_swigregister(AdvVelocity)
class AdvSync_ECAMType(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Normal = _WMX3ApiPython.AdvSync_ECAMType_Normal
    Periodic = _WMX3ApiPython.AdvSync_ECAMType_Periodic
    Repeat = _WMX3ApiPython.AdvSync_ECAMType_Repeat

    def __init__(self):
        _WMX3ApiPython.AdvSync_ECAMType_swiginit(self, _WMX3ApiPython.new_AdvSync_ECAMType())
    __swig_destroy__ = _WMX3ApiPython.delete_AdvSync_ECAMType

# Register AdvSync_ECAMType in _WMX3ApiPython:
_WMX3ApiPython.AdvSync_ECAMType_swigregister(AdvSync_ECAMType)
class AdvSync_ECAMSourceType(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    MasterCommandPos = _WMX3ApiPython.AdvSync_ECAMSourceType_MasterCommandPos
    MasterFeedbackPos = _WMX3ApiPython.AdvSync_ECAMSourceType_MasterFeedbackPos
    EncoderInput = _WMX3ApiPython.AdvSync_ECAMSourceType_EncoderInput

    def __init__(self):
        _WMX3ApiPython.AdvSync_ECAMSourceType_swiginit(self, _WMX3ApiPython.new_AdvSync_ECAMSourceType())
    __swig_destroy__ = _WMX3ApiPython.delete_AdvSync_ECAMSourceType

# Register AdvSync_ECAMSourceType in _WMX3ApiPython:
_WMX3ApiPython.AdvSync_ECAMSourceType_swigregister(AdvSync_ECAMSourceType)
class AdvSync_ECAMSourceOptions(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def SetData(self, pECAMSourceOptions):
        return _WMX3ApiPython.AdvSync_ECAMSourceOptions_SetData(self, pECAMSourceOptions)

    def GetData(self, pECAMSourceOptions):
        return _WMX3ApiPython.AdvSync_ECAMSourceOptions_GetData(self, pECAMSourceOptions)
    type = property(_WMX3ApiPython.AdvSync_ECAMSourceOptions_type_get, _WMX3ApiPython.AdvSync_ECAMSourceOptions_type_set)
    encoderByteAddress = property(_WMX3ApiPython.AdvSync_ECAMSourceOptions_encoderByteAddress_get, _WMX3ApiPython.AdvSync_ECAMSourceOptions_encoderByteAddress_set)
    encoderSize = property(_WMX3ApiPython.AdvSync_ECAMSourceOptions_encoderSize_get, _WMX3ApiPython.AdvSync_ECAMSourceOptions_encoderSize_set)

    def __init__(self):
        _WMX3ApiPython.AdvSync_ECAMSourceOptions_swiginit(self, _WMX3ApiPython.new_AdvSync_ECAMSourceOptions())
    __swig_destroy__ = _WMX3ApiPython.delete_AdvSync_ECAMSourceOptions

# Register AdvSync_ECAMSourceOptions in _WMX3ApiPython:
_WMX3ApiPython.AdvSync_ECAMSourceOptions_swigregister(AdvSync_ECAMSourceOptions)
class AdvSync_ECAMClutchType(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    PyNone = _WMX3ApiPython.AdvSync_ECAMClutchType_PyNone
    SimpleCatchUp = _WMX3ApiPython.AdvSync_ECAMClutchType_SimpleCatchUp

    def __init__(self):
        _WMX3ApiPython.AdvSync_ECAMClutchType_swiginit(self, _WMX3ApiPython.new_AdvSync_ECAMClutchType())
    __swig_destroy__ = _WMX3ApiPython.delete_AdvSync_ECAMClutchType

# Register AdvSync_ECAMClutchType in _WMX3ApiPython:
_WMX3ApiPython.AdvSync_ECAMClutchType_swigregister(AdvSync_ECAMClutchType)
class AdvSync_ECAMClutchOptions(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def SetData(self, pECAMClutchOptions):
        return _WMX3ApiPython.AdvSync_ECAMClutchOptions_SetData(self, pECAMClutchOptions)

    def GetData(self, pECAMClutchOptions):
        return _WMX3ApiPython.AdvSync_ECAMClutchOptions_GetData(self, pECAMClutchOptions)
    type = property(_WMX3ApiPython.AdvSync_ECAMClutchOptions_type_get, _WMX3ApiPython.AdvSync_ECAMClutchOptions_type_set)
    simpleCatchUpVelocity = property(_WMX3ApiPython.AdvSync_ECAMClutchOptions_simpleCatchUpVelocity_get, _WMX3ApiPython.AdvSync_ECAMClutchOptions_simpleCatchUpVelocity_set)
    simpleCatchUpAcc = property(_WMX3ApiPython.AdvSync_ECAMClutchOptions_simpleCatchUpAcc_get, _WMX3ApiPython.AdvSync_ECAMClutchOptions_simpleCatchUpAcc_set)

    def __init__(self):
        _WMX3ApiPython.AdvSync_ECAMClutchOptions_swiginit(self, _WMX3ApiPython.new_AdvSync_ECAMClutchOptions())
    __swig_destroy__ = _WMX3ApiPython.delete_AdvSync_ECAMClutchOptions

# Register AdvSync_ECAMClutchOptions in _WMX3ApiPython:
_WMX3ApiPython.AdvSync_ECAMClutchOptions_swigregister(AdvSync_ECAMClutchOptions)
class AdvSync_ECAMOptions(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def SetData(self, pECAMOptions):
        return _WMX3ApiPython.AdvSync_ECAMOptions_SetData(self, pECAMOptions)

    def GetData(self, pECAMOptions):
        return _WMX3ApiPython.AdvSync_ECAMOptions_GetData(self, pECAMOptions)
    type = property(_WMX3ApiPython.AdvSync_ECAMOptions_type_get, _WMX3ApiPython.AdvSync_ECAMOptions_type_set)
    source = property(_WMX3ApiPython.AdvSync_ECAMOptions_source_get, _WMX3ApiPython.AdvSync_ECAMOptions_source_set)
    clutch = property(_WMX3ApiPython.AdvSync_ECAMOptions_clutch_get, _WMX3ApiPython.AdvSync_ECAMOptions_clutch_set)

    def __init__(self):
        _WMX3ApiPython.AdvSync_ECAMOptions_swiginit(self, _WMX3ApiPython.new_AdvSync_ECAMOptions())
    __swig_destroy__ = _WMX3ApiPython.delete_AdvSync_ECAMOptions

# Register AdvSync_ECAMOptions in _WMX3ApiPython:
_WMX3ApiPython.AdvSync_ECAMOptions_swigregister(AdvSync_ECAMOptions)
class AdvSync_ECAMData(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def SetData(self, pECAMData):
        return _WMX3ApiPython.AdvSync_ECAMData_SetData(self, pECAMData)

    def GetData(self, pECAMData):
        return _WMX3ApiPython.AdvSync_ECAMData_GetData(self, pECAMData)
    slaveAxis = property(_WMX3ApiPython.AdvSync_ECAMData_slaveAxis_get, _WMX3ApiPython.AdvSync_ECAMData_slaveAxis_set)
    masterAxis = property(_WMX3ApiPython.AdvSync_ECAMData_masterAxis_get, _WMX3ApiPython.AdvSync_ECAMData_masterAxis_set)
    numPoints = property(_WMX3ApiPython.AdvSync_ECAMData_numPoints_get, _WMX3ApiPython.AdvSync_ECAMData_numPoints_set)
    options = property(_WMX3ApiPython.AdvSync_ECAMData_options_get, _WMX3ApiPython.AdvSync_ECAMData_options_set)
    slavePos = property(_WMX3ApiPython.AdvSync_ECAMData_slavePos_get, _WMX3ApiPython.AdvSync_ECAMData_slavePos_set)

    def SetSlavePos(self, index, value):
        return _WMX3ApiPython.AdvSync_ECAMData_SetSlavePos(self, index, value)

    def GetSlavePos(self, index):
        return _WMX3ApiPython.AdvSync_ECAMData_GetSlavePos(self, index)
    masterPos = property(_WMX3ApiPython.AdvSync_ECAMData_masterPos_get, _WMX3ApiPython.AdvSync_ECAMData_masterPos_set)

    def SetMasterPos(self, index, value):
        return _WMX3ApiPython.AdvSync_ECAMData_SetMasterPos(self, index, value)

    def GetMasterPos(self, index):
        return _WMX3ApiPython.AdvSync_ECAMData_GetMasterPos(self, index)

    def __init__(self):
        _WMX3ApiPython.AdvSync_ECAMData_swiginit(self, _WMX3ApiPython.new_AdvSync_ECAMData())
    __swig_destroy__ = _WMX3ApiPython.delete_AdvSync_ECAMData

# Register AdvSync_ECAMData in _WMX3ApiPython:
_WMX3ApiPython.AdvSync_ECAMData_swigregister(AdvSync_ECAMData)
class AdvSync_DancerControlOptions(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def SetData(self, pDancerControlOptions):
        return _WMX3ApiPython.AdvSync_DancerControlOptions_SetData(self, pDancerControlOptions)

    def GetData(self, pDancerControlOptions):
        return _WMX3ApiPython.AdvSync_DancerControlOptions_GetData(self, pDancerControlOptions)
    proportionalGain = property(_WMX3ApiPython.AdvSync_DancerControlOptions_proportionalGain_get, _WMX3ApiPython.AdvSync_DancerControlOptions_proportionalGain_set)
    integralGain = property(_WMX3ApiPython.AdvSync_DancerControlOptions_integralGain_get, _WMX3ApiPython.AdvSync_DancerControlOptions_integralGain_set)
    derivativeGain = property(_WMX3ApiPython.AdvSync_DancerControlOptions_derivativeGain_get, _WMX3ApiPython.AdvSync_DancerControlOptions_derivativeGain_set)
    gainFactor = property(_WMX3ApiPython.AdvSync_DancerControlOptions_gainFactor_get, _WMX3ApiPython.AdvSync_DancerControlOptions_gainFactor_set)
    derivativeSamples = property(_WMX3ApiPython.AdvSync_DancerControlOptions_derivativeSamples_get, _WMX3ApiPython.AdvSync_DancerControlOptions_derivativeSamples_set)
    integralTimeCycles = property(_WMX3ApiPython.AdvSync_DancerControlOptions_integralTimeCycles_get, _WMX3ApiPython.AdvSync_DancerControlOptions_integralTimeCycles_set)
    maxIntegral = property(_WMX3ApiPython.AdvSync_DancerControlOptions_maxIntegral_get, _WMX3ApiPython.AdvSync_DancerControlOptions_maxIntegral_set)
    inputByteAddress = property(_WMX3ApiPython.AdvSync_DancerControlOptions_inputByteAddress_get, _WMX3ApiPython.AdvSync_DancerControlOptions_inputByteAddress_set)
    inputSize = property(_WMX3ApiPython.AdvSync_DancerControlOptions_inputSize_get, _WMX3ApiPython.AdvSync_DancerControlOptions_inputSize_set)
    inputZero = property(_WMX3ApiPython.AdvSync_DancerControlOptions_inputZero_get, _WMX3ApiPython.AdvSync_DancerControlOptions_inputZero_set)
    inputMax = property(_WMX3ApiPython.AdvSync_DancerControlOptions_inputMax_get, _WMX3ApiPython.AdvSync_DancerControlOptions_inputMax_set)
    inputMin = property(_WMX3ApiPython.AdvSync_DancerControlOptions_inputMin_get, _WMX3ApiPython.AdvSync_DancerControlOptions_inputMin_set)
    useOutput = property(_WMX3ApiPython.AdvSync_DancerControlOptions_useOutput_get, _WMX3ApiPython.AdvSync_DancerControlOptions_useOutput_set)
    zeroClampMinInput = property(_WMX3ApiPython.AdvSync_DancerControlOptions_zeroClampMinInput_get, _WMX3ApiPython.AdvSync_DancerControlOptions_zeroClampMinInput_set)
    zeroClampMinVel = property(_WMX3ApiPython.AdvSync_DancerControlOptions_zeroClampMinVel_get, _WMX3ApiPython.AdvSync_DancerControlOptions_zeroClampMinVel_set)

    def __init__(self):
        _WMX3ApiPython.AdvSync_DancerControlOptions_swiginit(self, _WMX3ApiPython.new_AdvSync_DancerControlOptions())
    __swig_destroy__ = _WMX3ApiPython.delete_AdvSync_DancerControlOptions

# Register AdvSync_DancerControlOptions in _WMX3ApiPython:
_WMX3ApiPython.AdvSync_DancerControlOptions_swigregister(AdvSync_DancerControlOptions)
class AdvSync_DancerControlStatus(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def GetData(self, pDancerControlStatus):
        return _WMX3ApiPython.AdvSync_DancerControlStatus_GetData(self, pDancerControlStatus)

    def SetData(self, pDancerControlStatus):
        return _WMX3ApiPython.AdvSync_DancerControlStatus_SetData(self, pDancerControlStatus)
    P = property(_WMX3ApiPython.AdvSync_DancerControlStatus_P_get, _WMX3ApiPython.AdvSync_DancerControlStatus_P_set)
    I = property(_WMX3ApiPython.AdvSync_DancerControlStatus_I_get, _WMX3ApiPython.AdvSync_DancerControlStatus_I_set)
    D = property(_WMX3ApiPython.AdvSync_DancerControlStatus_D_get, _WMX3ApiPython.AdvSync_DancerControlStatus_D_set)
    inputValue = property(_WMX3ApiPython.AdvSync_DancerControlStatus_inputValue_get, _WMX3ApiPython.AdvSync_DancerControlStatus_inputValue_set)
    iSamples = property(_WMX3ApiPython.AdvSync_DancerControlStatus_iSamples_get, _WMX3ApiPython.AdvSync_DancerControlStatus_iSamples_set)
    dSamples = property(_WMX3ApiPython.AdvSync_DancerControlStatus_dSamples_get, _WMX3ApiPython.AdvSync_DancerControlStatus_dSamples_set)

    def __init__(self):
        _WMX3ApiPython.AdvSync_DancerControlStatus_swiginit(self, _WMX3ApiPython.new_AdvSync_DancerControlStatus())
    __swig_destroy__ = _WMX3ApiPython.delete_AdvSync_DancerControlStatus

# Register AdvSync_DancerControlStatus in _WMX3ApiPython:
_WMX3ApiPython.AdvSync_DancerControlStatus_swigregister(AdvSync_DancerControlStatus)
class AdvSync(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, advMotion):
        _WMX3ApiPython.AdvSync_swiginit(self, _WMX3ApiPython.new_AdvSync(advMotion))
    __swig_destroy__ = _WMX3ApiPython.delete_AdvSync

    def IsDeviceValid(self):
        return _WMX3ApiPython.AdvSync_IsDeviceValid(self)

    def StartECAM(self, channel, pECAMData):
        return _WMX3ApiPython.AdvSync_StartECAM(self, channel, pECAMData)

    def GetECAM(self, channel):
        pECAMData = AdvSync_ECAMData()
        ret = _WMX3ApiPython.AdvSync_GetECAM(self, channel, pECAMData)
        return ret, pECAMData



    def StopECAM(self, channel):
        return _WMX3ApiPython.AdvSync_StopECAM(self, channel)

    def StartDancerControl(self, axis, pDancerControlOptions):
        return _WMX3ApiPython.AdvSync_StartDancerControl(self, axis, pDancerControlOptions)

    def StopDancerControl(self, axis):
        return _WMX3ApiPython.AdvSync_StopDancerControl(self, axis)

    def GetDancerControlStatus(self, axis):
        pDancerControlStatus = AdvSync_DancerControlStatus()
        ret = _WMX3ApiPython.AdvSync_GetDancerControlStatus(self, axis, pDancerControlStatus)
        return ret, pDancerControlStatus



# Register AdvSync in _WMX3ApiPython:
_WMX3ApiPython.AdvSync_swigregister(AdvSync)
class AdvancedMotion(object):
    r"""AdvancedMotion.rtdll Ver.3.5.0.0 is required to use."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""AdvancedMotion.rtdll Ver.3.5.0.0 is required to use.AdvancedMotion.rtdll Ver.3.5.0.0 is required to use."""
        _WMX3ApiPython.AdvancedMotion_swiginit(self, _WMX3ApiPython.new_AdvancedMotion(*args))
    __swig_destroy__ = _WMX3ApiPython.delete_AdvancedMotion

    @staticmethod
    def ErrorToString(errCode):
        return _WMX3ApiPython.AdvancedMotion_ErrorToString(errCode)

    @staticmethod
    def ApiLogToString(pLogData, logDataSize):
        return _WMX3ApiPython.AdvancedMotion_ApiLogToString(pLogData, logDataSize)

    @staticmethod
    def GetLibVersion():
        return _WMX3ApiPython.AdvancedMotion_GetLibVersion()

    def IsDeviceValid(self):
        return _WMX3ApiPython.AdvancedMotion_IsDeviceValid(self)

    def GetVersion(self):
        return _WMX3ApiPython.AdvancedMotion_GetVersion(self)
    advMotion = property(_WMX3ApiPython.AdvancedMotion_advMotion_get, _WMX3ApiPython.AdvancedMotion_advMotion_set)
    advSync = property(_WMX3ApiPython.AdvancedMotion_advSync_get, _WMX3ApiPython.AdvancedMotion_advSync_set)
    advVelocity = property(_WMX3ApiPython.AdvancedMotion_advVelocity_get, _WMX3ApiPython.AdvancedMotion_advVelocity_set)

# Register AdvancedMotion in _WMX3ApiPython:
_WMX3ApiPython.AdvancedMotion_swigregister(AdvancedMotion)
class UserMemoryErrorCode(ErrorCode):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    CurrentlyReallocatingUserMemory = _WMX3ApiPython.UserMemoryErrorCode_CurrentlyReallocatingUserMemory
    FailedToReallocateUserMemory = _WMX3ApiPython.UserMemoryErrorCode_FailedToReallocateUserMemory
    UserMemoryCountOutOfRange = _WMX3ApiPython.UserMemoryErrorCode_UserMemoryCountOutOfRange
    SharedMemoryNull = _WMX3ApiPython.UserMemoryErrorCode_SharedMemoryNull

    def __init__(self):
        _WMX3ApiPython.UserMemoryErrorCode_swiginit(self, _WMX3ApiPython.new_UserMemoryErrorCode())
    __swig_destroy__ = _WMX3ApiPython.delete_UserMemoryErrorCode

# Register UserMemoryErrorCode in _WMX3ApiPython:
_WMX3ApiPython.UserMemoryErrorCode_swigregister(UserMemoryErrorCode)
class BaseUserMemoryEventInputFunctionArguments_MSingle(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    byteAddress = property(_WMX3ApiPython.BaseUserMemoryEventInputFunctionArguments_MSingle_byteAddress_get, _WMX3ApiPython.BaseUserMemoryEventInputFunctionArguments_MSingle_byteAddress_set)
    bitAddress = property(_WMX3ApiPython.BaseUserMemoryEventInputFunctionArguments_MSingle_bitAddress_get, _WMX3ApiPython.BaseUserMemoryEventInputFunctionArguments_MSingle_bitAddress_set)
    invert = property(_WMX3ApiPython.BaseUserMemoryEventInputFunctionArguments_MSingle_invert_get, _WMX3ApiPython.BaseUserMemoryEventInputFunctionArguments_MSingle_invert_set)

    def __init__(self):
        _WMX3ApiPython.BaseUserMemoryEventInputFunctionArguments_MSingle_swiginit(self, _WMX3ApiPython.new_BaseUserMemoryEventInputFunctionArguments_MSingle())
    __swig_destroy__ = _WMX3ApiPython.delete_BaseUserMemoryEventInputFunctionArguments_MSingle

# Register BaseUserMemoryEventInputFunctionArguments_MSingle in _WMX3ApiPython:
_WMX3ApiPython.BaseUserMemoryEventInputFunctionArguments_MSingle_swigregister(BaseUserMemoryEventInputFunctionArguments_MSingle)
class BaseUserMemoryEventInputFunctionArguments_MMulti(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    byteAddress = property(_WMX3ApiPython.BaseUserMemoryEventInputFunctionArguments_MMulti_byteAddress_get, _WMX3ApiPython.BaseUserMemoryEventInputFunctionArguments_MMulti_byteAddress_set)
    bitAddress = property(_WMX3ApiPython.BaseUserMemoryEventInputFunctionArguments_MMulti_bitAddress_get, _WMX3ApiPython.BaseUserMemoryEventInputFunctionArguments_MMulti_bitAddress_set)
    invert = property(_WMX3ApiPython.BaseUserMemoryEventInputFunctionArguments_MMulti_invert_get, _WMX3ApiPython.BaseUserMemoryEventInputFunctionArguments_MMulti_invert_set)

    def SetBitAddress(self, index, value):
        return _WMX3ApiPython.BaseUserMemoryEventInputFunctionArguments_MMulti_SetBitAddress(self, index, value)

    def GetBitAddress(self, index):
        return _WMX3ApiPython.BaseUserMemoryEventInputFunctionArguments_MMulti_GetBitAddress(self, index)

    def SetByteAddress(self, index, value):
        return _WMX3ApiPython.BaseUserMemoryEventInputFunctionArguments_MMulti_SetByteAddress(self, index, value)

    def GetByteAddress(self, index):
        return _WMX3ApiPython.BaseUserMemoryEventInputFunctionArguments_MMulti_GetByteAddress(self, index)

    def SetInvert(self, index, value):
        return _WMX3ApiPython.BaseUserMemoryEventInputFunctionArguments_MMulti_SetInvert(self, index, value)

    def GetInvert(self, index):
        return _WMX3ApiPython.BaseUserMemoryEventInputFunctionArguments_MMulti_GetInvert(self, index)

    def __init__(self):
        _WMX3ApiPython.BaseUserMemoryEventInputFunctionArguments_MMulti_swiginit(self, _WMX3ApiPython.new_BaseUserMemoryEventInputFunctionArguments_MMulti())
    __swig_destroy__ = _WMX3ApiPython.delete_BaseUserMemoryEventInputFunctionArguments_MMulti

# Register BaseUserMemoryEventInputFunctionArguments_MMulti in _WMX3ApiPython:
_WMX3ApiPython.BaseUserMemoryEventInputFunctionArguments_MMulti_swigregister(BaseUserMemoryEventInputFunctionArguments_MMulti)
class BaseUserMemoryEventInputFunctionArguments_MBytes(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    byteAddress = property(_WMX3ApiPython.BaseUserMemoryEventInputFunctionArguments_MBytes_byteAddress_get, _WMX3ApiPython.BaseUserMemoryEventInputFunctionArguments_MBytes_byteAddress_set)
    size = property(_WMX3ApiPython.BaseUserMemoryEventInputFunctionArguments_MBytes_size_get, _WMX3ApiPython.BaseUserMemoryEventInputFunctionArguments_MBytes_size_set)
    value = property(_WMX3ApiPython.BaseUserMemoryEventInputFunctionArguments_MBytes_value_get, _WMX3ApiPython.BaseUserMemoryEventInputFunctionArguments_MBytes_value_set)
    invert = property(_WMX3ApiPython.BaseUserMemoryEventInputFunctionArguments_MBytes_invert_get, _WMX3ApiPython.BaseUserMemoryEventInputFunctionArguments_MBytes_invert_set)

    def __init__(self):
        _WMX3ApiPython.BaseUserMemoryEventInputFunctionArguments_MBytes_swiginit(self, _WMX3ApiPython.new_BaseUserMemoryEventInputFunctionArguments_MBytes())
    __swig_destroy__ = _WMX3ApiPython.delete_BaseUserMemoryEventInputFunctionArguments_MBytes

# Register BaseUserMemoryEventInputFunctionArguments_MBytes in _WMX3ApiPython:
_WMX3ApiPython.BaseUserMemoryEventInputFunctionArguments_MBytes_swigregister(BaseUserMemoryEventInputFunctionArguments_MBytes)
class UserMemoryEventInputFunctionArguments_MBit(BaseUserMemoryEventInputFunctionArguments_MSingle):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _WMX3ApiPython.UserMemoryEventInputFunctionArguments_MBit_swiginit(self, _WMX3ApiPython.new_UserMemoryEventInputFunctionArguments_MBit())
    __swig_destroy__ = _WMX3ApiPython.delete_UserMemoryEventInputFunctionArguments_MBit

# Register UserMemoryEventInputFunctionArguments_MBit in _WMX3ApiPython:
_WMX3ApiPython.UserMemoryEventInputFunctionArguments_MBit_swigregister(UserMemoryEventInputFunctionArguments_MBit)
class UserMemoryEventInputFunctionArguments_NotMBit(BaseUserMemoryEventInputFunctionArguments_MSingle):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _WMX3ApiPython.UserMemoryEventInputFunctionArguments_NotMBit_swiginit(self, _WMX3ApiPython.new_UserMemoryEventInputFunctionArguments_NotMBit())
    __swig_destroy__ = _WMX3ApiPython.delete_UserMemoryEventInputFunctionArguments_NotMBit

# Register UserMemoryEventInputFunctionArguments_NotMBit in _WMX3ApiPython:
_WMX3ApiPython.UserMemoryEventInputFunctionArguments_NotMBit_swigregister(UserMemoryEventInputFunctionArguments_NotMBit)
class UserMemoryEventInputFunctionArguments_OrMBit(BaseUserMemoryEventInputFunctionArguments_MMulti):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _WMX3ApiPython.UserMemoryEventInputFunctionArguments_OrMBit_swiginit(self, _WMX3ApiPython.new_UserMemoryEventInputFunctionArguments_OrMBit())
    __swig_destroy__ = _WMX3ApiPython.delete_UserMemoryEventInputFunctionArguments_OrMBit

# Register UserMemoryEventInputFunctionArguments_OrMBit in _WMX3ApiPython:
_WMX3ApiPython.UserMemoryEventInputFunctionArguments_OrMBit_swigregister(UserMemoryEventInputFunctionArguments_OrMBit)
class UserMemoryEventInputFunctionArguments_AndMBit(BaseUserMemoryEventInputFunctionArguments_MMulti):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _WMX3ApiPython.UserMemoryEventInputFunctionArguments_AndMBit_swiginit(self, _WMX3ApiPython.new_UserMemoryEventInputFunctionArguments_AndMBit())
    __swig_destroy__ = _WMX3ApiPython.delete_UserMemoryEventInputFunctionArguments_AndMBit

# Register UserMemoryEventInputFunctionArguments_AndMBit in _WMX3ApiPython:
_WMX3ApiPython.UserMemoryEventInputFunctionArguments_AndMBit_swigregister(UserMemoryEventInputFunctionArguments_AndMBit)
class UserMemoryEventInputFunctionArguments_XorMBit(BaseUserMemoryEventInputFunctionArguments_MMulti):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _WMX3ApiPython.UserMemoryEventInputFunctionArguments_XorMBit_swiginit(self, _WMX3ApiPython.new_UserMemoryEventInputFunctionArguments_XorMBit())
    __swig_destroy__ = _WMX3ApiPython.delete_UserMemoryEventInputFunctionArguments_XorMBit

# Register UserMemoryEventInputFunctionArguments_XorMBit in _WMX3ApiPython:
_WMX3ApiPython.UserMemoryEventInputFunctionArguments_XorMBit_swigregister(UserMemoryEventInputFunctionArguments_XorMBit)
class UserMemoryEventInputFunctionArguments_NandMBit(BaseUserMemoryEventInputFunctionArguments_MMulti):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _WMX3ApiPython.UserMemoryEventInputFunctionArguments_NandMBit_swiginit(self, _WMX3ApiPython.new_UserMemoryEventInputFunctionArguments_NandMBit())
    __swig_destroy__ = _WMX3ApiPython.delete_UserMemoryEventInputFunctionArguments_NandMBit

# Register UserMemoryEventInputFunctionArguments_NandMBit in _WMX3ApiPython:
_WMX3ApiPython.UserMemoryEventInputFunctionArguments_NandMBit_swigregister(UserMemoryEventInputFunctionArguments_NandMBit)
class UserMemoryEventInputFunctionArguments_NorMBit(BaseUserMemoryEventInputFunctionArguments_MMulti):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _WMX3ApiPython.UserMemoryEventInputFunctionArguments_NorMBit_swiginit(self, _WMX3ApiPython.new_UserMemoryEventInputFunctionArguments_NorMBit())
    __swig_destroy__ = _WMX3ApiPython.delete_UserMemoryEventInputFunctionArguments_NorMBit

# Register UserMemoryEventInputFunctionArguments_NorMBit in _WMX3ApiPython:
_WMX3ApiPython.UserMemoryEventInputFunctionArguments_NorMBit_swigregister(UserMemoryEventInputFunctionArguments_NorMBit)
class UserMemoryEventInputFunctionArguments_XnorMBit(BaseUserMemoryEventInputFunctionArguments_MMulti):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _WMX3ApiPython.UserMemoryEventInputFunctionArguments_XnorMBit_swiginit(self, _WMX3ApiPython.new_UserMemoryEventInputFunctionArguments_XnorMBit())
    __swig_destroy__ = _WMX3ApiPython.delete_UserMemoryEventInputFunctionArguments_XnorMBit

# Register UserMemoryEventInputFunctionArguments_XnorMBit in _WMX3ApiPython:
_WMX3ApiPython.UserMemoryEventInputFunctionArguments_XnorMBit_swigregister(UserMemoryEventInputFunctionArguments_XnorMBit)
class UserMemoryEventInputFunctionArguments_DelayMBit(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    byteAddress = property(_WMX3ApiPython.UserMemoryEventInputFunctionArguments_DelayMBit_byteAddress_get, _WMX3ApiPython.UserMemoryEventInputFunctionArguments_DelayMBit_byteAddress_set)
    bitAddress = property(_WMX3ApiPython.UserMemoryEventInputFunctionArguments_DelayMBit_bitAddress_get, _WMX3ApiPython.UserMemoryEventInputFunctionArguments_DelayMBit_bitAddress_set)
    invert = property(_WMX3ApiPython.UserMemoryEventInputFunctionArguments_DelayMBit_invert_get, _WMX3ApiPython.UserMemoryEventInputFunctionArguments_DelayMBit_invert_set)
    delayTime = property(_WMX3ApiPython.UserMemoryEventInputFunctionArguments_DelayMBit_delayTime_get, _WMX3ApiPython.UserMemoryEventInputFunctionArguments_DelayMBit_delayTime_set)

    def __init__(self):
        _WMX3ApiPython.UserMemoryEventInputFunctionArguments_DelayMBit_swiginit(self, _WMX3ApiPython.new_UserMemoryEventInputFunctionArguments_DelayMBit())
    __swig_destroy__ = _WMX3ApiPython.delete_UserMemoryEventInputFunctionArguments_DelayMBit

# Register UserMemoryEventInputFunctionArguments_DelayMBit in _WMX3ApiPython:
_WMX3ApiPython.UserMemoryEventInputFunctionArguments_DelayMBit_swigregister(UserMemoryEventInputFunctionArguments_DelayMBit)
class UserMemoryEventInputFunctionArguments_EqualMBytes(BaseUserMemoryEventInputFunctionArguments_MBytes):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _WMX3ApiPython.UserMemoryEventInputFunctionArguments_EqualMBytes_swiginit(self, _WMX3ApiPython.new_UserMemoryEventInputFunctionArguments_EqualMBytes())
    __swig_destroy__ = _WMX3ApiPython.delete_UserMemoryEventInputFunctionArguments_EqualMBytes

# Register UserMemoryEventInputFunctionArguments_EqualMBytes in _WMX3ApiPython:
_WMX3ApiPython.UserMemoryEventInputFunctionArguments_EqualMBytes_swigregister(UserMemoryEventInputFunctionArguments_EqualMBytes)
class UserMemoryEventInputFunctionArguments_GreaterMBytes(BaseUserMemoryEventInputFunctionArguments_MBytes):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    isSigned = property(_WMX3ApiPython.UserMemoryEventInputFunctionArguments_GreaterMBytes_isSigned_get, _WMX3ApiPython.UserMemoryEventInputFunctionArguments_GreaterMBytes_isSigned_set)

    def __init__(self):
        _WMX3ApiPython.UserMemoryEventInputFunctionArguments_GreaterMBytes_swiginit(self, _WMX3ApiPython.new_UserMemoryEventInputFunctionArguments_GreaterMBytes())
    __swig_destroy__ = _WMX3ApiPython.delete_UserMemoryEventInputFunctionArguments_GreaterMBytes

# Register UserMemoryEventInputFunctionArguments_GreaterMBytes in _WMX3ApiPython:
_WMX3ApiPython.UserMemoryEventInputFunctionArguments_GreaterMBytes_swigregister(UserMemoryEventInputFunctionArguments_GreaterMBytes)
class UserMemoryEventInputFunctionArguments_LessMBytes(BaseUserMemoryEventInputFunctionArguments_MBytes):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    isSigned = property(_WMX3ApiPython.UserMemoryEventInputFunctionArguments_LessMBytes_isSigned_get, _WMX3ApiPython.UserMemoryEventInputFunctionArguments_LessMBytes_isSigned_set)

    def __init__(self):
        _WMX3ApiPython.UserMemoryEventInputFunctionArguments_LessMBytes_swiginit(self, _WMX3ApiPython.new_UserMemoryEventInputFunctionArguments_LessMBytes())
    __swig_destroy__ = _WMX3ApiPython.delete_UserMemoryEventInputFunctionArguments_LessMBytes

# Register UserMemoryEventInputFunctionArguments_LessMBytes in _WMX3ApiPython:
_WMX3ApiPython.UserMemoryEventInputFunctionArguments_LessMBytes_swigregister(UserMemoryEventInputFunctionArguments_LessMBytes)
class UserMemoryEventInputType(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    MBit = _WMX3ApiPython.UserMemoryEventInputType_MBit
    NotMBit = _WMX3ApiPython.UserMemoryEventInputType_NotMBit
    OrMBit = _WMX3ApiPython.UserMemoryEventInputType_OrMBit
    AndMBit = _WMX3ApiPython.UserMemoryEventInputType_AndMBit
    XorMBit = _WMX3ApiPython.UserMemoryEventInputType_XorMBit
    NandMBit = _WMX3ApiPython.UserMemoryEventInputType_NandMBit
    NorMBit = _WMX3ApiPython.UserMemoryEventInputType_NorMBit
    XnorMBit = _WMX3ApiPython.UserMemoryEventInputType_XnorMBit
    DelayMBit = _WMX3ApiPython.UserMemoryEventInputType_DelayMBit
    EqualMBytes = _WMX3ApiPython.UserMemoryEventInputType_EqualMBytes
    GreaterMBytes = _WMX3ApiPython.UserMemoryEventInputType_GreaterMBytes
    LessMBytes = _WMX3ApiPython.UserMemoryEventInputType_LessMBytes

    def __init__(self):
        _WMX3ApiPython.UserMemoryEventInputType_swiginit(self, _WMX3ApiPython.new_UserMemoryEventInputType())
    __swig_destroy__ = _WMX3ApiPython.delete_UserMemoryEventInputType

# Register UserMemoryEventInputType in _WMX3ApiPython:
_WMX3ApiPython.UserMemoryEventInputType_swigregister(UserMemoryEventInputType)
class UserMemoryEventInput(EventInput):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _WMX3ApiPython.UserMemoryEventInput_swiginit(self, _WMX3ApiPython.new_UserMemoryEventInput())

    def GetInputModuleId(self):
        return _WMX3ApiPython.UserMemoryEventInput_GetInputModuleId(self)

    def GetInputData(self, buff, buffSize, dataSize, initialState):
        return _WMX3ApiPython.UserMemoryEventInput_GetInputData(self, buff, buffSize, dataSize, initialState)

    def SetInputData(self, moduleId, data, dataSize):
        return _WMX3ApiPython.UserMemoryEventInput_SetInputData(self, moduleId, data, dataSize)
    type = property(_WMX3ApiPython.UserMemoryEventInput_type_get, _WMX3ApiPython.UserMemoryEventInput_type_set)
    mBit = property(_WMX3ApiPython.UserMemoryEventInput_mBit_get, _WMX3ApiPython.UserMemoryEventInput_mBit_set)
    notMBit = property(_WMX3ApiPython.UserMemoryEventInput_notMBit_get, _WMX3ApiPython.UserMemoryEventInput_notMBit_set)
    orMBit = property(_WMX3ApiPython.UserMemoryEventInput_orMBit_get, _WMX3ApiPython.UserMemoryEventInput_orMBit_set)
    andMBit = property(_WMX3ApiPython.UserMemoryEventInput_andMBit_get, _WMX3ApiPython.UserMemoryEventInput_andMBit_set)
    xorMBit = property(_WMX3ApiPython.UserMemoryEventInput_xorMBit_get, _WMX3ApiPython.UserMemoryEventInput_xorMBit_set)
    nandMBit = property(_WMX3ApiPython.UserMemoryEventInput_nandMBit_get, _WMX3ApiPython.UserMemoryEventInput_nandMBit_set)
    norMBit = property(_WMX3ApiPython.UserMemoryEventInput_norMBit_get, _WMX3ApiPython.UserMemoryEventInput_norMBit_set)
    xnorMBit = property(_WMX3ApiPython.UserMemoryEventInput_xnorMBit_get, _WMX3ApiPython.UserMemoryEventInput_xnorMBit_set)
    delayMBit = property(_WMX3ApiPython.UserMemoryEventInput_delayMBit_get, _WMX3ApiPython.UserMemoryEventInput_delayMBit_set)
    equalMBytes = property(_WMX3ApiPython.UserMemoryEventInput_equalMBytes_get, _WMX3ApiPython.UserMemoryEventInput_equalMBytes_set)
    greaterMBytes = property(_WMX3ApiPython.UserMemoryEventInput_greaterMBytes_get, _WMX3ApiPython.UserMemoryEventInput_greaterMBytes_set)
    lessMBytes = property(_WMX3ApiPython.UserMemoryEventInput_lessMBytes_get, _WMX3ApiPython.UserMemoryEventInput_lessMBytes_set)
    __swig_destroy__ = _WMX3ApiPython.delete_UserMemoryEventInput

# Register UserMemoryEventInput in _WMX3ApiPython:
_WMX3ApiPython.UserMemoryEventInput_swigregister(UserMemoryEventInput)
class UserMemoryEventOutputFunctionArguments_SetMBit(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    byteAddress = property(_WMX3ApiPython.UserMemoryEventOutputFunctionArguments_SetMBit_byteAddress_get, _WMX3ApiPython.UserMemoryEventOutputFunctionArguments_SetMBit_byteAddress_set)
    bitAddress = property(_WMX3ApiPython.UserMemoryEventOutputFunctionArguments_SetMBit_bitAddress_get, _WMX3ApiPython.UserMemoryEventOutputFunctionArguments_SetMBit_bitAddress_set)
    invert = property(_WMX3ApiPython.UserMemoryEventOutputFunctionArguments_SetMBit_invert_get, _WMX3ApiPython.UserMemoryEventOutputFunctionArguments_SetMBit_invert_set)
    setOffState = property(_WMX3ApiPython.UserMemoryEventOutputFunctionArguments_SetMBit_setOffState_get, _WMX3ApiPython.UserMemoryEventOutputFunctionArguments_SetMBit_setOffState_set)

    def __init__(self):
        _WMX3ApiPython.UserMemoryEventOutputFunctionArguments_SetMBit_swiginit(self, _WMX3ApiPython.new_UserMemoryEventOutputFunctionArguments_SetMBit())
    __swig_destroy__ = _WMX3ApiPython.delete_UserMemoryEventOutputFunctionArguments_SetMBit

# Register UserMemoryEventOutputFunctionArguments_SetMBit in _WMX3ApiPython:
_WMX3ApiPython.UserMemoryEventOutputFunctionArguments_SetMBit_swigregister(UserMemoryEventOutputFunctionArguments_SetMBit)
class UserMemoryEventOutputType(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    SetMBit = _WMX3ApiPython.UserMemoryEventOutputType_SetMBit

    def __init__(self):
        _WMX3ApiPython.UserMemoryEventOutputType_swiginit(self, _WMX3ApiPython.new_UserMemoryEventOutputType())
    __swig_destroy__ = _WMX3ApiPython.delete_UserMemoryEventOutputType

# Register UserMemoryEventOutputType in _WMX3ApiPython:
_WMX3ApiPython.UserMemoryEventOutputType_swigregister(UserMemoryEventOutputType)
class UserMemoryEventOutput(EventOutput):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _WMX3ApiPython.UserMemoryEventOutput_swiginit(self, _WMX3ApiPython.new_UserMemoryEventOutput())

    def GetOutputModuleId(self):
        return _WMX3ApiPython.UserMemoryEventOutput_GetOutputModuleId(self)

    def GetOutputData(self, buff, buffSize, dataSize):
        return _WMX3ApiPython.UserMemoryEventOutput_GetOutputData(self, buff, buffSize, dataSize)

    def SetOutputData(self, moduleId, data, dataSize):
        return _WMX3ApiPython.UserMemoryEventOutput_SetOutputData(self, moduleId, data, dataSize)
    type = property(_WMX3ApiPython.UserMemoryEventOutput_type_get, _WMX3ApiPython.UserMemoryEventOutput_type_set)
    setMBit = property(_WMX3ApiPython.UserMemoryEventOutput_setMBit_get, _WMX3ApiPython.UserMemoryEventOutput_setMBit_set)
    __swig_destroy__ = _WMX3ApiPython.delete_UserMemoryEventOutput

# Register UserMemoryEventOutput in _WMX3ApiPython:
_WMX3ApiPython.UserMemoryEventOutput_swigregister(UserMemoryEventOutput)
class UserMemoryLogInput(LogInput):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def SetData(self, pUserMemoryLogInput):
        return _WMX3ApiPython.UserMemoryLogInput_SetData(self, pUserMemoryLogInput)

    def GetData(self, pUserMemoryLogInput):
        return _WMX3ApiPython.UserMemoryLogInput_GetData(self, pUserMemoryLogInput)

    def __init__(self):
        _WMX3ApiPython.UserMemoryLogInput_swiginit(self, _WMX3ApiPython.new_UserMemoryLogInput())

    def GetModuleId(self):
        return _WMX3ApiPython.UserMemoryLogInput_GetModuleId(self)

    def GetInputData(self, buff, buffSize, dataSize):
        return _WMX3ApiPython.UserMemoryLogInput_GetInputData(self, buff, buffSize, dataSize)

    def SetInputData(self, moduleId, data, dataSize):
        return _WMX3ApiPython.UserMemoryLogInput_SetInputData(self, moduleId, data, dataSize)

    def GetLogInput(self):
        return _WMX3ApiPython.UserMemoryLogInput_GetLogInput(self)
    mAddress = property(_WMX3ApiPython.UserMemoryLogInput_mAddress_get, _WMX3ApiPython.UserMemoryLogInput_mAddress_set)

    def SetMAddress(self, index, value):
        return _WMX3ApiPython.UserMemoryLogInput_SetMAddress(self, index, value)

    def GetMAddress(self, index):
        return _WMX3ApiPython.UserMemoryLogInput_GetMAddress(self, index)
    mAddressSize = property(_WMX3ApiPython.UserMemoryLogInput_mAddressSize_get, _WMX3ApiPython.UserMemoryLogInput_mAddressSize_set)
    mLogFormat = property(_WMX3ApiPython.UserMemoryLogInput_mLogFormat_get, _WMX3ApiPython.UserMemoryLogInput_mLogFormat_set)

    def SetMLogFormat(self, index, value):
        return _WMX3ApiPython.UserMemoryLogInput_SetMLogFormat(self, index, value)

    def GetMLogFormat(self, index):
        return _WMX3ApiPython.UserMemoryLogInput_GetMLogFormat(self, index)
    mFormatCount = property(_WMX3ApiPython.UserMemoryLogInput_mFormatCount_get, _WMX3ApiPython.UserMemoryLogInput_mFormatCount_set)
    __swig_destroy__ = _WMX3ApiPython.delete_UserMemoryLogInput

# Register UserMemoryLogInput in _WMX3ApiPython:
_WMX3ApiPython.UserMemoryLogInput_swigregister(UserMemoryLogInput)
class UserMemoryLogOutput(LogOutput):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _WMX3ApiPython.UserMemoryLogOutput_swiginit(self, _WMX3ApiPython.new_UserMemoryLogOutput())

    def GetModuleId(self):
        return _WMX3ApiPython.UserMemoryLogOutput_GetModuleId(self)

    def GetLogOutput(self):
        return _WMX3ApiPython.UserMemoryLogOutput_GetLogOutput(self)

    def SetLogOutput(self, src):
        return _WMX3ApiPython.UserMemoryLogOutput_SetLogOutput(self, src)
    data = property(_WMX3ApiPython.UserMemoryLogOutput_data_get, _WMX3ApiPython.UserMemoryLogOutput_data_set)

    def SetData(self, index1, index2, value):
        return _WMX3ApiPython.UserMemoryLogOutput_SetData(self, index1, index2, value)

    def GetData(self, index1, index2):
        return _WMX3ApiPython.UserMemoryLogOutput_GetData(self, index1, index2)
    __swig_destroy__ = _WMX3ApiPython.delete_UserMemoryLogOutput

# Register UserMemoryLogOutput in _WMX3ApiPython:
_WMX3ApiPython.UserMemoryLogOutput_swigregister(UserMemoryLogOutput)
class UserMemory(object):
    r"""UserMemory.rtdll Ver.3.5.0.0 is required to use."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""UserMemory.rtdll Ver.3.5.0.0 is required to use.UserMemory.rtdll Ver.3.5.0.0 is required to use."""
        _WMX3ApiPython.UserMemory_swiginit(self, _WMX3ApiPython.new_UserMemory(*args))
    __swig_destroy__ = _WMX3ApiPython.delete_UserMemory

    @staticmethod
    def ErrorToString(errCode):
        return _WMX3ApiPython.UserMemory_ErrorToString(errCode)

    @staticmethod
    def ApiLogToString(pLogData, logDataSize):
        return _WMX3ApiPython.UserMemory_ApiLogToString(pLogData, logDataSize)

    @staticmethod
    def GetLibVersion():
        return _WMX3ApiPython.UserMemory_GetLibVersion()

    def IsDeviceValid(self):
        return _WMX3ApiPython.UserMemory_IsDeviceValid(self)

    def GetVersion(self):
        return _WMX3ApiPython.UserMemory_GetVersion(self)

    def SetMBit(self, addr, bit, data):
        return _WMX3ApiPython.UserMemory_SetMBit(self, addr, bit, data)

    def SetMByte(self, addr, data):
        return _WMX3ApiPython.UserMemory_SetMByte(self, addr, data)

    def SetMBytes(self, addr, size, pData):
        return _WMX3ApiPython.UserMemory_SetMBytes(self, addr, size, pData)

    def SetMBits(self, pAddr, pBit, pData, count):
        return _WMX3ApiPython.UserMemory_SetMBits(self, pAddr, pBit, pData, count)

    def SetMAnalogDataChar(self, addr, analogData):
        return _WMX3ApiPython.UserMemory_SetMAnalogDataChar(self, addr, analogData)

    def SetMAnalogDataUChar(self, addr, analogData):
        return _WMX3ApiPython.UserMemory_SetMAnalogDataUChar(self, addr, analogData)

    def SetMAnalogDataShort(self, addr, analogData):
        return _WMX3ApiPython.UserMemory_SetMAnalogDataShort(self, addr, analogData)

    def SetMAnalogDataUShort(self, addr, analogData):
        return _WMX3ApiPython.UserMemory_SetMAnalogDataUShort(self, addr, analogData)

    def SetMAnalogDataInt(self, addr, analogData):
        return _WMX3ApiPython.UserMemory_SetMAnalogDataInt(self, addr, analogData)

    def SetMAnalogDataUInt(self, addr, analogData):
        return _WMX3ApiPython.UserMemory_SetMAnalogDataUInt(self, addr, analogData)

    def GetMBit(self, bit, addr):
        dataPtr = uintp()
        ret = _WMX3ApiPython.UserMemory_GetMBit(self, addr, bit, dataPtr)
        if ret == 0:
            return ret, dataPtr.value()
        else:
            return ret, 0



    def GetMByte(self, addr):
        dataPtr = uintp()
        ret = _WMX3ApiPython.UserMemory_GetMByte(self, addr, dataPtr)
        if ret == 0:
            return ret, dataPtr.value()
        else:
            return ret, 0



    def GetMBytes(self, addr, size):
        dataList = []
        dataArray = uintArray(size)
        ret = _WMX3ApiPython.UserMemory_GetMBytes(self, addr, size, dataArray)
        if ret == 0:
            for i in range(size):
                dataList.append(dataArray[i])
            return ret, dataList
        else:
            return ret, []



    def GetMAnalogDataChar(self, addr):
        dataPtr = intp()
        ret = _WMX3ApiPython.UserMemory_GetMAnalogDataChar(self, addr, dataPtr)
        if ret == 0:
            return ret, dataPtr.value()
        else:
            return ret, 0



    def GetMAnalogDataUChar(self, addr):
        dataPtr = uintp()
        ret = _WMX3ApiPython.UserMemory_GetMAnalogDataUChar(self, addr, dataPtr)
        if ret == 0:
            return ret, dataPtr.value()
        else:
            return ret, 0



    def GetMAnalogDataShort(self, addr):
        dataPtr = intp()
        ret = _WMX3ApiPython.UserMemory_GetMAnalogDataShort(self, addr, dataPtr)
        if ret == 0:
            return ret, dataPtr.value()
        else:
            return ret, 0



    def GetMAnalogDataUShort(self, addr):
        dataPtr = uintp()
        ret = _WMX3ApiPython.UserMemory_GetMAnalogDataUShort(self, addr, dataPtr)
        if ret == 0:
            return ret, dataPtr.value()
        else:
            return ret, 0



    def GetMAnalogDataInt(self, addr):
        dataPtr = intp()
        ret = _WMX3ApiPython.UserMemory_GetMAnalogDataInt(self, addr, dataPtr)
        if ret == 0:
            return ret, dataPtr.value()
        else:
            return ret, 0



    def GetMAnalogDataUInt(self, addr):
        dataPtr = uintp()
        ret = _WMX3ApiPython.UserMemory_GetMAnalogDataUInt(self, addr, dataPtr)
        if ret == 0:
            return ret, dataPtr.value()
        else:
            return ret, 0



    def SetMBitEx(self, addr, bit, data):
        return _WMX3ApiPython.UserMemory_SetMBitEx(self, addr, bit, data)

    def SetMByteEx(self, addr, data):
        return _WMX3ApiPython.UserMemory_SetMByteEx(self, addr, data)

    def SetMBytesEx(self, addr, size, pData):
        return _WMX3ApiPython.UserMemory_SetMBytesEx(self, addr, size, pData)

    def SetMBitsEx(self, pAddr, pBit, pData, count):
        return _WMX3ApiPython.UserMemory_SetMBitsEx(self, pAddr, pBit, pData, count)

    def SetMAnalogDataCharEx(self, addr, analogData):
        return _WMX3ApiPython.UserMemory_SetMAnalogDataCharEx(self, addr, analogData)

    def SetMAnalogDataUCharEx(self, addr, analogData):
        return _WMX3ApiPython.UserMemory_SetMAnalogDataUCharEx(self, addr, analogData)

    def SetMAnalogDataShortEx(self, addr, analogData):
        return _WMX3ApiPython.UserMemory_SetMAnalogDataShortEx(self, addr, analogData)

    def SetMAnalogDataUShortEx(self, addr, analogData):
        return _WMX3ApiPython.UserMemory_SetMAnalogDataUShortEx(self, addr, analogData)

    def SetMAnalogDataIntEx(self, addr, analogData):
        return _WMX3ApiPython.UserMemory_SetMAnalogDataIntEx(self, addr, analogData)

    def SetMAnalogDataUIntEx(self, addr, analogData):
        return _WMX3ApiPython.UserMemory_SetMAnalogDataUIntEx(self, addr, analogData)

    def GetMBitEx(self, bit, addr):
        dataPtr = uintp()
        ret = _WMX3ApiPython.UserMemory_GetMBitEx(self, addr, bit, dataPtr)
        if ret == 0:
            return ret, dataPtr.value()
        else:
            return ret, 0



    def GetMByteEx(self, addr):
        dataPtr = uintp()
        ret = _WMX3ApiPython.UserMemory_GetMByteEx(self, addr, dataPtr)
        if ret == 0:
            return ret, dataPtr.value()
        else:
            return ret, 0



    def GetMBytesEx(self, addr, size):
        dataList = []
        dataArray = uintArray(size)
        ret = _WMX3ApiPython.UserMemory_GetMBytesEx(self, addr, size, dataArray)
        if ret == 0:
            for i in range(size):
                dataList.append(dataArray[i])
            return ret, dataList
        else:
            return ret, []



    def GetMAnalogDataCharEx(self, addr):
        dataPtr = intp()
        ret = _WMX3ApiPython.UserMemory_GetMAnalogDataCharEx(self, addr, dataPtr)
        if ret == 0:
            return ret, dataPtr.value()
        else:
            return ret, 0



    def GetMAnalogDataUCharEx(self, addr):
        dataPtr = uintp()
        ret = _WMX3ApiPython.UserMemory_GetMAnalogDataUCharEx(self, addr, dataPtr)
        if ret == 0:
            return ret, dataPtr.value()
        else:
            return ret, 0



    def GetMAnalogDataShortEx(self, addr):
        dataPtr = intp()
        ret = _WMX3ApiPython.UserMemory_GetMAnalogDataShortEx(self, addr, dataPtr)
        if ret == 0:
            return ret, dataPtr.value()
        else:
            return ret, 0



    def GetMAnalogDataUShortEx(self, addr):
        dataPtr = uintp()
        ret = _WMX3ApiPython.UserMemory_GetMAnalogDataUShortEx(self, addr, dataPtr)
        if ret == 0:
            return ret, dataPtr.value()
        else:
            return ret, 0



    def GetMAnalogDataIntEx(self, addr):
        dataPtr = intp()
        ret = _WMX3ApiPython.UserMemory_GetMAnalogDataIntEx(self, addr, dataPtr)
        if ret == 0:
            return ret, dataPtr.value()
        else:
            return ret, 0



    def GetMAnalogDataUIntEx(self, addr):
        dataPtr = uintp()
        ret = _WMX3ApiPython.UserMemory_GetMAnalogDataUIntEx(self, addr, dataPtr)
        if ret == 0:
            return ret, dataPtr.value()
        else:
            return ret, 0



# Register UserMemory in _WMX3ApiPython:
_WMX3ApiPython.UserMemory_swigregister(UserMemory)
class EcStateMachine(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    PyNone = _WMX3ApiPython.EcStateMachine_PyNone
    Init = _WMX3ApiPython.EcStateMachine_Init
    Preop = _WMX3ApiPython.EcStateMachine_Preop
    Boot = _WMX3ApiPython.EcStateMachine_Boot
    Safeop = _WMX3ApiPython.EcStateMachine_Safeop
    Op = _WMX3ApiPython.EcStateMachine_Op

    def __init__(self):
        _WMX3ApiPython.EcStateMachine_swiginit(self, _WMX3ApiPython.new_EcStateMachine())
    __swig_destroy__ = _WMX3ApiPython.delete_EcStateMachine

# Register EcStateMachine in _WMX3ApiPython:
_WMX3ApiPython.EcStateMachine_swigregister(EcStateMachine)
class EcSdoType(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Expedited = _WMX3ApiPython.EcSdoType_Expedited
    Normal = _WMX3ApiPython.EcSdoType_Normal

    def __init__(self):
        _WMX3ApiPython.EcSdoType_swiginit(self, _WMX3ApiPython.new_EcSdoType())
    __swig_destroy__ = _WMX3ApiPython.delete_EcSdoType

# Register EcSdoType in _WMX3ApiPython:
_WMX3ApiPython.EcSdoType_swigregister(EcSdoType)
class EcObjectDescriptionListType(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Len = _WMX3ApiPython.EcObjectDescriptionListType_Len
    AllObjects = _WMX3ApiPython.EcObjectDescriptionListType_AllObjects
    RxPdo = _WMX3ApiPython.EcObjectDescriptionListType_RxPdo
    TxPdo = _WMX3ApiPython.EcObjectDescriptionListType_TxPdo
    DevReplacement = _WMX3ApiPython.EcObjectDescriptionListType_DevReplacement
    Startup = _WMX3ApiPython.EcObjectDescriptionListType_Startup

    def __init__(self):
        _WMX3ApiPython.EcObjectDescriptionListType_swiginit(self, _WMX3ApiPython.new_EcObjectDescriptionListType())
    __swig_destroy__ = _WMX3ApiPython.delete_EcObjectDescriptionListType

# Register EcObjectDescriptionListType in _WMX3ApiPython:
_WMX3ApiPython.EcObjectDescriptionListType_swigregister(EcObjectDescriptionListType)
class EcHotconnectState(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Idle = _WMX3ApiPython.EcHotconnectState_Idle
    Running = _WMX3ApiPython.EcHotconnectState_Running
    Abort = _WMX3ApiPython.EcHotconnectState_Abort
    Unknown = _WMX3ApiPython.EcHotconnectState_Unknown

    def __init__(self):
        _WMX3ApiPython.EcHotconnectState_swiginit(self, _WMX3ApiPython.new_EcHotconnectState())
    __swig_destroy__ = _WMX3ApiPython.delete_EcHotconnectState

# Register EcHotconnectState in _WMX3ApiPython:
_WMX3ApiPython.EcHotconnectState_swigregister(EcHotconnectState)
class EcHotconnectAbortCode(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    PyNone = _WMX3ApiPython.EcHotconnectAbortCode_PyNone
    PortOpenError = _WMX3ApiPython.EcHotconnectAbortCode_PortOpenError
    Timeout = _WMX3ApiPython.EcHotconnectAbortCode_Timeout
    ScanNetworkFailed = _WMX3ApiPython.EcHotconnectAbortCode_ScanNetworkFailed
    ApplyNewTopologyError = _WMX3ApiPython.EcHotconnectAbortCode_ApplyNewTopologyError
    InitNewSlavesError = _WMX3ApiPython.EcHotconnectAbortCode_InitNewSlavesError
    RecalculateDcError = _WMX3ApiPython.EcHotconnectAbortCode_RecalculateDcError
    ClearDLEventError = _WMX3ApiPython.EcHotconnectAbortCode_ClearDLEventError
    Unknown = _WMX3ApiPython.EcHotconnectAbortCode_Unknown

    def __init__(self):
        _WMX3ApiPython.EcHotconnectAbortCode_swiginit(self, _WMX3ApiPython.new_EcHotconnectAbortCode())
    __swig_destroy__ = _WMX3ApiPython.delete_EcHotconnectAbortCode

# Register EcHotconnectAbortCode in _WMX3ApiPython:
_WMX3ApiPython.EcHotconnectAbortCode_swigregister(EcHotconnectAbortCode)
class EcOperationMode(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    NONE = _WMX3ApiPython.EcOperationMode_NONE
    PP = _WMX3ApiPython.EcOperationMode_PP
    VL = _WMX3ApiPython.EcOperationMode_VL
    PV = _WMX3ApiPython.EcOperationMode_PV
    TQ = _WMX3ApiPython.EcOperationMode_TQ
    HM = _WMX3ApiPython.EcOperationMode_HM
    IP = _WMX3ApiPython.EcOperationMode_IP
    CSP = _WMX3ApiPython.EcOperationMode_CSP
    CSV = _WMX3ApiPython.EcOperationMode_CSV
    CST = _WMX3ApiPython.EcOperationMode_CST
    CSTCA = _WMX3ApiPython.EcOperationMode_CSTCA
    Unknown = _WMX3ApiPython.EcOperationMode_Unknown

    def __init__(self):
        _WMX3ApiPython.EcOperationMode_swiginit(self, _WMX3ApiPython.new_EcOperationMode())
    __swig_destroy__ = _WMX3ApiPython.delete_EcOperationMode

# Register EcOperationMode in _WMX3ApiPython:
_WMX3ApiPython.EcOperationMode_swigregister(EcOperationMode)
class EcMasterMode(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    CyclicMode = _WMX3ApiPython.EcMasterMode_CyclicMode
    PPMode = _WMX3ApiPython.EcMasterMode_PPMode
    MonitorMode = _WMX3ApiPython.EcMasterMode_MonitorMode

    def __init__(self):
        _WMX3ApiPython.EcMasterMode_swiginit(self, _WMX3ApiPython.new_EcMasterMode())
    __swig_destroy__ = _WMX3ApiPython.delete_EcMasterMode

# Register EcMasterMode in _WMX3ApiPython:
_WMX3ApiPython.EcMasterMode_swigregister(EcMasterMode)
class EcErrorCode(ErrorCode):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    EcError = _WMX3ApiPython.EcErrorCode_EcError
    ScanNetworkFailed = _WMX3ApiPython.EcErrorCode_ScanNetworkFailed
    HotconnectFailed = _WMX3ApiPython.EcErrorCode_HotconnectFailed
    SharedMemoryNull = _WMX3ApiPython.EcErrorCode_SharedMemoryNull
    SlaveStateChangeError = _WMX3ApiPython.EcErrorCode_SlaveStateChangeError
    SlaveStateBelowPreop = _WMX3ApiPython.EcErrorCode_SlaveStateBelowPreop
    SlaveInvalidAddressingMode = _WMX3ApiPython.EcErrorCode_SlaveInvalidAddressingMode
    SlaveInEmergencyState = _WMX3ApiPython.EcErrorCode_SlaveInEmergencyState
    SlaveMailboxInUse = _WMX3ApiPython.EcErrorCode_SlaveMailboxInUse
    SlaveSdoDownloadError = _WMX3ApiPython.EcErrorCode_SlaveSdoDownloadError
    SlaveSdoUploadError = _WMX3ApiPython.EcErrorCode_SlaveSdoUploadError
    SlaveSdoInfoGetODListError = _WMX3ApiPython.EcErrorCode_SlaveSdoInfoGetODListError
    SlaveSdoInfoGetODError = _WMX3ApiPython.EcErrorCode_SlaveSdoInfoGetODError
    SlaveSdoInfoGetEDError = _WMX3ApiPython.EcErrorCode_SlaveSdoInfoGetEDError
    SlaveActualSizeLargerThanBufferSize = _WMX3ApiPython.EcErrorCode_SlaveActualSizeLargerThanBufferSize
    SlaveRegWriteError = _WMX3ApiPython.EcErrorCode_SlaveRegWriteError
    SlaveRegReadError = _WMX3ApiPython.EcErrorCode_SlaveRegReadError
    SlaveSIIWriteError = _WMX3ApiPython.EcErrorCode_SlaveSIIWriteError
    SlaveSIIWriteFailedToSetChecksum = _WMX3ApiPython.EcErrorCode_SlaveSIIWriteFailedToSetChecksum
    SlaveSIIReadError = _WMX3ApiPython.EcErrorCode_SlaveSIIReadError
    SlavePdoReadWriteNotAllowed = _WMX3ApiPython.EcErrorCode_SlavePdoReadWriteNotAllowed
    SlavePdoReadWriteTimeout = _WMX3ApiPython.EcErrorCode_SlavePdoReadWriteTimeout
    SlavePdoNotMapped = _WMX3ApiPython.EcErrorCode_SlavePdoNotMapped
    SlaveTxPdoWriteNotAllowed = _WMX3ApiPython.EcErrorCode_SlaveTxPdoWriteNotAllowed
    SlaveFoENotInBootState = _WMX3ApiPython.EcErrorCode_SlaveFoENotInBootState
    SlaveFoEFileOpenError = _WMX3ApiPython.EcErrorCode_SlaveFoEFileOpenError
    SlaveFoEReadError = _WMX3ApiPython.EcErrorCode_SlaveFoEReadError
    SlaveFoEWriteError = _WMX3ApiPython.EcErrorCode_SlaveFoEWriteError
    SlaveFoEFilePathTooLong = _WMX3ApiPython.EcErrorCode_SlaveFoEFilePathTooLong
    SlaveFoEFileNameTooLong = _WMX3ApiPython.EcErrorCode_SlaveFoEFileNameTooLong
    SlaveAoEReadError = _WMX3ApiPython.EcErrorCode_SlaveAoEReadError
    SlaveAoEWriteError = _WMX3ApiPython.EcErrorCode_SlaveAoEWriteError
    SlaveSoEReadError = _WMX3ApiPython.EcErrorCode_SlaveSoEReadError
    SlaveSoEWriteError = _WMX3ApiPython.EcErrorCode_SlaveSoEWriteError
    SlaveVoEReadError = _WMX3ApiPython.EcErrorCode_SlaveVoEReadError
    SlaveVoEWriteError = _WMX3ApiPython.EcErrorCode_SlaveVoEWriteError
    AxisNotServoOn = _WMX3ApiPython.EcErrorCode_AxisNotServoOn
    NotInPPMode = _WMX3ApiPython.EcErrorCode_NotInPPMode
    NotInHMMode = _WMX3ApiPython.EcErrorCode_NotInHMMode
    NotInPVMode = _WMX3ApiPython.EcErrorCode_NotInPVMode
    NotInTQMode = _WMX3ApiPython.EcErrorCode_NotInTQMode
    PdoNotMapped = _WMX3ApiPython.EcErrorCode_PdoNotMapped
    SlaveNotSupportVirtualSerial = _WMX3ApiPython.EcErrorCode_SlaveNotSupportVirtualSerial
    OpenComFailed = _WMX3ApiPython.EcErrorCode_OpenComFailed
    CreateComProcessThreadFailed = _WMX3ApiPython.EcErrorCode_CreateComProcessThreadFailed
    NotInMonitorMode = _WMX3ApiPython.EcErrorCode_NotInMonitorMode
    VirtualSlaveNotEnabled = _WMX3ApiPython.EcErrorCode_VirtualSlaveNotEnabled
    OtherOperationIsRunning = _WMX3ApiPython.EcErrorCode_OtherOperationIsRunning

    def __init__(self):
        _WMX3ApiPython.EcErrorCode_swiginit(self, _WMX3ApiPython.new_EcErrorCode())
    __swig_destroy__ = _WMX3ApiPython.delete_EcErrorCode

# Register EcErrorCode in _WMX3ApiPython:
_WMX3ApiPython.EcErrorCode_swigregister(EcErrorCode)
class EcLogInputPdo_DataType(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Signed = _WMX3ApiPython.EcLogInputPdo_DataType_Signed
    Unsigned = _WMX3ApiPython.EcLogInputPdo_DataType_Unsigned
    Hexadecimal = _WMX3ApiPython.EcLogInputPdo_DataType_Hexadecimal

    def __init__(self):
        _WMX3ApiPython.EcLogInputPdo_DataType_swiginit(self, _WMX3ApiPython.new_EcLogInputPdo_DataType())
    __swig_destroy__ = _WMX3ApiPython.delete_EcLogInputPdo_DataType

# Register EcLogInputPdo_DataType in _WMX3ApiPython:
_WMX3ApiPython.EcLogInputPdo_DataType_swigregister(EcLogInputPdo_DataType)
class EcLogInputPdo(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def SetData(self, ecLogInputPdo):
        return _WMX3ApiPython.EcLogInputPdo_SetData(self, ecLogInputPdo)

    def GetData(self, ecLogInputPdo):
        return _WMX3ApiPython.EcLogInputPdo_GetData(self, ecLogInputPdo)
    slaveId = property(_WMX3ApiPython.EcLogInputPdo_slaveId_get, _WMX3ApiPython.EcLogInputPdo_slaveId_set)
    type = property(_WMX3ApiPython.EcLogInputPdo_type_get, _WMX3ApiPython.EcLogInputPdo_type_set)
    index = property(_WMX3ApiPython.EcLogInputPdo_index_get, _WMX3ApiPython.EcLogInputPdo_index_set)
    subIndex = property(_WMX3ApiPython.EcLogInputPdo_subIndex_get, _WMX3ApiPython.EcLogInputPdo_subIndex_set)

    def __init__(self):
        _WMX3ApiPython.EcLogInputPdo_swiginit(self, _WMX3ApiPython.new_EcLogInputPdo())
    __swig_destroy__ = _WMX3ApiPython.delete_EcLogInputPdo

# Register EcLogInputPdo in _WMX3ApiPython:
_WMX3ApiPython.EcLogInputPdo_swigregister(EcLogInputPdo)
class EcLogInput(LogInput):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def SetData(self, ecLogInput):
        return _WMX3ApiPython.EcLogInput_SetData(self, ecLogInput)

    def GetData(self, ecLogInput):
        return _WMX3ApiPython.EcLogInput_GetData(self, ecLogInput)

    def __init__(self):
        _WMX3ApiPython.EcLogInput_swiginit(self, _WMX3ApiPython.new_EcLogInput())

    def GetModuleId(self):
        return _WMX3ApiPython.EcLogInput_GetModuleId(self)

    def GetInputData(self, buff, buffSize, dataSize):
        return _WMX3ApiPython.EcLogInput_GetInputData(self, buff, buffSize, dataSize)

    def SetInputData(self, moduleId, data, dataSize):
        return _WMX3ApiPython.EcLogInput_SetInputData(self, moduleId, data, dataSize)

    def GetLogInput(self):
        return _WMX3ApiPython.EcLogInput_GetLogInput(self)
    masterId = property(_WMX3ApiPython.EcLogInput_masterId_get, _WMX3ApiPython.EcLogInput_masterId_set)
    numOfPdo = property(_WMX3ApiPython.EcLogInput_numOfPdo_get, _WMX3ApiPython.EcLogInput_numOfPdo_set)
    pdo = property(_WMX3ApiPython.EcLogInput_pdo_get, _WMX3ApiPython.EcLogInput_pdo_set)

    def SetPdo(self, index, value):
        return _WMX3ApiPython.EcLogInput_SetPdo(self, index, value)

    def GetPdo(self, index):
        return _WMX3ApiPython.EcLogInput_GetPdo(self, index)
    __swig_destroy__ = _WMX3ApiPython.delete_EcLogInput

# Register EcLogInput in _WMX3ApiPython:
_WMX3ApiPython.EcLogInput_swigregister(EcLogInput)
class EcLogOutputPdo(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def SetThisData(self, ecLogOutputPdo):
        return _WMX3ApiPython.EcLogOutputPdo_SetThisData(self, ecLogOutputPdo)

    def GetThisData(self, ecLogOutputPdo):
        return _WMX3ApiPython.EcLogOutputPdo_GetThisData(self, ecLogOutputPdo)
    slaveId = property(_WMX3ApiPython.EcLogOutputPdo_slaveId_get, _WMX3ApiPython.EcLogOutputPdo_slaveId_set)
    index = property(_WMX3ApiPython.EcLogOutputPdo_index_get, _WMX3ApiPython.EcLogOutputPdo_index_set)
    subIndex = property(_WMX3ApiPython.EcLogOutputPdo_subIndex_get, _WMX3ApiPython.EcLogOutputPdo_subIndex_set)
    length = property(_WMX3ApiPython.EcLogOutputPdo_length_get, _WMX3ApiPython.EcLogOutputPdo_length_set)
    data = property(_WMX3ApiPython.EcLogOutputPdo_data_get, _WMX3ApiPython.EcLogOutputPdo_data_set)

    def SetData(self, index, value):
        return _WMX3ApiPython.EcLogOutputPdo_SetData(self, index, value)

    def GetData(self, index):
        return _WMX3ApiPython.EcLogOutputPdo_GetData(self, index)

    def __init__(self):
        _WMX3ApiPython.EcLogOutputPdo_swiginit(self, _WMX3ApiPython.new_EcLogOutputPdo())
    __swig_destroy__ = _WMX3ApiPython.delete_EcLogOutputPdo

# Register EcLogOutputPdo in _WMX3ApiPython:
_WMX3ApiPython.EcLogOutputPdo_swigregister(EcLogOutputPdo)
class EcLogOutputData(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def SetData(self, ecLogOutputData):
        return _WMX3ApiPython.EcLogOutputData_SetData(self, ecLogOutputData)

    def GetData(self, ecLogOutputData):
        return _WMX3ApiPython.EcLogOutputData_GetData(self, ecLogOutputData)
    masterId = property(_WMX3ApiPython.EcLogOutputData_masterId_get, _WMX3ApiPython.EcLogOutputData_masterId_set)
    numOfPdo = property(_WMX3ApiPython.EcLogOutputData_numOfPdo_get, _WMX3ApiPython.EcLogOutputData_numOfPdo_set)
    pdo = property(_WMX3ApiPython.EcLogOutputData_pdo_get, _WMX3ApiPython.EcLogOutputData_pdo_set)

    def SetPdo(self, index, value):
        return _WMX3ApiPython.EcLogOutputData_SetPdo(self, index, value)

    def GetPdo(self, index):
        return _WMX3ApiPython.EcLogOutputData_GetPdo(self, index)

    def __init__(self):
        _WMX3ApiPython.EcLogOutputData_swiginit(self, _WMX3ApiPython.new_EcLogOutputData())
    __swig_destroy__ = _WMX3ApiPython.delete_EcLogOutputData

# Register EcLogOutputData in _WMX3ApiPython:
_WMX3ApiPython.EcLogOutputData_swigregister(EcLogOutputData)
class EcLogOutput(LogOutput):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def SetData(self, ecLogOutput):
        return _WMX3ApiPython.EcLogOutput_SetData(self, ecLogOutput)

    def GetData(self, ecLogOutput):
        return _WMX3ApiPython.EcLogOutput_GetData(self, ecLogOutput)

    def __init__(self):
        _WMX3ApiPython.EcLogOutput_swiginit(self, _WMX3ApiPython.new_EcLogOutput())

    def GetModuleId(self):
        return _WMX3ApiPython.EcLogOutput_GetModuleId(self)

    def GetLogOutput(self):
        return _WMX3ApiPython.EcLogOutput_GetLogOutput(self)

    def SetLogOutput(self, src):
        return _WMX3ApiPython.EcLogOutput_SetLogOutput(self, src)
    ecData = property(_WMX3ApiPython.EcLogOutput_ecData_get, _WMX3ApiPython.EcLogOutput_ecData_set)

    def SetEcData(self, index, value):
        return _WMX3ApiPython.EcLogOutput_SetEcData(self, index, value)

    def GetEcData(self, index):
        return _WMX3ApiPython.EcLogOutput_GetEcData(self, index)
    __swig_destroy__ = _WMX3ApiPython.delete_EcLogOutput

# Register EcLogOutput in _WMX3ApiPython:
_WMX3ApiPython.EcLogOutput_swigregister(EcLogOutput)
class EcAoESender(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    senderNetId = property(_WMX3ApiPython.EcAoESender_senderNetId_get, _WMX3ApiPython.EcAoESender_senderNetId_set)

    def SetSenderNetId(self, index, value):
        return _WMX3ApiPython.EcAoESender_SetSenderNetId(self, index, value)

    def GetSenderNetId(self, index):
        return _WMX3ApiPython.EcAoESender_GetSenderNetId(self, index)
    senderPort = property(_WMX3ApiPython.EcAoESender_senderPort_get, _WMX3ApiPython.EcAoESender_senderPort_set)

    def __init__(self):
        _WMX3ApiPython.EcAoESender_swiginit(self, _WMX3ApiPython.new_EcAoESender())
    __swig_destroy__ = _WMX3ApiPython.delete_EcAoESender

# Register EcAoESender in _WMX3ApiPython:
_WMX3ApiPython.EcAoESender_swigregister(EcAoESender)
class EcSlaveSdoInfoObjectDescription(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def GetData(self, ecSlaveSdoInfoObjectDescription):
        return _WMX3ApiPython.EcSlaveSdoInfoObjectDescription_GetData(self, ecSlaveSdoInfoObjectDescription)
    index = property(_WMX3ApiPython.EcSlaveSdoInfoObjectDescription_index_get, _WMX3ApiPython.EcSlaveSdoInfoObjectDescription_index_set)
    dataType = property(_WMX3ApiPython.EcSlaveSdoInfoObjectDescription_dataType_get, _WMX3ApiPython.EcSlaveSdoInfoObjectDescription_dataType_set)
    maxSubIndex = property(_WMX3ApiPython.EcSlaveSdoInfoObjectDescription_maxSubIndex_get, _WMX3ApiPython.EcSlaveSdoInfoObjectDescription_maxSubIndex_set)
    objectCode = property(_WMX3ApiPython.EcSlaveSdoInfoObjectDescription_objectCode_get, _WMX3ApiPython.EcSlaveSdoInfoObjectDescription_objectCode_set)
    name = property(_WMX3ApiPython.EcSlaveSdoInfoObjectDescription_name_get, _WMX3ApiPython.EcSlaveSdoInfoObjectDescription_name_set)

    def __init__(self):
        _WMX3ApiPython.EcSlaveSdoInfoObjectDescription_swiginit(self, _WMX3ApiPython.new_EcSlaveSdoInfoObjectDescription())
    __swig_destroy__ = _WMX3ApiPython.delete_EcSlaveSdoInfoObjectDescription

# Register EcSlaveSdoInfoObjectDescription in _WMX3ApiPython:
_WMX3ApiPython.EcSlaveSdoInfoObjectDescription_swigregister(EcSlaveSdoInfoObjectDescription)
class EcSlaveSdoInfoObjectDescriptionList(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def GetData(self, ecSlaveSdoInfoObjectDescriptionList):
        return _WMX3ApiPython.EcSlaveSdoInfoObjectDescriptionList_GetData(self, ecSlaveSdoInfoObjectDescriptionList)
    num = property(_WMX3ApiPython.EcSlaveSdoInfoObjectDescriptionList_num_get, _WMX3ApiPython.EcSlaveSdoInfoObjectDescriptionList_num_set)
    objects = property(_WMX3ApiPython.EcSlaveSdoInfoObjectDescriptionList_objects_get, _WMX3ApiPython.EcSlaveSdoInfoObjectDescriptionList_objects_set)

    def SetObjects(self, index, value):
        return _WMX3ApiPython.EcSlaveSdoInfoObjectDescriptionList_SetObjects(self, index, value)

    def GetObjects(self, index):
        return _WMX3ApiPython.EcSlaveSdoInfoObjectDescriptionList_GetObjects(self, index)

    def __init__(self):
        _WMX3ApiPython.EcSlaveSdoInfoObjectDescriptionList_swiginit(self, _WMX3ApiPython.new_EcSlaveSdoInfoObjectDescriptionList())
    __swig_destroy__ = _WMX3ApiPython.delete_EcSlaveSdoInfoObjectDescriptionList

# Register EcSlaveSdoInfoObjectDescriptionList in _WMX3ApiPython:
_WMX3ApiPython.EcSlaveSdoInfoObjectDescriptionList_swigregister(EcSlaveSdoInfoObjectDescriptionList)
class EcSlaveSdoInfoEntryDescription(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def GetData(self, ecSlaveSdoInfoEntryDescription):
        return _WMX3ApiPython.EcSlaveSdoInfoEntryDescription_GetData(self, ecSlaveSdoInfoEntryDescription)
    index = property(_WMX3ApiPython.EcSlaveSdoInfoEntryDescription_index_get, _WMX3ApiPython.EcSlaveSdoInfoEntryDescription_index_set)
    subIndex = property(_WMX3ApiPython.EcSlaveSdoInfoEntryDescription_subIndex_get, _WMX3ApiPython.EcSlaveSdoInfoEntryDescription_subIndex_set)
    valueInfo = property(_WMX3ApiPython.EcSlaveSdoInfoEntryDescription_valueInfo_get, _WMX3ApiPython.EcSlaveSdoInfoEntryDescription_valueInfo_set)
    dataType = property(_WMX3ApiPython.EcSlaveSdoInfoEntryDescription_dataType_get, _WMX3ApiPython.EcSlaveSdoInfoEntryDescription_dataType_set)
    bitLen = property(_WMX3ApiPython.EcSlaveSdoInfoEntryDescription_bitLen_get, _WMX3ApiPython.EcSlaveSdoInfoEntryDescription_bitLen_set)
    objectAccess = property(_WMX3ApiPython.EcSlaveSdoInfoEntryDescription_objectAccess_get, _WMX3ApiPython.EcSlaveSdoInfoEntryDescription_objectAccess_set)
    unitType = property(_WMX3ApiPython.EcSlaveSdoInfoEntryDescription_unitType_get, _WMX3ApiPython.EcSlaveSdoInfoEntryDescription_unitType_set)
    defaultValue = property(_WMX3ApiPython.EcSlaveSdoInfoEntryDescription_defaultValue_get, _WMX3ApiPython.EcSlaveSdoInfoEntryDescription_defaultValue_set)
    minimumValue = property(_WMX3ApiPython.EcSlaveSdoInfoEntryDescription_minimumValue_get, _WMX3ApiPython.EcSlaveSdoInfoEntryDescription_minimumValue_set)
    maximumValue = property(_WMX3ApiPython.EcSlaveSdoInfoEntryDescription_maximumValue_get, _WMX3ApiPython.EcSlaveSdoInfoEntryDescription_maximumValue_set)
    name = property(_WMX3ApiPython.EcSlaveSdoInfoEntryDescription_name_get, _WMX3ApiPython.EcSlaveSdoInfoEntryDescription_name_set)

    def __init__(self):
        _WMX3ApiPython.EcSlaveSdoInfoEntryDescription_swiginit(self, _WMX3ApiPython.new_EcSlaveSdoInfoEntryDescription())
    __swig_destroy__ = _WMX3ApiPython.delete_EcSlaveSdoInfoEntryDescription

# Register EcSlaveSdoInfoEntryDescription in _WMX3ApiPython:
_WMX3ApiPython.EcSlaveSdoInfoEntryDescription_swigregister(EcSlaveSdoInfoEntryDescription)
class EcSlaveSdoInfoEntryDescriptionList(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def GetData(self, ecSlaveSdoInfoEntryDescriptionList):
        return _WMX3ApiPython.EcSlaveSdoInfoEntryDescriptionList_GetData(self, ecSlaveSdoInfoEntryDescriptionList)
    num = property(_WMX3ApiPython.EcSlaveSdoInfoEntryDescriptionList_num_get, _WMX3ApiPython.EcSlaveSdoInfoEntryDescriptionList_num_set)
    entry = property(_WMX3ApiPython.EcSlaveSdoInfoEntryDescriptionList_entry_get, _WMX3ApiPython.EcSlaveSdoInfoEntryDescriptionList_entry_set)

    def SetEntry(self, index, value):
        return _WMX3ApiPython.EcSlaveSdoInfoEntryDescriptionList_SetEntry(self, index, value)

    def GetEntry(self, index):
        return _WMX3ApiPython.EcSlaveSdoInfoEntryDescriptionList_GetEntry(self, index)

    def __init__(self):
        _WMX3ApiPython.EcSlaveSdoInfoEntryDescriptionList_swiginit(self, _WMX3ApiPython.new_EcSlaveSdoInfoEntryDescriptionList())
    __swig_destroy__ = _WMX3ApiPython.delete_EcSlaveSdoInfoEntryDescriptionList

# Register EcSlaveSdoInfoEntryDescriptionList in _WMX3ApiPython:
_WMX3ApiPython.EcSlaveSdoInfoEntryDescriptionList_swigregister(EcSlaveSdoInfoEntryDescriptionList)
class EcSlavePdo(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def GetData(self, ecSlavePdo):
        return _WMX3ApiPython.EcSlavePdo_GetData(self, ecSlavePdo)

    def SetData(self, ecSlavePdo):
        return _WMX3ApiPython.EcSlavePdo_SetData(self, ecSlavePdo)
    enable = property(_WMX3ApiPython.EcSlavePdo_enable_get, _WMX3ApiPython.EcSlavePdo_enable_set)
    size = property(_WMX3ApiPython.EcSlavePdo_size_get, _WMX3ApiPython.EcSlavePdo_size_set)
    offset = property(_WMX3ApiPython.EcSlavePdo_offset_get, _WMX3ApiPython.EcSlavePdo_offset_set)

    def __init__(self):
        _WMX3ApiPython.EcSlavePdo_swiginit(self, _WMX3ApiPython.new_EcSlavePdo())
    __swig_destroy__ = _WMX3ApiPython.delete_EcSlavePdo

# Register EcSlavePdo in _WMX3ApiPython:
_WMX3ApiPython.EcSlavePdo_swigregister(EcSlavePdo)
class EcSlavePdoInfo(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def GetData(self, ecSlavePdoInfo):
        return _WMX3ApiPython.EcSlavePdoInfo_GetData(self, ecSlavePdoInfo)

    def SetData(self, ecSlavePdoInfo):
        return _WMX3ApiPython.EcSlavePdoInfo_SetData(self, ecSlavePdoInfo)
    statusWord = property(_WMX3ApiPython.EcSlavePdoInfo_statusWord_get, _WMX3ApiPython.EcSlavePdoInfo_statusWord_set)
    modesOfOperationDisplay = property(_WMX3ApiPython.EcSlavePdoInfo_modesOfOperationDisplay_get, _WMX3ApiPython.EcSlavePdoInfo_modesOfOperationDisplay_set)
    positionActualValue = property(_WMX3ApiPython.EcSlavePdoInfo_positionActualValue_get, _WMX3ApiPython.EcSlavePdoInfo_positionActualValue_set)
    velocityActualValue = property(_WMX3ApiPython.EcSlavePdoInfo_velocityActualValue_get, _WMX3ApiPython.EcSlavePdoInfo_velocityActualValue_set)
    torqueActualValue = property(_WMX3ApiPython.EcSlavePdoInfo_torqueActualValue_get, _WMX3ApiPython.EcSlavePdoInfo_torqueActualValue_set)
    errorCode = property(_WMX3ApiPython.EcSlavePdoInfo_errorCode_get, _WMX3ApiPython.EcSlavePdoInfo_errorCode_set)
    touchProbeStatus = property(_WMX3ApiPython.EcSlavePdoInfo_touchProbeStatus_get, _WMX3ApiPython.EcSlavePdoInfo_touchProbeStatus_set)
    touchProbePositionPos1 = property(_WMX3ApiPython.EcSlavePdoInfo_touchProbePositionPos1_get, _WMX3ApiPython.EcSlavePdoInfo_touchProbePositionPos1_set)
    touchProbePositionPos2 = property(_WMX3ApiPython.EcSlavePdoInfo_touchProbePositionPos2_get, _WMX3ApiPython.EcSlavePdoInfo_touchProbePositionPos2_set)
    followingError = property(_WMX3ApiPython.EcSlavePdoInfo_followingError_get, _WMX3ApiPython.EcSlavePdoInfo_followingError_set)
    digitalInput = property(_WMX3ApiPython.EcSlavePdoInfo_digitalInput_get, _WMX3ApiPython.EcSlavePdoInfo_digitalInput_set)
    controlWord = property(_WMX3ApiPython.EcSlavePdoInfo_controlWord_get, _WMX3ApiPython.EcSlavePdoInfo_controlWord_set)
    modesOfOperation = property(_WMX3ApiPython.EcSlavePdoInfo_modesOfOperation_get, _WMX3ApiPython.EcSlavePdoInfo_modesOfOperation_set)
    targetPosition = property(_WMX3ApiPython.EcSlavePdoInfo_targetPosition_get, _WMX3ApiPython.EcSlavePdoInfo_targetPosition_set)
    targetVelocity = property(_WMX3ApiPython.EcSlavePdoInfo_targetVelocity_get, _WMX3ApiPython.EcSlavePdoInfo_targetVelocity_set)
    targetTorque = property(_WMX3ApiPython.EcSlavePdoInfo_targetTorque_get, _WMX3ApiPython.EcSlavePdoInfo_targetTorque_set)
    maxTorque = property(_WMX3ApiPython.EcSlavePdoInfo_maxTorque_get, _WMX3ApiPython.EcSlavePdoInfo_maxTorque_set)
    positiveTorqueLimit = property(_WMX3ApiPython.EcSlavePdoInfo_positiveTorqueLimit_get, _WMX3ApiPython.EcSlavePdoInfo_positiveTorqueLimit_set)
    negativeTorqueLimit = property(_WMX3ApiPython.EcSlavePdoInfo_negativeTorqueLimit_get, _WMX3ApiPython.EcSlavePdoInfo_negativeTorqueLimit_set)
    touchProbeFunction = property(_WMX3ApiPython.EcSlavePdoInfo_touchProbeFunction_get, _WMX3ApiPython.EcSlavePdoInfo_touchProbeFunction_set)
    velocityOffset = property(_WMX3ApiPython.EcSlavePdoInfo_velocityOffset_get, _WMX3ApiPython.EcSlavePdoInfo_velocityOffset_set)
    torqueOffset = property(_WMX3ApiPython.EcSlavePdoInfo_torqueOffset_get, _WMX3ApiPython.EcSlavePdoInfo_torqueOffset_set)
    maxMotorSpeed = property(_WMX3ApiPython.EcSlavePdoInfo_maxMotorSpeed_get, _WMX3ApiPython.EcSlavePdoInfo_maxMotorSpeed_set)
    digitalOutput = property(_WMX3ApiPython.EcSlavePdoInfo_digitalOutput_get, _WMX3ApiPython.EcSlavePdoInfo_digitalOutput_set)

    def __init__(self):
        _WMX3ApiPython.EcSlavePdoInfo_swiginit(self, _WMX3ApiPython.new_EcSlavePdoInfo())
    __swig_destroy__ = _WMX3ApiPython.delete_EcSlavePdoInfo

# Register EcSlavePdoInfo in _WMX3ApiPython:
_WMX3ApiPython.EcSlavePdoInfo_swigregister(EcSlavePdoInfo)
class EcSlaveAxisInfo(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def GetData(self, ecSlaveAxisInfo):
        return _WMX3ApiPython.EcSlaveAxisInfo_GetData(self, ecSlaveAxisInfo)

    def SetData(self, ecSlaveAxisInfo):
        return _WMX3ApiPython.EcSlaveAxisInfo_SetData(self, ecSlaveAxisInfo)
    axisIndex = property(_WMX3ApiPython.EcSlaveAxisInfo_axisIndex_get, _WMX3ApiPython.EcSlaveAxisInfo_axisIndex_set)
    digitalInputAddr = property(_WMX3ApiPython.EcSlaveAxisInfo_digitalInputAddr_get, _WMX3ApiPython.EcSlaveAxisInfo_digitalInputAddr_set)
    digitalInputSize = property(_WMX3ApiPython.EcSlaveAxisInfo_digitalInputSize_get, _WMX3ApiPython.EcSlaveAxisInfo_digitalInputSize_set)
    digitalOutputAddr = property(_WMX3ApiPython.EcSlaveAxisInfo_digitalOutputAddr_get, _WMX3ApiPython.EcSlaveAxisInfo_digitalOutputAddr_set)
    digitalOutputSize = property(_WMX3ApiPython.EcSlaveAxisInfo_digitalOutputSize_get, _WMX3ApiPython.EcSlaveAxisInfo_digitalOutputSize_set)
    pdoInfo = property(_WMX3ApiPython.EcSlaveAxisInfo_pdoInfo_get, _WMX3ApiPython.EcSlaveAxisInfo_pdoInfo_set)
    operationMode = property(_WMX3ApiPython.EcSlaveAxisInfo_operationMode_get, _WMX3ApiPython.EcSlaveAxisInfo_operationMode_set)
    targetReached = property(_WMX3ApiPython.EcSlaveAxisInfo_targetReached_get, _WMX3ApiPython.EcSlaveAxisInfo_targetReached_set)
    followingError = property(_WMX3ApiPython.EcSlaveAxisInfo_followingError_get, _WMX3ApiPython.EcSlaveAxisInfo_followingError_set)
    homingError = property(_WMX3ApiPython.EcSlaveAxisInfo_homingError_get, _WMX3ApiPython.EcSlaveAxisInfo_homingError_set)
    homingAttained = property(_WMX3ApiPython.EcSlaveAxisInfo_homingAttained_get, _WMX3ApiPython.EcSlaveAxisInfo_homingAttained_set)
    halt = property(_WMX3ApiPython.EcSlaveAxisInfo_halt_get, _WMX3ApiPython.EcSlaveAxisInfo_halt_set)

    def __init__(self):
        _WMX3ApiPython.EcSlaveAxisInfo_swiginit(self, _WMX3ApiPython.new_EcSlaveAxisInfo())
    __swig_destroy__ = _WMX3ApiPython.delete_EcSlaveAxisInfo

# Register EcSlaveAxisInfo in _WMX3ApiPython:
_WMX3ApiPython.EcSlaveAxisInfo_swigregister(EcSlaveAxisInfo)
class EcSlaveInfo(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def GetData(self, ecSlaveInfo):
        return _WMX3ApiPython.EcSlaveInfo_GetData(self, ecSlaveInfo)

    def SetData(self, ecSlaveInfo):
        return _WMX3ApiPython.EcSlaveInfo_SetData(self, ecSlaveInfo)
    id = property(_WMX3ApiPython.EcSlaveInfo_id_get, _WMX3ApiPython.EcSlaveInfo_id_set)
    position = property(_WMX3ApiPython.EcSlaveInfo_position_get, _WMX3ApiPython.EcSlaveInfo_position_set)
    address = property(_WMX3ApiPython.EcSlaveInfo_address_get, _WMX3ApiPython.EcSlaveInfo_address_set)
    vendorId = property(_WMX3ApiPython.EcSlaveInfo_vendorId_get, _WMX3ApiPython.EcSlaveInfo_vendorId_set)
    productCode = property(_WMX3ApiPython.EcSlaveInfo_productCode_get, _WMX3ApiPython.EcSlaveInfo_productCode_set)
    revisionNo = property(_WMX3ApiPython.EcSlaveInfo_revisionNo_get, _WMX3ApiPython.EcSlaveInfo_revisionNo_set)
    serialNo = property(_WMX3ApiPython.EcSlaveInfo_serialNo_get, _WMX3ApiPython.EcSlaveInfo_serialNo_set)
    alias = property(_WMX3ApiPython.EcSlaveInfo_alias_get, _WMX3ApiPython.EcSlaveInfo_alias_set)
    numOfAxes = property(_WMX3ApiPython.EcSlaveInfo_numOfAxes_get, _WMX3ApiPython.EcSlaveInfo_numOfAxes_set)
    axisInfo = property(_WMX3ApiPython.EcSlaveInfo_axisInfo_get, _WMX3ApiPython.EcSlaveInfo_axisInfo_set)

    def SetAxisInfo(self, index, value):
        return _WMX3ApiPython.EcSlaveInfo_SetAxisInfo(self, index, value)

    def GetAxisInfo(self, index):
        return _WMX3ApiPython.EcSlaveInfo_GetAxisInfo(self, index)
    state = property(_WMX3ApiPython.EcSlaveInfo_state_get, _WMX3ApiPython.EcSlaveInfo_state_set)
    alStatusCode = property(_WMX3ApiPython.EcSlaveInfo_alStatusCode_get, _WMX3ApiPython.EcSlaveInfo_alStatusCode_set)
    offline = property(_WMX3ApiPython.EcSlaveInfo_offline_get, _WMX3ApiPython.EcSlaveInfo_offline_set)
    inaccessible = property(_WMX3ApiPython.EcSlaveInfo_inaccessible_get, _WMX3ApiPython.EcSlaveInfo_inaccessible_set)
    newSlave = property(_WMX3ApiPython.EcSlaveInfo_newSlave_get, _WMX3ApiPython.EcSlaveInfo_newSlave_set)
    reverseSlave = property(_WMX3ApiPython.EcSlaveInfo_reverseSlave_get, _WMX3ApiPython.EcSlaveInfo_reverseSlave_set)
    dcSupport = property(_WMX3ApiPython.EcSlaveInfo_dcSupport_get, _WMX3ApiPython.EcSlaveInfo_dcSupport_set)
    dcWidth = property(_WMX3ApiPython.EcSlaveInfo_dcWidth_get, _WMX3ApiPython.EcSlaveInfo_dcWidth_set)
    portState = property(_WMX3ApiPython.EcSlaveInfo_portState_get, _WMX3ApiPython.EcSlaveInfo_portState_set)

    def SetPortState(self, index, value):
        return _WMX3ApiPython.EcSlaveInfo_SetPortState(self, index, value)

    def GetPortState(self, index):
        return _WMX3ApiPython.EcSlaveInfo_GetPortState(self, index)
    neighbor = property(_WMX3ApiPython.EcSlaveInfo_neighbor_get, _WMX3ApiPython.EcSlaveInfo_neighbor_set)

    def SetNeighbor(self, index, value):
        return _WMX3ApiPython.EcSlaveInfo_SetNeighbor(self, index, value)

    def GetNeighbor(self, index):
        return _WMX3ApiPython.EcSlaveInfo_GetNeighbor(self, index)
    propagaDelay = property(_WMX3ApiPython.EcSlaveInfo_propagaDelay_get, _WMX3ApiPython.EcSlaveInfo_propagaDelay_set)
    systemTime = property(_WMX3ApiPython.EcSlaveInfo_systemTime_get, _WMX3ApiPython.EcSlaveInfo_systemTime_set)
    systemTimeOffset = property(_WMX3ApiPython.EcSlaveInfo_systemTimeOffset_get, _WMX3ApiPython.EcSlaveInfo_systemTimeOffset_set)
    startTime = property(_WMX3ApiPython.EcSlaveInfo_startTime_get, _WMX3ApiPython.EcSlaveInfo_startTime_set)
    inputAddr = property(_WMX3ApiPython.EcSlaveInfo_inputAddr_get, _WMX3ApiPython.EcSlaveInfo_inputAddr_set)
    inputSize = property(_WMX3ApiPython.EcSlaveInfo_inputSize_get, _WMX3ApiPython.EcSlaveInfo_inputSize_set)
    outputAddr = property(_WMX3ApiPython.EcSlaveInfo_outputAddr_get, _WMX3ApiPython.EcSlaveInfo_outputAddr_set)
    outputSize = property(_WMX3ApiPython.EcSlaveInfo_outputSize_get, _WMX3ApiPython.EcSlaveInfo_outputSize_set)
    rxLogicAddr = property(_WMX3ApiPython.EcSlaveInfo_rxLogicAddr_get, _WMX3ApiPython.EcSlaveInfo_rxLogicAddr_set)
    rxPhyAddr = property(_WMX3ApiPython.EcSlaveInfo_rxPhyAddr_get, _WMX3ApiPython.EcSlaveInfo_rxPhyAddr_set)
    rxSize = property(_WMX3ApiPython.EcSlaveInfo_rxSize_get, _WMX3ApiPython.EcSlaveInfo_rxSize_set)
    txLogicAddr = property(_WMX3ApiPython.EcSlaveInfo_txLogicAddr_get, _WMX3ApiPython.EcSlaveInfo_txLogicAddr_set)
    txPhyAddr = property(_WMX3ApiPython.EcSlaveInfo_txPhyAddr_get, _WMX3ApiPython.EcSlaveInfo_txPhyAddr_set)
    txSize = property(_WMX3ApiPython.EcSlaveInfo_txSize_get, _WMX3ApiPython.EcSlaveInfo_txSize_set)

    def __init__(self):
        _WMX3ApiPython.EcSlaveInfo_swiginit(self, _WMX3ApiPython.new_EcSlaveInfo())
    __swig_destroy__ = _WMX3ApiPython.delete_EcSlaveInfo

# Register EcSlaveInfo in _WMX3ApiPython:
_WMX3ApiPython.EcSlaveInfo_swigregister(EcSlaveInfo)
class EcMasterStatisticsInfo(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def GetData(self, ecMasterStatisticsInfo):
        return _WMX3ApiPython.EcMasterStatisticsInfo_GetData(self, ecMasterStatisticsInfo)

    def SetData(self, ecMasterStatisticsInfo):
        return _WMX3ApiPython.EcMasterStatisticsInfo_SetData(self, ecMasterStatisticsInfo)
    commPeriod = property(_WMX3ApiPython.EcMasterStatisticsInfo_commPeriod_get, _WMX3ApiPython.EcMasterStatisticsInfo_commPeriod_set)
    cycleCounter = property(_WMX3ApiPython.EcMasterStatisticsInfo_cycleCounter_get, _WMX3ApiPython.EcMasterStatisticsInfo_cycleCounter_set)
    interruptIntervalCount = property(_WMX3ApiPython.EcMasterStatisticsInfo_interruptIntervalCount_get, _WMX3ApiPython.EcMasterStatisticsInfo_interruptIntervalCount_set)

    def SetInterruptIntervalCount(self, index, value):
        return _WMX3ApiPython.EcMasterStatisticsInfo_SetInterruptIntervalCount(self, index, value)

    def GetInterruptIntervalCount(self, index):
        return _WMX3ApiPython.EcMasterStatisticsInfo_GetInterruptIntervalCount(self, index)
    cycleProcessTimeCount = property(_WMX3ApiPython.EcMasterStatisticsInfo_cycleProcessTimeCount_get, _WMX3ApiPython.EcMasterStatisticsInfo_cycleProcessTimeCount_set)

    def SetCycleProcessTimeCount(self, index, value):
        return _WMX3ApiPython.EcMasterStatisticsInfo_SetCycleProcessTimeCount(self, index, value)

    def GetCycleProcessTimeCount(self, index):
        return _WMX3ApiPython.EcMasterStatisticsInfo_GetCycleProcessTimeCount(self, index)
    processTimeCount = property(_WMX3ApiPython.EcMasterStatisticsInfo_processTimeCount_get, _WMX3ApiPython.EcMasterStatisticsInfo_processTimeCount_set)

    def SetProcessTimeCount(self, index, value):
        return _WMX3ApiPython.EcMasterStatisticsInfo_SetProcessTimeCount(self, index, value)

    def GetProcessTimeCount(self, index):
        return _WMX3ApiPython.EcMasterStatisticsInfo_GetProcessTimeCount(self, index)
    commandProcessTimeCount = property(_WMX3ApiPython.EcMasterStatisticsInfo_commandProcessTimeCount_get, _WMX3ApiPython.EcMasterStatisticsInfo_commandProcessTimeCount_set)

    def SetCommandProcessTimeCount(self, index, value):
        return _WMX3ApiPython.EcMasterStatisticsInfo_SetCommandProcessTimeCount(self, index, value)

    def GetCommandProcessTimeCount(self, index):
        return _WMX3ApiPython.EcMasterStatisticsInfo_GetCommandProcessTimeCount(self, index)
    feedbackProcessTimeCount = property(_WMX3ApiPython.EcMasterStatisticsInfo_feedbackProcessTimeCount_get, _WMX3ApiPython.EcMasterStatisticsInfo_feedbackProcessTimeCount_set)

    def SetFeedbackProcessTimeCount(self, index, value):
        return _WMX3ApiPython.EcMasterStatisticsInfo_SetFeedbackProcessTimeCount(self, index, value)

    def GetFeedbackProcessTimeCount(self, index):
        return _WMX3ApiPython.EcMasterStatisticsInfo_GetFeedbackProcessTimeCount(self, index)
    communicateProcessTimeCount = property(_WMX3ApiPython.EcMasterStatisticsInfo_communicateProcessTimeCount_get, _WMX3ApiPython.EcMasterStatisticsInfo_communicateProcessTimeCount_set)

    def SetCommunicateProcessTimeCount(self, index, value):
        return _WMX3ApiPython.EcMasterStatisticsInfo_SetCommunicateProcessTimeCount(self, index, value)

    def GetCommunicateProcessTimeCount(self, index):
        return _WMX3ApiPython.EcMasterStatisticsInfo_GetCommunicateProcessTimeCount(self, index)
    dcDiffCount = property(_WMX3ApiPython.EcMasterStatisticsInfo_dcDiffCount_get, _WMX3ApiPython.EcMasterStatisticsInfo_dcDiffCount_set)

    def SetDcDiffCount(self, index, value):
        return _WMX3ApiPython.EcMasterStatisticsInfo_SetDcDiffCount(self, index, value)

    def GetDcDiffCount(self, index):
        return _WMX3ApiPython.EcMasterStatisticsInfo_GetDcDiffCount(self, index)
    txDelay = property(_WMX3ApiPython.EcMasterStatisticsInfo_txDelay_get, _WMX3ApiPython.EcMasterStatisticsInfo_txDelay_set)
    minTxDelay = property(_WMX3ApiPython.EcMasterStatisticsInfo_minTxDelay_get, _WMX3ApiPython.EcMasterStatisticsInfo_minTxDelay_set)
    maxTxDelay = property(_WMX3ApiPython.EcMasterStatisticsInfo_maxTxDelay_get, _WMX3ApiPython.EcMasterStatisticsInfo_maxTxDelay_set)
    packetLoss = property(_WMX3ApiPython.EcMasterStatisticsInfo_packetLoss_get, _WMX3ApiPython.EcMasterStatisticsInfo_packetLoss_set)
    packetTimeout = property(_WMX3ApiPython.EcMasterStatisticsInfo_packetTimeout_get, _WMX3ApiPython.EcMasterStatisticsInfo_packetTimeout_set)
    packetLossMode = property(_WMX3ApiPython.EcMasterStatisticsInfo_packetLossMode_get, _WMX3ApiPython.EcMasterStatisticsInfo_packetLossMode_set)

    def SetPacketLossMode(self, index, value):
        return _WMX3ApiPython.EcMasterStatisticsInfo_SetPacketLossMode(self, index, value)

    def GetPacketLossMode(self, index):
        return _WMX3ApiPython.EcMasterStatisticsInfo_GetPacketLossMode(self, index)
    packetTimeoutMode = property(_WMX3ApiPython.EcMasterStatisticsInfo_packetTimeoutMode_get, _WMX3ApiPython.EcMasterStatisticsInfo_packetTimeoutMode_set)

    def SetPacketTimeoutMode(self, index, value):
        return _WMX3ApiPython.EcMasterStatisticsInfo_SetPacketTimeoutMode(self, index, value)

    def GetPacketTimeoutMode(self, index):
        return _WMX3ApiPython.EcMasterStatisticsInfo_GetPacketTimeoutMode(self, index)
    minRefClockInterval = property(_WMX3ApiPython.EcMasterStatisticsInfo_minRefClockInterval_get, _WMX3ApiPython.EcMasterStatisticsInfo_minRefClockInterval_set)
    maxRefClockInterval = property(_WMX3ApiPython.EcMasterStatisticsInfo_maxRefClockInterval_get, _WMX3ApiPython.EcMasterStatisticsInfo_maxRefClockInterval_set)
    avgRefClockInterval = property(_WMX3ApiPython.EcMasterStatisticsInfo_avgRefClockInterval_get, _WMX3ApiPython.EcMasterStatisticsInfo_avgRefClockInterval_set)
    curRefClock = property(_WMX3ApiPython.EcMasterStatisticsInfo_curRefClock_get, _WMX3ApiPython.EcMasterStatisticsInfo_curRefClock_set)
    nextDcClock = property(_WMX3ApiPython.EcMasterStatisticsInfo_nextDcClock_get, _WMX3ApiPython.EcMasterStatisticsInfo_nextDcClock_set)
    diffFromNextDcClock = property(_WMX3ApiPython.EcMasterStatisticsInfo_diffFromNextDcClock_get, _WMX3ApiPython.EcMasterStatisticsInfo_diffFromNextDcClock_set)
    minDiffFromNextDcClock = property(_WMX3ApiPython.EcMasterStatisticsInfo_minDiffFromNextDcClock_get, _WMX3ApiPython.EcMasterStatisticsInfo_minDiffFromNextDcClock_set)
    maxDiffFromNextDcClock = property(_WMX3ApiPython.EcMasterStatisticsInfo_maxDiffFromNextDcClock_get, _WMX3ApiPython.EcMasterStatisticsInfo_maxDiffFromNextDcClock_set)
    totalAxesNum = property(_WMX3ApiPython.EcMasterStatisticsInfo_totalAxesNum_get, _WMX3ApiPython.EcMasterStatisticsInfo_totalAxesNum_set)
    totalRxPdoSize = property(_WMX3ApiPython.EcMasterStatisticsInfo_totalRxPdoSize_get, _WMX3ApiPython.EcMasterStatisticsInfo_totalRxPdoSize_set)
    totalTxPdoSize = property(_WMX3ApiPython.EcMasterStatisticsInfo_totalTxPdoSize_get, _WMX3ApiPython.EcMasterStatisticsInfo_totalTxPdoSize_set)
    totalInputSize = property(_WMX3ApiPython.EcMasterStatisticsInfo_totalInputSize_get, _WMX3ApiPython.EcMasterStatisticsInfo_totalInputSize_set)
    totalOutputSize = property(_WMX3ApiPython.EcMasterStatisticsInfo_totalOutputSize_get, _WMX3ApiPython.EcMasterStatisticsInfo_totalOutputSize_set)
    overCycle = property(_WMX3ApiPython.EcMasterStatisticsInfo_overCycle_get, _WMX3ApiPython.EcMasterStatisticsInfo_overCycle_set)
    ringNum = property(_WMX3ApiPython.EcMasterStatisticsInfo_ringNum_get, _WMX3ApiPython.EcMasterStatisticsInfo_ringNum_set)
    numOfCyclicFrames = property(_WMX3ApiPython.EcMasterStatisticsInfo_numOfCyclicFrames_get, _WMX3ApiPython.EcMasterStatisticsInfo_numOfCyclicFrames_set)
    hcState = property(_WMX3ApiPython.EcMasterStatisticsInfo_hcState_get, _WMX3ApiPython.EcMasterStatisticsInfo_hcState_set)
    hcAbortCode = property(_WMX3ApiPython.EcMasterStatisticsInfo_hcAbortCode_get, _WMX3ApiPython.EcMasterStatisticsInfo_hcAbortCode_set)
    hcErrorCode = property(_WMX3ApiPython.EcMasterStatisticsInfo_hcErrorCode_get, _WMX3ApiPython.EcMasterStatisticsInfo_hcErrorCode_set)

    def __init__(self):
        _WMX3ApiPython.EcMasterStatisticsInfo_swiginit(self, _WMX3ApiPython.new_EcMasterStatisticsInfo())
    __swig_destroy__ = _WMX3ApiPython.delete_EcMasterStatisticsInfo

# Register EcMasterStatisticsInfo in _WMX3ApiPython:
_WMX3ApiPython.EcMasterStatisticsInfo_swigregister(EcMasterStatisticsInfo)
class EcVirtualSlavePdo(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def GetData(self, ecVirtualSlavePdo):
        return _WMX3ApiPython.EcVirtualSlavePdo_GetData(self, ecVirtualSlavePdo)

    def SetData(self, ecVirtualSlavePdo):
        return _WMX3ApiPython.EcVirtualSlavePdo_SetData(self, ecVirtualSlavePdo)
    index = property(_WMX3ApiPython.EcVirtualSlavePdo_index_get, _WMX3ApiPython.EcVirtualSlavePdo_index_set)
    subIndex = property(_WMX3ApiPython.EcVirtualSlavePdo_subIndex_get, _WMX3ApiPython.EcVirtualSlavePdo_subIndex_set)
    size = property(_WMX3ApiPython.EcVirtualSlavePdo_size_get, _WMX3ApiPython.EcVirtualSlavePdo_size_set)
    offset = property(_WMX3ApiPython.EcVirtualSlavePdo_offset_get, _WMX3ApiPython.EcVirtualSlavePdo_offset_set)

    def __init__(self):
        _WMX3ApiPython.EcVirtualSlavePdo_swiginit(self, _WMX3ApiPython.new_EcVirtualSlavePdo())
    __swig_destroy__ = _WMX3ApiPython.delete_EcVirtualSlavePdo

# Register EcVirtualSlavePdo in _WMX3ApiPython:
_WMX3ApiPython.EcVirtualSlavePdo_swigregister(EcVirtualSlavePdo)
class EcVirtualSlaveDcStatisticsInfo(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def GetData(self, ecVirtualSlaveDcStatisticsInfo):
        return _WMX3ApiPython.EcVirtualSlaveDcStatisticsInfo_GetData(self, ecVirtualSlaveDcStatisticsInfo)

    def SetData(self, ecVirtualSlaveDcStatisticsInfo):
        return _WMX3ApiPython.EcVirtualSlaveDcStatisticsInfo_SetData(self, ecVirtualSlaveDcStatisticsInfo)
    minRefClockIntvl = property(_WMX3ApiPython.EcVirtualSlaveDcStatisticsInfo_minRefClockIntvl_get, _WMX3ApiPython.EcVirtualSlaveDcStatisticsInfo_minRefClockIntvl_set)
    sysIntvlWhenMinRefClockIntvl = property(_WMX3ApiPython.EcVirtualSlaveDcStatisticsInfo_sysIntvlWhenMinRefClockIntvl_get, _WMX3ApiPython.EcVirtualSlaveDcStatisticsInfo_sysIntvlWhenMinRefClockIntvl_set)
    maxRefClockIntvl = property(_WMX3ApiPython.EcVirtualSlaveDcStatisticsInfo_maxRefClockIntvl_get, _WMX3ApiPython.EcVirtualSlaveDcStatisticsInfo_maxRefClockIntvl_set)
    sysIntvlWhenMaxRefClockIntvl = property(_WMX3ApiPython.EcVirtualSlaveDcStatisticsInfo_sysIntvlWhenMaxRefClockIntvl_get, _WMX3ApiPython.EcVirtualSlaveDcStatisticsInfo_sysIntvlWhenMaxRefClockIntvl_set)
    avgRefClockIntvl = property(_WMX3ApiPython.EcVirtualSlaveDcStatisticsInfo_avgRefClockIntvl_get, _WMX3ApiPython.EcVirtualSlaveDcStatisticsInfo_avgRefClockIntvl_set)
    minSysClockIntvl = property(_WMX3ApiPython.EcVirtualSlaveDcStatisticsInfo_minSysClockIntvl_get, _WMX3ApiPython.EcVirtualSlaveDcStatisticsInfo_minSysClockIntvl_set)
    maxSysClockIntvl = property(_WMX3ApiPython.EcVirtualSlaveDcStatisticsInfo_maxSysClockIntvl_get, _WMX3ApiPython.EcVirtualSlaveDcStatisticsInfo_maxSysClockIntvl_set)
    avgSysClockIntvl = property(_WMX3ApiPython.EcVirtualSlaveDcStatisticsInfo_avgSysClockIntvl_get, _WMX3ApiPython.EcVirtualSlaveDcStatisticsInfo_avgSysClockIntvl_set)
    count = property(_WMX3ApiPython.EcVirtualSlaveDcStatisticsInfo_count_get, _WMX3ApiPython.EcVirtualSlaveDcStatisticsInfo_count_set)

    def __init__(self):
        _WMX3ApiPython.EcVirtualSlaveDcStatisticsInfo_swiginit(self, _WMX3ApiPython.new_EcVirtualSlaveDcStatisticsInfo())
    __swig_destroy__ = _WMX3ApiPython.delete_EcVirtualSlaveDcStatisticsInfo

# Register EcVirtualSlaveDcStatisticsInfo in _WMX3ApiPython:
_WMX3ApiPython.EcVirtualSlaveDcStatisticsInfo_swigregister(EcVirtualSlaveDcStatisticsInfo)
class EcVirtualSlaveStatisticsInfo(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def GetData(self, ecVirtualSlaveStatisticsInfo):
        return _WMX3ApiPython.EcVirtualSlaveStatisticsInfo_GetData(self, ecVirtualSlaveStatisticsInfo)

    def SetData(self, ecVirtualSlaveStatisticsInfo):
        return _WMX3ApiPython.EcVirtualSlaveStatisticsInfo_SetData(self, ecVirtualSlaveStatisticsInfo)
    dc = property(_WMX3ApiPython.EcVirtualSlaveStatisticsInfo_dc_get, _WMX3ApiPython.EcVirtualSlaveStatisticsInfo_dc_set)

    def __init__(self):
        _WMX3ApiPython.EcVirtualSlaveStatisticsInfo_swiginit(self, _WMX3ApiPython.new_EcVirtualSlaveStatisticsInfo())
    __swig_destroy__ = _WMX3ApiPython.delete_EcVirtualSlaveStatisticsInfo

# Register EcVirtualSlaveStatisticsInfo in _WMX3ApiPython:
_WMX3ApiPython.EcVirtualSlaveStatisticsInfo_swigregister(EcVirtualSlaveStatisticsInfo)
class EcVirtualSlaveInfo(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def GetData(self, ecVirtualSlaveInfo):
        return _WMX3ApiPython.EcVirtualSlaveInfo_GetData(self, ecVirtualSlaveInfo)

    def SetData(self, ecVirtualSlaveInfo):
        return _WMX3ApiPython.EcVirtualSlaveInfo_SetData(self, ecVirtualSlaveInfo)
    state = property(_WMX3ApiPython.EcVirtualSlaveInfo_state_get, _WMX3ApiPython.EcVirtualSlaveInfo_state_set)
    address = property(_WMX3ApiPython.EcVirtualSlaveInfo_address_get, _WMX3ApiPython.EcVirtualSlaveInfo_address_set)
    enabled = property(_WMX3ApiPython.EcVirtualSlaveInfo_enabled_get, _WMX3ApiPython.EcVirtualSlaveInfo_enabled_set)
    vendorId = property(_WMX3ApiPython.EcVirtualSlaveInfo_vendorId_get, _WMX3ApiPython.EcVirtualSlaveInfo_vendorId_set)
    productCode = property(_WMX3ApiPython.EcVirtualSlaveInfo_productCode_get, _WMX3ApiPython.EcVirtualSlaveInfo_productCode_set)
    revisionNo = property(_WMX3ApiPython.EcVirtualSlaveInfo_revisionNo_get, _WMX3ApiPython.EcVirtualSlaveInfo_revisionNo_set)
    serialNo = property(_WMX3ApiPython.EcVirtualSlaveInfo_serialNo_get, _WMX3ApiPython.EcVirtualSlaveInfo_serialNo_set)
    alias = property(_WMX3ApiPython.EcVirtualSlaveInfo_alias_get, _WMX3ApiPython.EcVirtualSlaveInfo_alias_set)
    commPeriod = property(_WMX3ApiPython.EcVirtualSlaveInfo_commPeriod_get, _WMX3ApiPython.EcVirtualSlaveInfo_commPeriod_set)
    numOfMappedRxPdo = property(_WMX3ApiPython.EcVirtualSlaveInfo_numOfMappedRxPdo_get, _WMX3ApiPython.EcVirtualSlaveInfo_numOfMappedRxPdo_set)
    mappedRxPdo = property(_WMX3ApiPython.EcVirtualSlaveInfo_mappedRxPdo_get, _WMX3ApiPython.EcVirtualSlaveInfo_mappedRxPdo_set)

    def SetMappedRxPdo(self, index, value):
        return _WMX3ApiPython.EcVirtualSlaveInfo_SetMappedRxPdo(self, index, value)

    def GetMappedRxPdo(self, index):
        return _WMX3ApiPython.EcVirtualSlaveInfo_GetMappedRxPdo(self, index)
    numOfMappedTxPdo = property(_WMX3ApiPython.EcVirtualSlaveInfo_numOfMappedTxPdo_get, _WMX3ApiPython.EcVirtualSlaveInfo_numOfMappedTxPdo_set)
    mappedTxPdo = property(_WMX3ApiPython.EcVirtualSlaveInfo_mappedTxPdo_get, _WMX3ApiPython.EcVirtualSlaveInfo_mappedTxPdo_set)

    def SetMappedTxPdo(self, index, value):
        return _WMX3ApiPython.EcVirtualSlaveInfo_SetMappedTxPdo(self, index, value)

    def GetMappedTxPdo(self, index):
        return _WMX3ApiPython.EcVirtualSlaveInfo_GetMappedTxPdo(self, index)
    statistics = property(_WMX3ApiPython.EcVirtualSlaveInfo_statistics_get, _WMX3ApiPython.EcVirtualSlaveInfo_statistics_set)

    def __init__(self):
        _WMX3ApiPython.EcVirtualSlaveInfo_swiginit(self, _WMX3ApiPython.new_EcVirtualSlaveInfo())
    __swig_destroy__ = _WMX3ApiPython.delete_EcVirtualSlaveInfo

# Register EcVirtualSlaveInfo in _WMX3ApiPython:
_WMX3ApiPython.EcVirtualSlaveInfo_swigregister(EcVirtualSlaveInfo)
class EcMonitorDcStatisticsInfo(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def GetData(self, ecMonitorDcStatisticsInfo):
        return _WMX3ApiPython.EcMonitorDcStatisticsInfo_GetData(self, ecMonitorDcStatisticsInfo)

    def SetData(self, ecMonitorDcStatisticsInfo):
        return _WMX3ApiPython.EcMonitorDcStatisticsInfo_SetData(self, ecMonitorDcStatisticsInfo)
    minRefClockIntvl = property(_WMX3ApiPython.EcMonitorDcStatisticsInfo_minRefClockIntvl_get, _WMX3ApiPython.EcMonitorDcStatisticsInfo_minRefClockIntvl_set)
    sysIntvlWhenMinRefClockIntvl = property(_WMX3ApiPython.EcMonitorDcStatisticsInfo_sysIntvlWhenMinRefClockIntvl_get, _WMX3ApiPython.EcMonitorDcStatisticsInfo_sysIntvlWhenMinRefClockIntvl_set)
    maxRefClockIntvl = property(_WMX3ApiPython.EcMonitorDcStatisticsInfo_maxRefClockIntvl_get, _WMX3ApiPython.EcMonitorDcStatisticsInfo_maxRefClockIntvl_set)
    sysIntvlWhenMaxRefClockIntvl = property(_WMX3ApiPython.EcMonitorDcStatisticsInfo_sysIntvlWhenMaxRefClockIntvl_get, _WMX3ApiPython.EcMonitorDcStatisticsInfo_sysIntvlWhenMaxRefClockIntvl_set)
    avgRefClockIntvl = property(_WMX3ApiPython.EcMonitorDcStatisticsInfo_avgRefClockIntvl_get, _WMX3ApiPython.EcMonitorDcStatisticsInfo_avgRefClockIntvl_set)
    minSysClockIntvl = property(_WMX3ApiPython.EcMonitorDcStatisticsInfo_minSysClockIntvl_get, _WMX3ApiPython.EcMonitorDcStatisticsInfo_minSysClockIntvl_set)
    maxSysClockIntvl = property(_WMX3ApiPython.EcMonitorDcStatisticsInfo_maxSysClockIntvl_get, _WMX3ApiPython.EcMonitorDcStatisticsInfo_maxSysClockIntvl_set)
    avgSysClockIntvl = property(_WMX3ApiPython.EcMonitorDcStatisticsInfo_avgSysClockIntvl_get, _WMX3ApiPython.EcMonitorDcStatisticsInfo_avgSysClockIntvl_set)
    count = property(_WMX3ApiPython.EcMonitorDcStatisticsInfo_count_get, _WMX3ApiPython.EcMonitorDcStatisticsInfo_count_set)

    def __init__(self):
        _WMX3ApiPython.EcMonitorDcStatisticsInfo_swiginit(self, _WMX3ApiPython.new_EcMonitorDcStatisticsInfo())
    __swig_destroy__ = _WMX3ApiPython.delete_EcMonitorDcStatisticsInfo

# Register EcMonitorDcStatisticsInfo in _WMX3ApiPython:
_WMX3ApiPython.EcMonitorDcStatisticsInfo_swigregister(EcMonitorDcStatisticsInfo)
class EcMonitorStatisticsInfo(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def GetData(self, ecMonitorStatisticsInfo):
        return _WMX3ApiPython.EcMonitorStatisticsInfo_GetData(self, ecMonitorStatisticsInfo)

    def SetData(self, ecMonitorStatisticsInfo):
        return _WMX3ApiPython.EcMonitorStatisticsInfo_SetData(self, ecMonitorStatisticsInfo)
    dc = property(_WMX3ApiPython.EcMonitorStatisticsInfo_dc_get, _WMX3ApiPython.EcMonitorStatisticsInfo_dc_set)

    def __init__(self):
        _WMX3ApiPython.EcMonitorStatisticsInfo_swiginit(self, _WMX3ApiPython.new_EcMonitorStatisticsInfo())
    __swig_destroy__ = _WMX3ApiPython.delete_EcMonitorStatisticsInfo

# Register EcMonitorStatisticsInfo in _WMX3ApiPython:
_WMX3ApiPython.EcMonitorStatisticsInfo_swigregister(EcMonitorStatisticsInfo)
class EcMonitorInfo(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def GetData(self, ecMonitorInfo):
        return _WMX3ApiPython.EcMonitorInfo_GetData(self, ecMonitorInfo)

    def SetData(self, ecMonitorInfo):
        return _WMX3ApiPython.EcMonitorInfo_SetData(self, ecMonitorInfo)
    enabled = property(_WMX3ApiPython.EcMonitorInfo_enabled_get, _WMX3ApiPython.EcMonitorInfo_enabled_set)
    id = property(_WMX3ApiPython.EcMonitorInfo_id_get, _WMX3ApiPython.EcMonitorInfo_id_set)
    commPeriod = property(_WMX3ApiPython.EcMonitorInfo_commPeriod_get, _WMX3ApiPython.EcMonitorInfo_commPeriod_set)
    numOfSlaves = property(_WMX3ApiPython.EcMonitorInfo_numOfSlaves_get, _WMX3ApiPython.EcMonitorInfo_numOfSlaves_set)
    position = property(_WMX3ApiPython.EcMonitorInfo_position_get, _WMX3ApiPython.EcMonitorInfo_position_set)
    statistics = property(_WMX3ApiPython.EcMonitorInfo_statistics_get, _WMX3ApiPython.EcMonitorInfo_statistics_set)
    virtualSlave = property(_WMX3ApiPython.EcMonitorInfo_virtualSlave_get, _WMX3ApiPython.EcMonitorInfo_virtualSlave_set)

    def __init__(self):
        _WMX3ApiPython.EcMonitorInfo_swiginit(self, _WMX3ApiPython.new_EcMonitorInfo())
    __swig_destroy__ = _WMX3ApiPython.delete_EcMonitorInfo

# Register EcMonitorInfo in _WMX3ApiPython:
_WMX3ApiPython.EcMonitorInfo_swigregister(EcMonitorInfo)
class EcMasterInfo(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def GetData(self, ecMasterInfo):
        return _WMX3ApiPython.EcMasterInfo_GetData(self, ecMasterInfo)

    def SetData(self, ecMasterInfo):
        return _WMX3ApiPython.EcMasterInfo_SetData(self, ecMasterInfo)
    id = property(_WMX3ApiPython.EcMasterInfo_id_get, _WMX3ApiPython.EcMasterInfo_id_set)
    state = property(_WMX3ApiPython.EcMasterInfo_state_get, _WMX3ApiPython.EcMasterInfo_state_set)
    mode = property(_WMX3ApiPython.EcMasterInfo_mode_get, _WMX3ApiPython.EcMasterInfo_mode_set)
    numOfSlaves = property(_WMX3ApiPython.EcMasterInfo_numOfSlaves_get, _WMX3ApiPython.EcMasterInfo_numOfSlaves_set)
    slaves = property(_WMX3ApiPython.EcMasterInfo_slaves_get, _WMX3ApiPython.EcMasterInfo_slaves_set)

    def SetSlaves(self, index, value):
        return _WMX3ApiPython.EcMasterInfo_SetSlaves(self, index, value)

    def GetSlaves(self, index):
        return _WMX3ApiPython.EcMasterInfo_GetSlaves(self, index)
    statisticsInfo = property(_WMX3ApiPython.EcMasterInfo_statisticsInfo_get, _WMX3ApiPython.EcMasterInfo_statisticsInfo_set)

    def GetOnlineSlaveCount(self):
        return _WMX3ApiPython.EcMasterInfo_GetOnlineSlaveCount(self)

    def GetOfflineSlaveCount(self):
        return _WMX3ApiPython.EcMasterInfo_GetOfflineSlaveCount(self)

    def GetInaccessibleSlaveCount(self):
        return _WMX3ApiPython.EcMasterInfo_GetInaccessibleSlaveCount(self)

    def __init__(self):
        _WMX3ApiPython.EcMasterInfo_swiginit(self, _WMX3ApiPython.new_EcMasterInfo())
    __swig_destroy__ = _WMX3ApiPython.delete_EcMasterInfo

# Register EcMasterInfo in _WMX3ApiPython:
_WMX3ApiPython.EcMasterInfo_swigregister(EcMasterInfo)
class EcMasterInfoList(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def GetData(self, ecMasterInfoList):
        return _WMX3ApiPython.EcMasterInfoList_GetData(self, ecMasterInfoList)

    def SetData(self, ecMasterInfoList):
        return _WMX3ApiPython.EcMasterInfoList_SetData(self, ecMasterInfoList)
    numOfMasters = property(_WMX3ApiPython.EcMasterInfoList_numOfMasters_get, _WMX3ApiPython.EcMasterInfoList_numOfMasters_set)
    masters = property(_WMX3ApiPython.EcMasterInfoList_masters_get, _WMX3ApiPython.EcMasterInfoList_masters_set)

    def SetMasters(self, index, value):
        return _WMX3ApiPython.EcMasterInfoList_SetMasters(self, index, value)

    def GetMasters(self, index):
        return _WMX3ApiPython.EcMasterInfoList_GetMasters(self, index)

    def __init__(self):
        _WMX3ApiPython.EcMasterInfoList_swiginit(self, _WMX3ApiPython.new_EcMasterInfoList())
    __swig_destroy__ = _WMX3ApiPython.delete_EcMasterInfoList

# Register EcMasterInfoList in _WMX3ApiPython:
_WMX3ApiPython.EcMasterInfoList_swigregister(EcMasterInfoList)
class Ecat(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _WMX3ApiPython.Ecat_swiginit(self, _WMX3ApiPython.new_Ecat(*args))
    __swig_destroy__ = _WMX3ApiPython.delete_Ecat

    @staticmethod
    def ErrorToString(errCode):
        return _WMX3ApiPython.Ecat_ErrorToString(errCode)

    @staticmethod
    def GetLibVersion():
        return _WMX3ApiPython.Ecat_GetLibVersion()

    def IsDeviceValid(self):
        return _WMX3ApiPython.Ecat_IsDeviceValid(self)

    def GetVersion(self):
        return _WMX3ApiPython.Ecat_GetVersion(self)

    def SetMonitorMode(self, enable):
        return _WMX3ApiPython.Ecat_SetMonitorMode(self, enable)

    def ScanNetwork(self):
        return _WMX3ApiPython.Ecat_ScanNetwork(self)

    def ChangeSlaveState(self, slaveId, state):
        errorCode = intp()
        ret = _WMX3ApiPython.Ecat_ChangeSlaveState(self, slaveId, state, errorCode)
        return ret, errorCode.value()



    def StartHotconnect(self):
        return _WMX3ApiPython.Ecat_StartHotconnect(self)

    def ResetMonitorStatisticsInfo(self):
        return _WMX3ApiPython.Ecat_ResetMonitorStatisticsInfo(self)

    def GetMasterInfo(self):
        info = EcMasterInfo()
        ret = _WMX3ApiPython.Ecat_GetMasterInfo(self, info)
        return ret, info



    def GetMasterMonitorInfo(self):
        info = EcMonitorInfo()
        ret = _WMX3ApiPython.Ecat_GetMasterMonitorInfo(self, info)
        return ret, info



    def SdoDownload(self, slaveId, index, subindex, sdoDataSize, sdoData):
        errCode = uintp()
        ret = _WMX3ApiPython.Ecat_SdoDownload(self, slaveId, index, subindex, sdoDataSize, sdoData, errCode)
        return ret, errCode.value()



    def SdoDownload_WaitTime(self, slaveId, index, subindex, sdoDataSize, sdoData, waitTime):
        errCode = uintp()
        ret = _WMX3ApiPython.Ecat_SdoDownload_WaitTime(self, slaveId, index, subindex, sdoDataSize, sdoData, errCode, waitTime)
        return ret, errCode.value()



    def SdoUpload(self, slaveId, index, subindex, sdoBuffSize):
        sdoBuffArray = uintArray(sdoBuffSize)
        actualSize = uintp()
        errCode = uintp()
        ret = _WMX3ApiPython.Ecat_SdoUpload(self, slaveId, index, subindex, sdoBuffSize, sdoBuffArray, actualSize, errCode)

        sdoBuff = []
        for i in range(sdoBuffSize):
            sdoBuff.append(sdoBuffArray[i])

        return ret, sdoBuff, actualSize.value(), errCode.value()



    def SdoUpload_WaitTime(self, slaveId, index, subindex, sdoBuffSize, waitTime):
        sdoBuffArray = uintArray(sdoBuffSize)
        actualSize = uintp()
        errCode = uintp()
        ret = _WMX3ApiPython.Ecat_SdoUpload_WaitTime(self, slaveId, index, subindex, sdoBuffSize, sdoBuffArray, actualSize, errCode, waitTime)

        sdoBuff = []
        for i in range(sdoBuffSize):
            sdoBuff.append(sdoBuffArray[i])

        return ret, sdoBuff, actualSize.value(), errCode.value()



    def SdoDownload_SdoType(self, slaveId, index, subindex, sdoType, sdoDataSize, sdoData):
        errCode = uintp()
        ret = _WMX3ApiPython.Ecat_SdoDownload_SdoType(self, slaveId, index, subindex, sdoType, sdoDataSize, sdoData, errCode)
        return ret, errCode.value()



    def SdoDownload_SdoType_WaitTime(self, slaveId, index, subindex, sdoType, sdoDataSize, sdoData, waitTime):
        errCode = uintp()
        ret = _WMX3ApiPython.Ecat_SdoDownload_SdoType_WaitTime(self, slaveId, index, subindex, sdoType, sdoDataSize, sdoData, errCode, waitTime)
        return ret, errCode.value()



    def SdoDownload_SdoType_WaitTime_Complete(self, slaveId, index, subindex, sdoType, sdoDataSize, sdoData, waitTime, complete):
        errCode = uintp()
        ret = _WMX3ApiPython.Ecat_SdoDownload_SdoType_WaitTime_Complete(self, slaveId, index, subindex, sdoType, sdoDataSize, sdoData, errCode, waitTime, complete)
        return ret, errCode.value()



    def SdoUpload_SdoType(self, slaveId, index, subindex, sdoType, sdoBuffSize):
        sdoBuffArray = uintArray(sdoBuffSize)
        actualSize = uintp()
        errCode = uintp()
        ret = _WMX3ApiPython.Ecat_SdoUpload_SdoType(self, slaveId, index, subindex, sdoType, sdoBuffSize, sdoBuffArray, actualSize, errCode)

        sdoBuff = []
        for i in range(sdoBuffSize):
            sdoBuff.append(sdoBuffArray[i])

        return ret, sdoBuff, actualSize.value(), errCode.value()



    def SdoUpload_SdoType_WaitTime(self, slaveId, index, subindex, sdoType, sdoBuffSize, waitTime):
        sdoBuffArray = uintArray(sdoBuffSize)
        actualSize = uintp()
        errCode = uintp()
        ret = _WMX3ApiPython.Ecat_SdoUpload_SdoType_WaitTime(self, slaveId, index, subindex, sdoType, sdoBuffSize, sdoBuffArray, actualSize, errCode, waitTime)

        sdoBuff = []
        for i in range(sdoBuffSize):
            sdoBuff.append(sdoBuffArray[i])

        return ret, sdoBuff, actualSize.value(), errCode.value()



    def SdoUpload_SdoType_WaitTime_Complete(self, slaveId, index, subindex, sdoType, sdoBuffSize, waitTime, complete):
        sdoBuffArray = uintArray(sdoBuffSize)
        actualSize = uintp()
        errCode = uintp()
        ret = _WMX3ApiPython.Ecat_SdoUpload_SdoType_WaitTime_Complete(self, slaveId, index, subindex, sdoType, sdoBuffSize, sdoBuffArray, actualSize, errCode, waitTime, complete)

        sdoBuff = []
        for i in range(sdoBuffSize):
            sdoBuff.append(sdoBuffArray[i])

        return ret, sdoBuff, actualSize.value(), errCode.value()



    def TxPdoWrite(self, *args):
        return _WMX3ApiPython.Ecat_TxPdoWrite(self, *args)

    def ClearTxPdoWrite(self, slaveId, index, subindex):
        return _WMX3ApiPython.Ecat_ClearTxPdoWrite(self, slaveId, index, subindex)

    def PdoRead(self, slaveId, index, subindex, pdoBuffSize):
        pdoBuffArray = uintArray(pdoBuffSize)
        actualSize = uintp()
        ret = _WMX3ApiPython.Ecat_PdoRead(self, slaveId, index, subindex, pdoBuffSize, pdoBuffArray, actualSize)

        pdoBuff = []
        for i in range(pdoBuffSize):
            pdoBuff.append(pdoBuffArray[i])

        return ret, pdoBuff, actualSize.value()



    def SetAxisMode(self, slaveId, axisIndex, mode):
        return _WMX3ApiPython.Ecat_SetAxisMode(self, slaveId, axisIndex, mode)

    def StartAxisPP(self, *args):
        return _WMX3ApiPython.Ecat_StartAxisPP(self, *args)

    def StartAxisHM(self, slaveId, axisIndex, method, switchSpeed, zeroSpeed, hmAcc):
        return _WMX3ApiPython.Ecat_StartAxisHM(self, slaveId, axisIndex, method, switchSpeed, zeroSpeed, hmAcc)

    def HaltAxis(self, slaveId, axisIndex):
        return _WMX3ApiPython.Ecat_HaltAxis(self, slaveId, axisIndex)

    def HaltAxisRelease(self, slaveId, axisIndex):
        return _WMX3ApiPython.Ecat_HaltAxisRelease(self, slaveId, axisIndex)

    def VirtualSlaveTxPdoWrite(self, *args):
        return _WMX3ApiPython.Ecat_VirtualSlaveTxPdoWrite(self, *args)

    def VirtualSlaveClearTxPdoWrite(self, index, subindex):
        return _WMX3ApiPython.Ecat_VirtualSlaveClearTxPdoWrite(self, index, subindex)

    def VirtualSlavePdoRead(self, index, subindex, pdoBuffSize):
        pdoBuffArray = uintArray(pdoBuffSize)
        actualSize = uintp()
        ret = _WMX3ApiPython.Ecat_VirtualSlavePdoRead(self, index, subindex, pdoBuffSize, pdoBuffArray, actualSize)

        pdoBuff = []
        for i in range(pdoBuffSize):
            pdoBuff.append(pdoBuffArray[i])

        return ret, pdoBuff, actualSize.value()



    def SetMonitorMode_MasterId(self, masterId, enable):
        return _WMX3ApiPython.Ecat_SetMonitorMode_MasterId(self, masterId, enable)

    def ResetMonitorStatisticsInfo_MasterId(self, masterId):
        return _WMX3ApiPython.Ecat_ResetMonitorStatisticsInfo_MasterId(self, masterId)

    def SetUpdatePeriod(self, period):
        return _WMX3ApiPython.Ecat_SetUpdatePeriod(self, period)

    def GetMasterMonitorInfo_MasterId(self, masterId):
        info = EcMonitorInfo()
        ret = _WMX3ApiPython.Ecat_GetMasterMonitorInfo_MasterId(self, masterId, info)
        return ret, info



    def VirtualSlaveTxPdoWrite_MasterId(self, *args):
        return _WMX3ApiPython.Ecat_VirtualSlaveTxPdoWrite_MasterId(self, *args)

    def VirtualSlaveClearTxPdoWrite_MasterId(self, masterId, index, subindex):
        return _WMX3ApiPython.Ecat_VirtualSlaveClearTxPdoWrite_MasterId(self, masterId, index, subindex)

    def VirtualSlavePdoRead_MasterId(self, masterId, index, subindex, pdoBuffSize):
        pdoBuffArray = uintArray(pdoBuffSize)
        actualSize = uintp()
        ret = _WMX3ApiPython.Ecat_VirtualSlavePdoRead_MasterId(self, masterId, index, subindex, pdoBuffSize, pdoBuffArray, actualSize)

        pdoBuff = []
        for i in range(pdoBuffSize):
            pdoBuff.append(pdoBuffArray[i])

        return ret, pdoBuff, actualSize.value()



# Register Ecat in _WMX3ApiPython:
_WMX3ApiPython.Ecat_swigregister(Ecat)

